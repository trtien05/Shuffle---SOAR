'use client';
import { useCallback, useMemo, useState } from 'react';
import { addMonths } from "../../internals/utils/date/index.js";
import { useEventCallback } from "../../internals/hooks/index.js";
export var CalendarState = /*#__PURE__*/function (CalendarState) {
  CalendarState["TIME"] = "TIME";
  CalendarState["MONTH"] = "MONTH";
  return CalendarState;
}({});
export var useCalendarState = function useCalendarState(props) {
  var _useState = useState(props.defaultState),
    calendarState = _useState[0],
    setCalendarState = _useState[1];
  var reset = useCallback(function () {
    setCalendarState(undefined);
  }, []);
  var onMoveForward = useEventCallback(function () {
    var _props$onMoveForward;
    (_props$onMoveForward = props.onMoveForward) === null || _props$onMoveForward === void 0 ? void 0 : _props$onMoveForward.call(props, addMonths(props.calendarDate, 1));
  });
  var onMoveBackward = useEventCallback(function () {
    var _props$onMoveBackward;
    (_props$onMoveBackward = props.onMoveBackward) === null || _props$onMoveBackward === void 0 ? void 0 : _props$onMoveBackward.call(props, addMonths(props.calendarDate, -1));
  });
  var onToggleTimeDropdown = useEventCallback(function () {
    var _props$onToggleTimeDr;
    if (calendarState === CalendarState.TIME) {
      reset();
    } else {
      setCalendarState(CalendarState.TIME);
    }
    (_props$onToggleTimeDr = props.onToggleTimeDropdown) === null || _props$onToggleTimeDr === void 0 ? void 0 : _props$onToggleTimeDr.call(props, calendarState !== CalendarState.TIME);
  });
  var onToggleMonthDropdown = useEventCallback(function () {
    var _props$onToggleMonthD;
    if (calendarState === CalendarState.MONTH) {
      reset();
    } else {
      setCalendarState(CalendarState.MONTH);
    }
    (_props$onToggleMonthD = props.onToggleMonthDropdown) === null || _props$onToggleMonthD === void 0 ? void 0 : _props$onToggleMonthD.call(props, calendarState !== CalendarState.MONTH);
  });
  var handlers = useMemo(function () {
    return {
      onMoveForward: onMoveForward,
      onMoveBackward: onMoveBackward,
      onToggleTimeDropdown: onToggleTimeDropdown,
      onToggleMonthDropdown: onToggleMonthDropdown
    };
  }, [onMoveBackward, onMoveForward, onToggleMonthDropdown, onToggleTimeDropdown]);
  return {
    calendarState: calendarState,
    handlers: handlers,
    reset: reset
  };
};