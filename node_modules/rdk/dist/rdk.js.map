{"version":3,"file":"rdk.js","sources":["../src/ExitListener/useExitListener.tsx","../src/Overlay/OverlayContext.ts","../src/utils/useId.ts","../src/utils/useUnmount.ts","../src/Portal/Portal.ts","../src/Overlay/OverlayPortal/OverlayPortal.tsx","../src/Backdrop/Backdrop.tsx","../src/Overlay/GlobalOverlay/GlobalOverlay.tsx","../src/Overlay/OverlayTrigger.tsx","../src/Position/usePosition.tsx","../src/utils/CloneElement.tsx","../src/utils/useUserSelect.ts","../src/utils/useCursor.ts","../src/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx","../src/Overlay/ConnectedOverlay/ConnectedOverlay.tsx","../src/Overlay/useOverlay.tsx"],"sourcesContent":["import { RefObject, useEffect } from 'react';\n\ninterface ExitListenerOptions {\n  /**\n   * A ref object pointing to the target element that the hook should\n   * observe for click outside and escape key events.\n   */\n  ref: RefObject<HTMLElement | null>;\n\n  /**\n   * An optional boolean to enable or disable the event listeners.\n   * When set to true (default), the event listeners are active.\n   */\n  open?: boolean;\n\n  /**\n   * An optional callback function that is called when a click\n   * event occurs outside the target element.\n   */\n  onClickOutside?: (event: MouseEvent) => void;\n\n  /**\n   * An optional callback function that is called\n   * when the 'Escape' key is pressed.\n   */\n  onEscape?: (event: KeyboardEvent) => void;\n}\n\nexport const useExitListener = ({\n  ref,\n  open = true,\n  onClickOutside,\n  onEscape\n}: ExitListenerOptions) => {\n  useEffect(() => {\n    if (!open) {\n      return;\n    }\n\n    const handleClick = (event: MouseEvent | TouchEvent) => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        onClickOutside?.(event as MouseEvent);\n      }\n    };\n\n    const handleKey = (event: KeyboardEvent) => {\n      if (event.code === 'Escape') {\n        onEscape?.(event);\n      }\n    };\n\n    if (onClickOutside) {\n      document.addEventListener('mousedown', handleClick);\n      document.addEventListener('touchstart', handleClick);\n    }\n\n    if (onEscape) {\n      document.addEventListener('keydown', handleKey);\n    }\n\n    return () => {\n      if (onClickOutside) {\n        document.removeEventListener('mousedown', handleClick);\n        document.removeEventListener('touchstart', handleClick);\n      }\n\n      if (onEscape) {\n        document.removeEventListener('keydown', handleKey);\n      }\n    };\n  }, [ref, onClickOutside, onEscape, open]);\n};\n","import { createContext } from 'react';\n\nexport interface OverlayContextValue {\n  /**\n   * Closes current overlay.\n   */\n  close(): void;\n}\n\nexport const OverlayContext = createContext<OverlayContextValue>({\n  close: () => undefined\n});\n","import { useState } from 'react';\n\nlet id = 0;\nconst genId = () => `ref-${++id}`;\n\n/**\n * Auto-generate a id.\n * Inspired by: https://github.com/reach/reach-ui/blob/master/packages/auto-id/src/index.ts\n */\nexport const useId = (idFromProps?: string | null) => {\n  const [id] = useState(idFromProps || genId());\n  return `${id}`;\n};\n","import { useLayoutEffect, useRef } from 'react';\n\nexport const useUnmount = fn => {\n  const fnRef = useRef(fn);\n  fnRef.current = fn;\n  useLayoutEffect(() => () => fnRef.current(), []);\n};\n","import {\n  useImperativeHandle,\n  forwardRef,\n  FC,\n  PropsWithChildren,\n  useLayoutEffect,\n  useRef,\n  Ref,\n  useEffect\n} from 'react';\nimport { createPortal } from 'react-dom';\nimport { useUnmount } from '../utils/useUnmount';\n\nexport interface PortalProps extends PropsWithChildren {\n  element?: string;\n  className?: string;\n  onMount?: () => void;\n  onUnmount?: () => void;\n}\n\nexport const Portal: FC<PortalProps & { ref?: Ref<HTMLElement> }> = forwardRef(\n  ({ children, className, element = 'div', onMount, onUnmount }, ref) => {\n    const elementRef = useRef<HTMLElement | null>(null);\n    const mounted = useRef<boolean>(false);\n\n    useEffect(() => {\n      if (className && elementRef.current) {\n        elementRef.current.setAttribute('class', `${className} rdk-portal`);\n      }\n    }, [className, elementRef.current]);\n\n    useLayoutEffect(() => {\n      // Create ref to created element once, on mount\n      elementRef.current = document.createElement(element);\n      onMount?.();\n    }, []);\n\n    useUnmount(() => {\n      onUnmount?.();\n      const ref = elementRef.current;\n      if (ref && document.body.contains(ref)) {\n        document.body.removeChild(ref);\n      }\n    });\n\n    useImperativeHandle(ref, () => elementRef.current!);\n\n    if (!elementRef.current) {\n      return null;\n    }\n\n    if (!mounted.current) {\n      mounted.current = true;\n      elementRef.current.classList.add('rdk-portal');\n      document.body.appendChild(elementRef.current);\n    }\n\n    return createPortal(children, elementRef.current) as JSX.Element;\n  }\n);\n","import React, {\n  FC,\n  forwardRef,\n  Ref,\n  useImperativeHandle,\n  useRef,\n  useState\n} from 'react';\nimport { useId } from '../../utils/useId';\nimport { Portal } from '../../Portal';\n\n// NOTE: This should not be used by external consumers.\nexport const portals: string[] = [];\n\nconst START_INDEX = 990;\n\nexport interface OverlayPortalRef {\n  ref?: Ref<HTMLElement>;\n}\n\nexport interface OverlayPortalMountEvent {\n  overlayIndex: number;\n  portalIndex: number;\n  portalId: string;\n  backdropIndex: number;\n}\n\nexport interface OverlayPortalProps {\n  appendToBody?: boolean;\n  className?: string;\n  id?: string;\n  children: (props: OverlayPortalMountEvent) => any;\n  onMount?: (event: OverlayPortalMountEvent) => void;\n  onUnmount?: () => void;\n}\n\nexport const OverlayPortal: FC<\n  OverlayPortalProps & OverlayPortalRef\n> = forwardRef(\n  ({ className, children, onMount, onUnmount, appendToBody, id }, ref) => {\n    let portalId = useId(id);\n\n    const [portalIndex, setPortalIndex] = useState<number | null>(null);\n    const [overlayIndex, setOverlayIndex] = useState<number | null>(null);\n    const portalRef = useRef<any | null>(null);\n\n    useImperativeHandle(ref, () => portalRef.current);\n\n    return (\n      <Portal\n        className={className}\n        ref={portalRef}\n        appendToBody={appendToBody}\n        onMount={() => {\n          portals.push(portalId);\n\n          let pidx = portals.indexOf(portalId);\n          setPortalIndex(pidx);\n\n          const overlayIdx = START_INDEX + pidx * 2 + 1;\n          setOverlayIndex(overlayIdx);\n\n          onMount?.({\n            portalId,\n            overlayIndex: overlayIdx,\n            portalIndex: pidx,\n            backdropIndex: overlayIdx\n          });\n        }}\n        onUnmount={() => {\n          onUnmount?.();\n          portals.splice(portals.indexOf(portalId), 1);\n          setPortalIndex(null);\n          setOverlayIndex(null);\n        }}\n      >\n        {children({\n          overlayIndex: overlayIndex as number,\n          portalIndex: portalIndex as number,\n          backdropIndex: overlayIndex as number,\n          portalId\n        })}\n      </Portal>\n    );\n  }\n);\n\nOverlayPortal.defaultProps = {\n  appendToBody: true\n};\n","import React, { FC, MouseEvent } from 'react';\nimport classNames from 'classnames';\nimport { motion } from 'framer-motion';\nimport css from './Backdrop.module.css';\n\nexport interface BackdropProps {\n  zIndex?: number;\n  portalIndex?: number;\n  className?: string;\n  onClick?: (event: MouseEvent) => void;\n}\n\nexport const Backdrop: FC<BackdropProps> = ({\n  portalIndex,\n  zIndex,\n  className,\n  onClick\n}) => (\n  <motion.div\n    className={classNames(css.backdrop, className)}\n    initial={{ opacity: 0 }}\n    animate={{ opacity: 0.8 - (portalIndex as number) / 10 }}\n    exit={{ opacity: 0 }}\n    style={{ zIndex }}\n    onClick={onClick}\n  />\n);\n\nBackdrop.defaultProps = {\n  zIndex: 998,\n  portalIndex: 0\n};\n","import React, { FC, Fragment, useCallback, useEffect, useRef } from 'react';\nimport {\n  disableBodyScroll,\n  clearAllBodyScrollLocks\n} from 'body-scroll-lock-upgrade';\nimport { OverlayContext } from '../OverlayContext';\nimport { AnimatePresence } from 'framer-motion';\nimport { OverlayPortal } from '../OverlayPortal';\nimport { useExitListener } from '../../ExitListener';\nimport { Backdrop } from '../../Backdrop';\n\nexport interface GlobalOverlayProps {\n  children?: any;\n  open: boolean;\n  closeOnBackdropClick?: boolean;\n  hasBackdrop?: boolean;\n  backdropClassName?: string;\n  closeOnEscape?: boolean;\n  onClose?: () => void;\n}\n\nexport const GlobalOverlay: FC<GlobalOverlayProps> = ({\n  open,\n  hasBackdrop = true,\n  closeOnEscape = true,\n  closeOnBackdropClick = true,\n  backdropClassName,\n  children,\n  onClose\n}) => {\n  const overlayRef = useRef<any | null>(null);\n\n  const onBackdropClick = useCallback(() => {\n    if (closeOnBackdropClick) {\n      onClose?.();\n    }\n  }, [closeOnBackdropClick, onClose]);\n\n  useExitListener({\n    ref: overlayRef,\n    open,\n    onEscape: () => closeOnEscape && onClose?.()\n  });\n\n  useEffect(() => {\n    if (open && overlayRef.current !== undefined) {\n      disableBodyScroll(overlayRef.current, {\n        // allowTouchMove determines which elements to allow touchmove events for iOS https://github.com/rick-liruixin/body-scroll-lock-upgrade?tab=readme-ov-file#allowtouchmove\n        //@ts-expect-error: allowTouchMove is typed wrong: https://github.com/rick-liruixin/body-scroll-lock-upgrade/issues/21\n        allowTouchMove: (el: HTMLElement) => {\n          while (el && el !== document.body) {\n            if (el.getAttribute('body-scroll-lock-ignore') !== null) {\n              return true;\n            }\n            if (el.parentElement !== null) {\n              el = el.parentElement;\n            }\n          }\n          return false;\n        }\n      });\n    } else {\n      clearAllBodyScrollLocks();\n    }\n\n    return () => {\n      clearAllBodyScrollLocks();\n    };\n  }, [children, open]);\n\n  return (\n    <OverlayContext.Provider value={{ close: () => onClose?.() }}>\n      <AnimatePresence>\n        {open && (\n          <OverlayPortal ref={overlayRef}>\n            {({ overlayIndex, portalIndex }) => (\n              <Fragment>\n                {hasBackdrop && (\n                  <Backdrop\n                    zIndex={overlayIndex as number}\n                    portalIndex={portalIndex as number}\n                    onClick={onBackdropClick}\n                    className={backdropClassName}\n                  />\n                )}\n                <div body-scroll-lock-ignore=\"true\">\n                  {children({ overlayIndex, portalIndex })}\n                </div>\n              </Fragment>\n            )}\n          </OverlayPortal>\n        )}\n      </AnimatePresence>\n    </OverlayContext.Provider>\n  );\n};\n","import React, { useCallback, forwardRef, Ref, FC } from 'react';\n\nexport type TriggerTypes = 'hover' | 'click' | 'contextmenu' | 'focus' | 'key';\n\nexport interface OverlayTriggerEvent {\n  type: TriggerTypes;\n  nativeEvent: any;\n}\n\nexport interface OverlayTriggerProps {\n  children?: any;\n  className?: string;\n  elementType?: any;\n  trigger: TriggerTypes | TriggerTypes[];\n  onOpen?: (event: OverlayTriggerEvent) => void;\n  onClose?: (event: OverlayTriggerEvent) => void;\n}\n\nexport const OverlayTrigger: FC<\n  OverlayTriggerProps & {\n    ref: Ref<HTMLSpanElement>;\n  }\n> = forwardRef(\n  (\n    {\n      children,\n      className,\n      elementType = 'span',\n      trigger = ['click'],\n      onOpen = () => undefined,\n      onClose = () => undefined\n    },\n    ref\n  ) => {\n    const hasTrigger = useCallback(\n      (type: TriggerTypes) => {\n        if (Array.isArray(trigger)) {\n          return trigger.includes(type);\n        } else {\n          return type === trigger;\n        }\n      },\n      [trigger]\n    );\n\n    const onFocus = useCallback(\n      event => {\n        if (hasTrigger('focus')) {\n          onOpen({ type: 'focus', nativeEvent: event });\n        }\n      },\n      [onOpen, hasTrigger]\n    );\n\n    const onBlur = useCallback(\n      event => {\n        if (hasTrigger('focus')) {\n          onClose({ type: 'focus', nativeEvent: event });\n        }\n      },\n      [onClose, hasTrigger]\n    );\n\n    const onMouseEnter = useCallback(\n      event => {\n        if (hasTrigger('hover')) {\n          onOpen({ type: 'hover', nativeEvent: event });\n        }\n      },\n      [onOpen, hasTrigger]\n    );\n\n    const onMouseLeave = useCallback(\n      event => {\n        if (hasTrigger('hover')) {\n          onClose({ type: 'hover', nativeEvent: event });\n        }\n      },\n      [onClose, hasTrigger]\n    );\n\n    const onClick = useCallback(\n      event => {\n        if (hasTrigger('click')) {\n          onOpen({ type: 'click', nativeEvent: event });\n        }\n\n        // Kill the tooltip on click if its not a click listener\n        if (!hasTrigger('click')) {\n          onClose({ type: 'hover', nativeEvent: event });\n        }\n      },\n      [onOpen, onClose, hasTrigger]\n    );\n\n    const onContextMenu = useCallback(\n      event => {\n        if (hasTrigger('contextmenu')) {\n          event.preventDefault();\n          onOpen({ type: 'contextmenu', nativeEvent: event });\n        }\n      },\n      [onOpen]\n    );\n\n    const tabIndex = hasTrigger('focus') ? -1 : undefined;\n    const Component = elementType;\n\n    return (\n      <Component\n        ref={ref}\n        tabIndex={tabIndex}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onClick={onClick}\n        onContextMenu={onContextMenu}\n        className={className}\n      >\n        {children}\n      </Component>\n    );\n  }\n);\n","import { useRef, useLayoutEffect, RefObject, useMemo } from 'react';\nimport PopperJS from 'popper.js';\n\nexport type Placement = PopperJS.Placement;\n\nexport type ReferenceProp =\n  | ReferenceObject\n  | HTMLElement\n  | RefObject<HTMLElement>;\n\nexport interface ReferenceObject {\n  top: number;\n  left: number;\n  height: number;\n  width: number;\n}\n\nexport interface PositionOptions {\n  placement?: Placement;\n  modifiers?: PopperJS.Modifiers;\n  followCursor?: boolean;\n}\n\nexport const usePosition = (\n  reference: ReferenceProp,\n  { followCursor, placement, modifiers }: PositionOptions = {}\n) => {\n  const elementRef = useRef<any | null>(null);\n  const popper = useRef<PopperJS | null>(null);\n  const mouse = useRef<{ pageX: number; pageY: number }>({\n    pageX: 0,\n    pageY: 0\n  });\n\n  // Find the real reference pointer for updating\n  const refPointer = (reference as RefObject<HTMLElement>).current;\n\n  const popperRef = useMemo(() => {\n    const refObj = reference as RefObject<HTMLElement>;\n    if (refObj.current !== undefined) {\n      return refObj.current;\n    }\n\n    const refElement = reference as HTMLElement;\n    if (followCursor) {\n      return {\n        getBoundingClientRect: () => ({\n          top: mouse.current.pageY,\n          right: mouse.current.pageX,\n          bottom: mouse.current.pageY,\n          left: mouse.current.pageX,\n          width: 0,\n          height: 0\n        }),\n        clientWidth: 0,\n        clientHeight: 0\n      };\n    } else if (refElement && !refElement.getBoundingClientRect) {\n      const { top, left, width, height } = reference as ReferenceObject;\n\n      return {\n        getBoundingClientRect: () => ({\n          top,\n          left,\n          width,\n          bottom: top - height,\n          right: left - width,\n          height\n        }),\n        clientWidth: width,\n        clientHeight: height\n      };\n    }\n\n    return refElement;\n  }, [followCursor, reference, refPointer, mouse]);\n\n  useLayoutEffect(() => {\n    let rqf;\n\n    const onMouseMove = ({ pageX, pageY }: MouseEvent) => {\n      mouse.current = { pageX, pageY };\n      popper.current?.scheduleUpdate();\n    };\n\n    const onWindowScroll = () => {\n      rqf = requestAnimationFrame(() => {\n        popper.current?.scheduleUpdate();\n      });\n    };\n\n    if (elementRef.current && popperRef) {\n      //@ts-ignore\n      popper.current = new PopperJS(popperRef, elementRef.current, {\n        placement: placement || 'top',\n        modifiers: modifiers || {},\n        onCreate: () => {\n          window.addEventListener('scroll', onWindowScroll);\n\n          if (followCursor) {\n            window.addEventListener('mousemove', onMouseMove);\n          }\n        }\n      });\n    }\n\n    return () => {\n      if (!elementRef.current) {\n        popper.current?.destroy();\n\n        cancelAnimationFrame(rqf);\n        window.removeEventListener('scroll', onWindowScroll);\n\n        if (followCursor) {\n          window.removeEventListener('mousemove', onMouseMove);\n        }\n      }\n    };\n  }, [elementRef.current]);\n\n  useLayoutEffect(() => {\n    if (popper.current) {\n      popper.current.reference = popperRef as any;\n      popper.current.scheduleUpdate();\n    }\n  }, [popperRef]);\n\n  return [elementRef, popper];\n};\n","import { cloneElement, useMemo } from 'react';\nimport classNames from 'classnames';\n\ninterface CloneElementProps {\n  element: any;\n  children?: any;\n  childRef?: any;\n}\n\n/**\n * CloneElement is a wrapper component for createElement function.\n * This allows you to describe your cloning element declaratively\n * which is a more natural API for React.\n */\nexport function CloneElement<T = any>({\n  children,\n  element,\n  childRef,\n  ...rest\n}: CloneElementProps & Partial<T>) {\n  const getProjectedProps = useMemo(\n    () => props => {\n      const childProps = element.props;\n\n      return Object.keys(props).reduce((acc, key) => {\n        const prop = props[key];\n        const childProp = childProps[key];\n\n        if (typeof prop === 'function' && typeof childProp === 'function') {\n          acc[key] = (...args) => {\n            prop(...args);\n            childProp(...args);\n          };\n        } else if (key === 'className') {\n          acc[key] = classNames(prop, childProp);\n        } else {\n          acc[key] = prop;\n        }\n\n        return acc;\n      }, {});\n    },\n    [rest]\n  );\n\n  if (element === null) {\n    return children;\n  }\n\n  // Tricky logic around functional vs class components\n  const ref = childRef\n    ? node => {\n        if (typeof childRef === 'function') {\n          childRef(node);\n        } else if (ref) {\n          childRef.current = node;\n        }\n      }\n    : undefined;\n\n  const newProps = getProjectedProps(rest);\n  return cloneElement(element, {\n    ...element.props,\n    ...newProps,\n    children,\n    ref\n  });\n}\n","import { useEffect } from 'react';\n\n/**\n * Set the body select style to none.\n */\nexport function useUserSelect(active: boolean) {\n  useEffect(() => {\n    if (active) {\n      document.body.style.userSelect = 'none';\n      return () => void (document.body.style.userSelect = 'initial');\n    }\n  }, [active]);\n}\n","import React from 'react';\n\n/**\n * Hook for setting body cursors.\n * Credits: https://github.com/pmndrs/drei#usecursor\n */\nexport function useCursor(\n  hovered: boolean,\n  onPointerOver = 'pointer',\n  onPointerOut = 'auto'\n) {\n  React.useEffect(() => {\n    if (hovered) {\n      document.body.style.cursor = onPointerOver;\n      return () => void (document.body.style.cursor = onPointerOut);\n    }\n  }, [hovered]);\n}\n","import React, {\n  FC,\n  forwardRef,\n  Ref,\n  useImperativeHandle,\n  RefObject,\n  useEffect,\n  useState,\n  useCallback\n} from 'react';\nimport { useExitListener } from '../../ExitListener';\nimport { Placement, usePosition } from '../../Position';\nimport { OverlayPortal, portals } from '../OverlayPortal';\nimport { useId } from '../../utils';\n\nexport interface ConnectedOverlayContentRef {\n  updatePosition: () => void;\n}\n\nexport interface ConnectedOverlayContentProps {\n  modifiers?: any;\n  followCursor?: boolean;\n  portalClassName?: string;\n  placement?: Placement;\n  triggerRef: any;\n  children: any;\n  closeOnBodyClick?: boolean;\n  closeOnEscape?: boolean;\n  elementType?: any;\n  appendToBody?: boolean;\n  onClose?: (event?: any) => void;\n}\n\nexport const ConnectedOverlayContent: FC<\n  ConnectedOverlayContentProps & {\n    ref?: Ref<ConnectedOverlayContentRef>;\n  }\n> = forwardRef(\n  (\n    {\n      triggerRef,\n      children,\n      portalClassName,\n      closeOnBodyClick,\n      closeOnEscape,\n      elementType,\n      appendToBody,\n      followCursor,\n      modifiers,\n      placement,\n      onClose\n    },\n    ref\n  ) => {\n    const id = useId();\n    const [overlayIndex, setOverlayIndex] = useState<number | null>(null);\n    const [positionRef, popperRef] = usePosition(triggerRef, {\n      followCursor,\n      modifiers,\n      placement\n    });\n\n    useImperativeHandle(ref, () => ({\n      updatePosition: () => {\n        popperRef?.current?.scheduleUpdate();\n      }\n    }));\n\n    const onClickOutside = useCallback(\n      (event: any) => {\n        if (closeOnBodyClick) {\n          // don't fire if i click the clicker\n          let ref: HTMLElement | null = null;\n          if ((triggerRef as RefObject<HTMLElement>).current) {\n            ref = (triggerRef as RefObject<HTMLElement>).current as HTMLElement;\n          } else if ((triggerRef as HTMLElement).contains !== undefined) {\n            ref = triggerRef as HTMLElement;\n          }\n\n          // Handle parent click containers\n          const container = event.target.closest('.rdk-portal');\n\n          // Only close the last one\n          const isLast = portals.indexOf(id) === portals.length - 1;\n\n          if (!ref?.contains(event.target) && (isLast || !container)) {\n            onClose?.(event);\n          }\n        }\n      },\n      [closeOnBodyClick, onClose]\n    );\n\n    const onEscape = useCallback(() => {\n      if (closeOnEscape) {\n        onClose?.();\n      }\n    }, [closeOnEscape, onClose]);\n\n    useExitListener({\n      open: true,\n      ref: positionRef,\n      onClickOutside,\n      onEscape\n    });\n\n    useEffect(() => {\n      if (positionRef && overlayIndex) {\n        positionRef.current.style.zIndex = overlayIndex;\n      }\n    }, [positionRef.current, overlayIndex]);\n\n    return (\n      <OverlayPortal\n        id={id}\n        ref={positionRef}\n        className={portalClassName}\n        elementType={elementType}\n        appendToBody={appendToBody}\n        onMount={event => setOverlayIndex(event.overlayIndex)}\n        onUnmount={() => setOverlayIndex(null)}\n      >\n        {children}\n      </OverlayPortal>\n    );\n  }\n);\n\nConnectedOverlayContent.defaultProps = {\n  closeOnBodyClick: true,\n  closeOnEscape: true,\n  appendToBody: true,\n  placement: 'bottom'\n};\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  Fragment,\n  forwardRef,\n  Ref,\n  useImperativeHandle,\n  useMemo\n} from 'react';\nimport { TriggerTypes, OverlayTrigger } from '../OverlayTrigger';\nimport { Placement, ReferenceProp } from '../../Position';\nimport { AnimatePresence } from 'framer-motion';\nimport { OverlayContext } from '../../Overlay/OverlayContext';\nimport {\n  ConnectedOverlayContent,\n  ConnectedOverlayContentRef\n} from './ConnectedOverlayContent';\n\nexport interface OverlayEvent {\n  /**\n   * Type of the event.\n   */\n  type: TriggerTypes;\n\n  /**\n   * Native event object.\n   */\n  nativeEvent: any;\n}\n\nexport interface ConnectedOverlayProps {\n  /**\n   * Whether the overlay should be visible.\n   */\n  open: boolean;\n\n  /**\n   * Reference of the overlay to align to.\n   */\n  reference?: ReferenceProp;\n\n  /**\n   * The content of the overlay.\n   */\n  children?: any;\n\n  /**\n   * Content to render in the overlay.\n   */\n  content: any;\n\n  /**\n   * Type of trigger to open the overlay.\n   */\n  trigger?: TriggerTypes[] | TriggerTypes;\n\n  /**\n   * Trigger element to open the overlay.\n   */\n  triggerElement?: any;\n\n  /**\n   * Trigger classname.\n   */\n  triggerClassName?: string;\n\n  /**\n   * Portal classname.\n   */\n  portalClassName?: string;\n\n  /**\n   * Close when the body is clicked or not.\n   */\n  closeOnBodyClick?: boolean;\n\n  /**\n   * Close when escape is pressed or not.\n   */\n  closeOnEscape?: boolean;\n\n  /**\n   * Append the overlay to the body. Almost always want this.\n   */\n  appendToBody?: boolean;\n\n  /**\n   * Overlay element type.\n   */\n  elementType?: string;\n\n  /**\n   * Position modifiers.\n   */\n  modifiers?: any;\n\n  /**\n   * Overlay should follow cursor or not.\n   */\n  followCursor?: boolean;\n\n  /**\n   * Placement of the overlay.\n   */\n  placement?: Placement;\n\n  /**\n   * Event called when the overlay is opened.\n   */\n  onOpen?: (event?: any) => void;\n\n  /**\n   * Event called when the overlay is closed.\n   */\n  onClose?: (event?: any) => void;\n}\n\nexport const ConnectedOverlay: FC<\n  ConnectedOverlayProps & {\n    ref?: Ref<ConnectedOverlayContentRef>;\n  }\n> = forwardRef(\n  (\n    {\n      reference,\n      children,\n      open,\n      content,\n      triggerElement,\n      triggerClassName,\n      trigger,\n      onOpen,\n      onClose,\n      ...rest\n    },\n    ref\n  ) => {\n    const mounted = useRef<boolean>(false);\n    const overlayTriggerRef = useRef<any | null>(null);\n    const contentRef = useRef<any | null>(null);\n    const triggerRef = reference || overlayTriggerRef;\n\n    useImperativeHandle(ref, () => ({\n      updatePosition: () => {\n        contentRef.current?.updatePosition();\n      }\n    }));\n\n    useEffect(() => {\n      if (mounted.current) {\n        if (!open) {\n          onClose?.();\n        } else {\n          onOpen?.();\n        }\n      }\n    }, [open]);\n\n    useEffect(() => {\n      if (!mounted.current) {\n        mounted.current = true;\n      }\n    });\n\n    const providerValue = useMemo(\n      () => ({\n        close: () => onClose?.()\n      }),\n      [onClose]\n    );\n\n    return (\n      <OverlayContext.Provider value={providerValue}>\n        {children && (\n          <Fragment>\n            {trigger ? (\n              <OverlayTrigger\n                elementType={triggerElement}\n                ref={overlayTriggerRef}\n                className={triggerClassName}\n                trigger={trigger}\n                onOpen={onOpen}\n                onClose={onClose}\n              >\n                {children}\n              </OverlayTrigger>\n            ) : (\n              children\n            )}\n          </Fragment>\n        )}\n        <AnimatePresence>\n          {open && (\n            <ConnectedOverlayContent\n              {...rest}\n              ref={contentRef}\n              triggerRef={triggerRef}\n              onClose={onClose}\n            >\n              {content}\n            </ConnectedOverlayContent>\n          )}\n        </AnimatePresence>\n      </OverlayContext.Provider>\n    );\n  }\n);\n\nConnectedOverlay.defaultProps = {\n  trigger: 'click' as TriggerTypes\n};\n","import { useContext } from 'react';\nimport { OverlayContext } from './OverlayContext';\n\nexport const useOverlay = () => {\n  const context = useContext(OverlayContext);\n\n  if (context === undefined) {\n    throw new Error(\n      '`useOverlay` hook can only be used inside a overlay component.'\n    );\n  }\n\n  return context;\n};\n"],"names":["id","ref"],"mappings":"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"}