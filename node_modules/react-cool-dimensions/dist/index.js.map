{"version":3,"file":"index.js","sources":["../src/useLatest.ts","../src/index.ts"],"sourcesContent":["import type { RefObject } from \"react\";\nimport { useRef } from \"react\";\n\nexport default <T>(val: T): RefObject<T> => {\n  const ref = useRef(val);\n  ref.current = val;\n  return ref;\n};\n","import { useState, useRef, useEffect, useCallback } from \"react\";\n\nimport useLatest from \"./useLatest\";\n\nexport const observerErr =\n  \"ðŸ’¡ react-cool-dimensions: the browser doesn't support Resize Observer, please use polyfill: https://github.com/wellyshen/react-cool-dimensions#resizeobserver-polyfill\";\nexport const borderBoxWarn =\n  \"ðŸ’¡ react-cool-dimensions: the browser doesn't support border-box size, fallback to content-box size. Please see: https://github.com/wellyshen/react-cool-dimensions#border-box-size-measurement\";\n\ninterface State {\n  readonly currentBreakpoint: string;\n  readonly width: number | null;\n  readonly height: number | null;\n  readonly entry?: ResizeObserverEntry;\n}\ninterface Observe<T> {\n  (element?: T | null): void;\n}\ninterface Event<T> extends State {\n  readonly entry: ResizeObserverEntry;\n  observe: Observe<T>;\n  unobserve: () => void;\n}\ninterface OnResize<T> {\n  (event: Event<T>): void;\n}\ninterface ShouldUpdate {\n  (state: State): boolean;\n}\ntype Breakpoints = Record<string, number>;\nexport interface Options<T> {\n  useBorderBoxSize?: boolean;\n  breakpoints?: Breakpoints;\n  updateOnBreakpointChange?: boolean;\n  shouldUpdate?: ShouldUpdate;\n  onResize?: OnResize<T>;\n  polyfill?: any;\n}\ninterface Return<T> extends Omit<Event<T>, \"entry\"> {\n  entry?: ResizeObserverEntry;\n}\n\nconst getCurrentBreakpoint = (bps: Breakpoints, w: number): string => {\n  let curBp = \"\";\n  let max = -1;\n\n  Object.keys(bps).forEach((key: string) => {\n    const val = bps[key];\n\n    if (w >= val && val > max) {\n      curBp = key;\n      max = val;\n    }\n  });\n\n  return curBp;\n};\n\nconst useDimensions = <T extends HTMLElement | null>({\n  useBorderBoxSize,\n  breakpoints,\n  updateOnBreakpointChange,\n  shouldUpdate,\n  onResize,\n  polyfill,\n}: Options<T> = {}): Return<T> => {\n  const [state, setState] = useState<State>({\n    currentBreakpoint: \"\",\n    width: null,\n    height: null,\n  });\n  const prevSizeRef = useRef<{ width?: number; height?: number }>({});\n  const prevBreakpointRef = useRef<string>();\n  const observerRef = useRef<ResizeObserver>();\n  const warnedRef = useRef(false);\n  const ref = useRef<T>();\n  const onResizeRef = useLatest<OnResize<T> | undefined>(onResize);\n  const shouldUpdateRef = useLatest<ShouldUpdate | undefined>(shouldUpdate);\n\n  const unobserve = useCallback(() => {\n    if (observerRef.current) observerRef.current.disconnect();\n  }, []);\n\n  const observe = useCallback<Observe<T>>(\n    (element) => {\n      if (element && element !== ref.current) {\n        unobserve();\n        ref.current = element;\n        setState({\n          currentBreakpoint: \"\",\n          width: element.clientWidth,\n          height: element.clientHeight,\n        });\n      }\n      if (observerRef.current && ref.current)\n        observerRef.current.observe(ref.current as HTMLElement);\n    },\n    [unobserve]\n  );\n\n  useEffect(() => {\n    if (\n      (!(\"ResizeObserver\" in window) || !(\"ResizeObserverEntry\" in window)) &&\n      !polyfill\n    ) {\n      console.error(observerErr);\n      return () => null;\n    }\n\n    let raf: number | null = null;\n\n    // eslint-disable-next-line compat/compat\n    observerRef.current = new (polyfill || ResizeObserver)(([entry]: any) => {\n      raf = requestAnimationFrame(() => {\n        const { contentBoxSize, borderBoxSize, contentRect } = entry;\n\n        let boxSize = contentBoxSize;\n        if (useBorderBoxSize)\n          if (borderBoxSize) {\n            boxSize = borderBoxSize;\n          } else if (!warnedRef.current) {\n            console.warn(borderBoxWarn);\n            warnedRef.current = true;\n          }\n        // @juggle/resize-observer polyfill has different data structure\n        boxSize = Array.isArray(boxSize) ? boxSize[0] : boxSize;\n\n        const width = boxSize ? boxSize.inlineSize : contentRect.width;\n        const height = boxSize ? boxSize.blockSize : contentRect.height;\n\n        if (\n          width === prevSizeRef.current.width &&\n          height === prevSizeRef.current.height\n        )\n          return;\n\n        prevSizeRef.current = { width, height };\n\n        const e = {\n          currentBreakpoint: \"\",\n          width,\n          height,\n          entry,\n          observe,\n          unobserve,\n        };\n\n        if (breakpoints) {\n          e.currentBreakpoint = getCurrentBreakpoint(breakpoints, width);\n\n          if (e.currentBreakpoint !== prevBreakpointRef.current) {\n            if (onResizeRef.current) onResizeRef.current(e);\n            prevBreakpointRef.current = e.currentBreakpoint;\n          }\n        } else if (onResizeRef.current) {\n          onResizeRef.current(e);\n        }\n\n        const next = {\n          currentBreakpoint: e.currentBreakpoint,\n          width,\n          height,\n          entry,\n        };\n\n        if (shouldUpdateRef.current && !shouldUpdateRef.current(next)) return;\n\n        if (\n          !shouldUpdateRef.current &&\n          breakpoints &&\n          updateOnBreakpointChange\n        ) {\n          setState((prev) =>\n            prev.currentBreakpoint !== next.currentBreakpoint ? next : prev\n          );\n          return;\n        }\n\n        setState(next);\n      });\n    });\n\n    observe();\n\n    return () => {\n      unobserve();\n      if (raf) cancelAnimationFrame(raf);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    JSON.stringify(breakpoints),\n    useBorderBoxSize,\n    observe,\n    unobserve,\n    updateOnBreakpointChange,\n  ]);\n\n  return { ...state, observe, unobserve };\n};\n\nexport default useDimensions;\n"],"names":["useLatest","val","ref","useRef","current","observerErr","borderBoxWarn","_temp","_ref","useBorderBoxSize","breakpoints","updateOnBreakpointChange","shouldUpdate","onResize","polyfill","_useState","useState","currentBreakpoint","width","height","state","setState","prevSizeRef","prevBreakpointRef","observerRef","warnedRef","onResizeRef","shouldUpdateRef","unobserve","useCallback","disconnect","observe","element","clientWidth","clientHeight","useEffect","window","console","error","raf","ResizeObserver","_ref2","entry","requestAnimationFrame","contentBoxSize","borderBoxSize","contentRect","boxSize","warn","Array","isArray","inlineSize","blockSize","bps","w","curBp","max","e","Object","keys","forEach","key","next","prev","cancelAnimationFrame","JSON","stringify","_extends"],"mappings":"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"}