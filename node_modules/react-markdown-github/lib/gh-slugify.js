'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * This RegEx is attempting to copy the Ruby pipeline filter GH uses to add unique ids to headings:
 * https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/toc_filter.rb
 * The replace isn't perfect as it doesn't correctly handle unicode characters.
 * This is an area for improvement via future contribution.
 */

var _replace = /[^\w\- ]/g;
var whitespace = /\s/g;

/**
 * A utility class that is used to create
 * a normalized ID from a string of text:
 *
 *   `This is my headline` becomes `this-is-my-headline`
 *
 * This is a statefull object such that duplicate
 * occurances of the same normalized string will have
 * sequence number apended to them.
 *
 * Passing `This is my headline` a second time becomes `this-is-my-headline-1`
 *
 * The normalization process is meant to mimic the headline
 * linking behavior GitHub provides when it renders markdown
 * to html.
 *
 * @class GithubSlugify
 * @api public
 */

var GithubSlugify = function () {
  function GithubSlugify() {
    _classCallCheck(this, GithubSlugify);

    this.slugs = {};
    this.replacementChar = '-';
  }

  /**
   * Convert the passed text into GH Slug.
   * @api private
   * @param {String} string - the txt to be converted to a slug.
   * @returns {String} the text converted to a slug.
   */


  _createClass(GithubSlugify, [{
    key: 'replace',
    value: function replace(string) {
      return string.toLowerCase().trim().replace(_replace, '').replace(whitespace, this.replacementChar);
    }

    /**
     * Helper function to extract text from a node.
     * @api public
     * @param {React.ReactElement} node - the react element to extract text from.
     * @returns {String} the node text extracted from the node.
     */

  }, {
    key: 'extractString',
    value: function extractString(node) {
      var _this = this;

      var title = '';
      if (node.props && node.props.children) {
        if (_typeof(node.props.children) === 'object') {
          node.props.children.forEach(function (child) {
            title += _this.extractString(child);
          });
        } else {
          title += node.props.children;
        }
      } else {
        title += node;
      }
      return title;
    }

    /**
     * Generates a GH style slug from the passed text.
     * @api public
     * @param {String} text - the txt to be converted to a slug.
     * @returns {String} the text converted to a slug.
     */

  }, {
    key: 'slug',
    value: function slug(text) {
      var slug = this.replace(text);
      var uniqueSlug = slug;
      this.slugs[slug] = this.slugs[slug] || 0;
      if (this.slugs[slug]) {
        uniqueSlug = slug + '-' + this.slugs[slug];
      }
      this.slugs[slug] += 1;
      return uniqueSlug;
    }

    /**
     * Generates a GH style slug from the passed node.
     * @api public
     * @param {Array} nodes - the react elements to be used to create a slug.
     * @returns {String} the node text converted to a slug.
     */

  }, {
    key: 'slugNode',
    value: function slugNode(nodes) {
      var _this2 = this;

      var title = '';
      nodes.forEach(function (node) {
        title += _this2.extractString(node);
      });
      return this.slug(title);
    }

    /**
     * Resets the state of this object including
     * the tracking of duplicate slugs.
     * @api public
     */

  }, {
    key: 'reset',
    value: function reset() {
      this.slugs = {};
    }
  }]);

  return GithubSlugify;
}();

exports.default = GithubSlugify;