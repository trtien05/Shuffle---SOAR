import React, { RefObject } from 'react';
export interface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {
    /**
     * If true, the input will take up the full width of its container.
     */
    fullWidth?: boolean;
    /**
     * If true, the input will be focused during the first mount.
     */
    selectOnFocus?: boolean;
    /**
     * If true, the input will show an error state.
     */
    error?: boolean;
    /**
     * Additional classname for the input container element.
     */
    containerClassname?: string;
    /**
     * Size of the input.
     */
    size?: 'small' | 'medium' | 'large';
    /**
     * Content to display before the input.
     */
    start?: React.ReactNode | string;
    /**
     * Content to display after the input.
     */
    end?: React.ReactNode | string;
    /**
     * Shortcut for the onChange value event.
     */
    onValueChange?: (value: string) => void;
}
export interface InputRef {
    inputRef: RefObject<HTMLInputElement>;
    containerRef: RefObject<HTMLDivElement>;
    blur?: () => void;
    focus?: () => void;
    select?: () => void;
}
export declare const Input: React.ForwardRefExoticComponent<InputProps & React.RefAttributes<InputRef>>;
