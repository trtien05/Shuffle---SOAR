import React, { FC, ReactElement, Ref, RefObject } from 'react';
import { SelectOptionProps, SelectValue } from '../SelectOption';
import { SelectInputChip, SelectInputChipProps } from './SelectInputChip';
export interface SelectInputProps {
    id?: string;
    name?: string;
    required?: boolean;
    options: SelectOptionProps[];
    disabled?: boolean;
    menuOpen?: boolean;
    fontSize?: string | number;
    inputText: string;
    closeOnSelect?: boolean;
    selectedOption?: SelectOptionProps | SelectOptionProps[];
    autoFocus?: boolean;
    className?: string;
    activeClassName?: string;
    createable?: boolean;
    filterable?: boolean;
    multiple?: boolean;
    loading?: boolean;
    reference?: Ref<SelectInputRef>;
    placeholder?: string;
    error?: boolean;
    clearable?: boolean;
    refreshable?: boolean;
    menuDisabled?: boolean;
    closeIcon?: React.ReactNode;
    refreshIcon?: React.ReactNode;
    expandIcon?: React.ReactNode;
    loadingIcon?: React.ReactNode;
    chip?: ReactElement<SelectInputChipProps, typeof SelectInputChip>;
    onSelectedChange: (option: SelectValue) => void;
    onExpandClick: (event: React.MouseEvent<Element>) => void;
    onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;
    onKeyUp: (event: React.KeyboardEvent<HTMLInputElement>) => void;
    onFocus: (event: React.FocusEvent<HTMLInputElement> | React.MouseEvent<HTMLDivElement>) => void;
    onBlur: (event: React.FocusEvent<HTMLInputElement>) => void;
    onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onRefresh?: () => void;
}
export interface SelectInputRef {
    inputRef: RefObject<HTMLInputElement>;
    containerRef: RefObject<HTMLDivElement>;
    focus: () => void;
}
export declare const SelectInput: FC<Partial<SelectInputProps>>;
