(function() {
  "use strict";
  try {
    if (typeof document != "undefined") {
      var elementStyle = document.createElement("style");
      elementStyle.appendChild(document.createTextNode("._dots_10uvw_1 {\n  cursor: pointer;\n  opacity: 0.5;\n  border: none;\n  background: none;\n  outline: none;\n  padding: 0;\n  font: inherit;\n  color: inherit;\n}\n._btn_1szmm_1 {\n  cursor: pointer;\n}\n\n  ._btn_1szmm_1:hover {\n    -webkit-text-decoration: underline;\n    text-decoration: underline;\n  }\n._btn_lab0n_1 {\n  cursor: pointer;\n  color: var(--color-primary);\n}\n\n  ._btn_lab0n_1:hover {\n    -webkit-text-decoration: underline;\n    text-decoration: underline;\n  }\n._button_fz3ld_1 {\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  display: flex;\n  align-items: center;\n  position: relative;\n}\n\n._disabled_fz3ld_9 {\n  cursor: auto;\n  cursor: initial;\n}\n\n._disabled_fz3ld_9._hasValue_fz3ld_12 {\n    cursor: not-allowed;\n  }\n\n._icon_fz3ld_17 {\n  height: var(--sort-icon-size);\n  width: var(--sort-icon-size);\n  vertical-align: middle;\n  margin: 0 var(--spacing-sm);\n  fill: var(--sort-icon-color);\n}\n\n._icon_fz3ld_17._ascIcon_fz3ld_24 {\n    transform: rotate(180deg);\n  }\n._container_tjtgz_1 {\n  display: flex;\n  width: 100%;\n  align-items: center;\n  border-bottom: solid 2px var(--body-background);\n}\n\n._input_tjtgz_8 {\n  color: var(--input-color);\n  border: none;\n  flex: 1;\n  padding: var(--spacing-md);\n  box-sizing: border-box;\n  font-weight: normal;\n  background: none;\n  font-family: var(--font-family);\n  color: var(--input-color);\n}\n\n._input_tjtgz_8:focus-within,\n  ._input_tjtgz_8:focus-visible {\n    outline: none;\n  }\n\n._input_tjtgz_8::-moz-placeholder {\n    color: var(--input-color-placeholder);\n  }\n\n._input_tjtgz_8::placeholder {\n    color: var(--input-color-placeholder);\n  }\n\n._icon_tjtgz_29 {\n  width: 15px;\n  height: 15px;\n  margin-left: var(--spacing-md);\n}\n._list_jz30e_1 {\n  display: flex;\n  flex-direction: column;\n}\n._listItem_r6l8m_1 {\n  align-items: center;\n  display: flex;\n  padding: var(--list-item-spacing);\n  position: relative;\n  border-radius: var(--list-item-border-radius);\n  color: var(--list-item-color);\n  transition: color 0.3s ease;\n}\n\n  ._listItem_r6l8m_1 ._startAdornment_r6l8m_10 {\n    padding-right: calc(var(--spacing-md) / 2);\n  }\n\n  ._listItem_r6l8m_1 ._endAdornment_r6l8m_14 {\n    padding-left: calc(var(--spacing-md) / 2);\n  }\n\n  ._listItem_r6l8m_1 ._startAdornment_r6l8m_10,\n  ._listItem_r6l8m_1 ._endAdornment_r6l8m_14 {\n    align-items: center;\n    display: flex;\n  }\n\n  ._listItem_r6l8m_1 ._startAdornment_r6l8m_10 svg, ._listItem_r6l8m_1 ._endAdornment_r6l8m_14 svg {\n      fill: var(--list-item-adornment-fill);\n    }\n\n  ._listItem_r6l8m_1 ._content_r6l8m_28 {\n    font-size: 14px;\n    flex: 1;\n    white-space: break-spaces;\n    word-break: break-word;\n  }\n\n  ._listItem_r6l8m_1._active_r6l8m_35 {\n    -webkit-text-decoration: underline;\n    text-decoration: underline;\n  }\n\n  ._listItem_r6l8m_1._disabled_r6l8m_39 {\n    cursor: not-allowed;\n  }\n\n  ._listItem_r6l8m_1._clickable_r6l8m_43 {\n    cursor: pointer;\n    transition: color 0.3s ease, background-color 0.3s ease;\n  }\n\n  ._listItem_r6l8m_1._clickable_r6l8m_43:hover {\n      color: var(--list-item-color-active);\n      background-color: var(--list-item-background-active);\n    }\n\n  ._listItem_r6l8m_1._dense_r6l8m_53 {\n    padding: var(--list-item-dense-spacing);\n  }\n\n  ._listItem_r6l8m_1._dense_r6l8m_53 ._content_r6l8m_28 {\n      font-size: 95%;\n    }\n\n  ._listItem_r6l8m_1._dense_r6l8m_53 ._startAdornment_r6l8m_10 {\n      padding-right: calc(var(--spacing-sm) / 2);\n    }\n\n  ._listItem_r6l8m_1._dense_r6l8m_53 ._endAdornment_r6l8m_14 {\n      padding-left: calc(var(--spacing-sm) / 2);\n    }\n\n  ._listItem_r6l8m_1._disableGutters_r6l8m_69 {\n    padding-left: 0;\n    padding-right: 0;\n  }\n\n  ._listItem_r6l8m_1._disablePadding_r6l8m_74 {\n    padding: 0;\n  }\n._root_1u76g_1 {\n  font-family: var(--font-family);\n  font-size: var(--page-title-font-size);\n  font-weight: var(--page-title-font-weight);\n  color: var(--page-title-color);\n  margin: var(--page-title-margin);\n}\n\n  ._root_1u76g_1._disableMargins_1u76g_8 {\n    margin: 0;\n  }\n._primary_1h9pf_1 {\n  color: var(--primary-color);\n}\n\n._secondary_1h9pf_5 {\n  color: var(--secondary-color);\n}\n\n._error_1h9pf_9 {\n  color: var(--error-color);\n}\n\n._success_1h9pf_13 {\n  color: var(--success-color);\n}\n\n._warning_1h9pf_17 {\n  color: var(--warning-color);\n}\n\n._info_1h9pf_21 {\n  color: var(--info-color);\n}\n\n._mono_1h9pf_25 {\n  font-family: var(--mono-font-family);\n}\n._root_9g7kd_1 {\n  font-family: var(--font-family);\n  font-size: var(--primary-heading-font-size);\n  font-weight: var(--primary-heading-font-weight);\n  color: var(--primary-heading-color);\n  margin: var(--primary-heading-margin);\n}\n\n  ._root_9g7kd_1._disableMargins_9g7kd_8 {\n    margin: 0;\n  }\n._root_1o2ul_1 {\n  font-family: var(--font-family);\n  font-size: var(--secondary-heading-font-size);\n  font-weight: var(--secondary-heading-font-weight);\n  color: var(--secondary-heading-color);\n  margin: var(--secondary-heading-margin);\n}\n\n  ._root_1o2ul_1._disableMargins_1o2ul_8 {\n    margin: 0;\n  }\n._root_1dv3y_1 {\n  font-family: var(--font-family);\n  font-size: var(--small-heading-font-size);\n  font-weight: var(--small-heading-font-weight);\n  color: var(--small-heading-color);\n  margin: var(--small-heading-margin);\n}\n\n  ._root_1dv3y_1._disableMargins_1dv3y_8 {\n    margin: 0;\n  }\n._root_1dwi9_1 {\n  font-size: var(--sub-font-size);\n  font-weight: var(--sub-font-weight);\n  color: var(--sub-color);\n  margin: var(--sub-margin);\n}\n\n  ._root_1dwi9_1._disableMargins_1dwi9_7 {\n    margin: 0;\n  }\n._thin_1ls8i_1 {\n  font-weight: var(--font-weight-thin);\n}\n\n._bold_1ls8i_5 {\n  font-weight: var(--font-weight-bold);\n}\n\n._extraBold_1ls8i_9 {\n  font-weight: var(--font-weight-extraBold);\n}\n\n._italic_1ls8i_13 {\n  font-style: italic;\n}\n._header_1ffms_1 {\n  padding-left: var(--spacing-md);\n  padding-right: var(--spacing-md);\n}\n._card_o9yl3_1 {\n  padding: var(--card-spacing);\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background: var(--card-background);\n  color: var(--card-color);\n  border: var(--card-border);\n  border-radius: var(--card-border-radius);\n}\n\n  ._card_o9yl3_1._disablePadding_o9yl3_11 {\n    padding: 0;\n  }\n\n  ._card_o9yl3_1 ._header_o9yl3_15 {\n    display: flex;\n    align-items: center;\n  }\n\n  ._card_o9yl3_1 ._header_o9yl3_15 ._push_o9yl3_19 {\n      flex: 1;\n      margin: 0 0 var(--spacing-md) 0;\n    }\n\n  ._card_o9yl3_1 ._header_o9yl3_15 ._headerText_o9yl3_24 {\n      margin-top: 0;\n      font-size: 14px;\n      font-weight: 500;\n      margin-bottom: var(--spacing-sm);\n    }\n\n  ._card_o9yl3_1 ._content_o9yl3_32 {\n    flex: 1;\n  }\n._card_1e3yj_1 {\n  width: 100%;\n}\n\n._innerCard_1e3yj_5 {\n  max-height: 80vh;\n  overflow-y: auto;\n}\n._chip_df3yr_1 {\n  font-family: var(--chip-font-family);\n  display: inline-flex;\n  align-items: center;\n  border-radius: var(--chip-border-radius);\n  border: 1px solid transparent;\n  box-sizing: border-box;\n  line-height: 1;\n}\n\n  ._chip_df3yr_1 svg {\n    transition: fill 0.15s ease-in-out;\n    will-change: fill;\n  }\n\n  ._chip_df3yr_1 ._startAdornment_df3yr_15 {\n    padding-right: var(--spacing-xs);\n    display: flex;\n    align-items: center;\n  }\n\n  ._chip_df3yr_1 ._content_df3yr_21 {\n    display: flex;\n    align-items: center;\n  }\n\n  ._chip_df3yr_1 ._endAdornment_df3yr_26 {\n    padding-left: var(--spacing-xs);\n    justify-self: flex-end;\n    display: flex;\n    align-items: center;\n  }\n\n  ._chip_df3yr_1._small_df3yr_33 {\n    padding: var(--spacing-xs) var(--spacing-xs);\n    font-size: 10px;\n  }\n\n  ._chip_df3yr_1._small_df3yr_33 svg {\n      width: 10px;\n      height: 10px;\n    }\n\n  ._chip_df3yr_1._medium_df3yr_43 {\n    padding: var(--spacing-sm) var(--spacing-md);\n    font-size: 12px;\n  }\n\n  ._chip_df3yr_1._medium_df3yr_43 svg {\n      width: 12px;\n      height: 12px;\n    }\n\n  ._chip_df3yr_1._large_df3yr_53 {\n    padding: var(--spacing-md) var(--spacing-md);\n    font-size: 14px;\n  }\n\n  ._chip_df3yr_1._large_df3yr_53 svg {\n      width: 14px;\n      height: 14px;\n    }\n\n  ._chip_df3yr_1._filled_df3yr_63 {\n    background-color: var(--chip-background);\n    border-color: var(--chip-background);\n    color: var(--chip-color);\n  }\n\n  ._chip_df3yr_1._filled_df3yr_63 svg {\n      fill: var(--chip-color);\n    }\n\n  ._chip_df3yr_1._filled_df3yr_63._primary_df3yr_72 {\n      background-color: var(--primary-background);\n      border-color: var(--primary-background);\n    }\n\n  ._chip_df3yr_1._filled_df3yr_63._secondary_df3yr_77 {\n      background-color: var(--secondary-background);\n      border-color: var(--secondary-background);\n    }\n\n  ._chip_df3yr_1._filled_df3yr_63._error_df3yr_82 {\n      background-color: var(--error-background);\n      border-color: var(--error-background);\n    }\n\n  ._chip_df3yr_1._filled_df3yr_63._success_df3yr_87 {\n      background-color: var(--success-background);\n      border-color: var(--success-background);\n    }\n\n  ._chip_df3yr_1._filled_df3yr_63._warning_df3yr_92 {\n      background-color: var(--warning-background);\n      border-color: var(--warning-background);\n    }\n\n  ._chip_df3yr_1._filled_df3yr_63._info_df3yr_97 {\n      background-color: var(--info-background);\n      border-color: var(--info-background);\n    }\n\n  ._chip_df3yr_1._outline_df3yr_103 {\n    background: transparent;\n    border-color: var(--chip-background);\n    color: var(--chip-color);\n  }\n\n  ._chip_df3yr_1._outline_df3yr_103 svg {\n      fill: var(--chip-color);\n    }\n\n  ._chip_df3yr_1._outline_df3yr_103._primary_df3yr_72 {\n      border-color: var(--primary-background);\n      color: var(--primary-color);\n    }\n\n  ._chip_df3yr_1._outline_df3yr_103._primary_df3yr_72 svg {\n        fill: var(--primary-color);\n      }\n\n  ._chip_df3yr_1._outline_df3yr_103._secondary_df3yr_77 {\n      border-color: var(--secondary-background);\n      color: var(--secondary-color);\n    }\n\n  ._chip_df3yr_1._outline_df3yr_103._secondary_df3yr_77 svg {\n        fill: var(--secondary-color);\n      }\n\n  ._chip_df3yr_1._outline_df3yr_103._error_df3yr_82 {\n      border-color: var(--error-background);\n      color: var(--error-color);\n    }\n\n  ._chip_df3yr_1._outline_df3yr_103._error_df3yr_82 svg {\n        fill: var(--error-color);\n      }\n\n  ._chip_df3yr_1._outline_df3yr_103._success_df3yr_87 {\n      border-color: var(--success-background);\n      color: var(--success-color);\n    }\n\n  ._chip_df3yr_1._outline_df3yr_103._success_df3yr_87 svg {\n        fill: var(--success-color);\n      }\n\n  ._chip_df3yr_1._outline_df3yr_103._warning_df3yr_92 {\n      border-color: var(--warning-background);\n      color: var(--warning-color);\n    }\n\n  ._chip_df3yr_1._outline_df3yr_103._warning_df3yr_92 svg {\n        fill: var(--warning-color);\n      }\n\n  ._chip_df3yr_1._outline_df3yr_103._info_df3yr_97 {\n      border-color: var(--info-background);\n      color: var(--info-color);\n    }\n\n  ._chip_df3yr_1._outline_df3yr_103._info_df3yr_97 svg {\n        fill: var(--info-color);\n      }\n\n  ._chip_df3yr_1._selectable_df3yr_167:hover {\n      cursor: pointer;\n    }\n\n  ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63,\n    ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover {\n      background-color: var(--chip-background-hover);\n      border-color: var(--chip-background-hover);\n    }\n\n  ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._primary_df3yr_72,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._primary_df3yr_72:hover,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._primary_df3yr_72,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._primary_df3yr_72:hover {\n        background-color: var(--primary-background-hover);\n        border-color: var(--primary-background-hover);\n      }\n\n  ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._secondary_df3yr_77,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._secondary_df3yr_77:hover,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._secondary_df3yr_77,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._secondary_df3yr_77:hover {\n        background-color: var(--secondary-background-hover);\n        border-color: var(--secondary-background-hover);\n      }\n\n  ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._error_df3yr_82,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._error_df3yr_82:hover,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._error_df3yr_82,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._error_df3yr_82:hover {\n        background-color: var(--error-background-hover);\n        border-color: var(--error-background-hover);\n      }\n\n  ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._success_df3yr_87,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._success_df3yr_87:hover,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._success_df3yr_87,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._success_df3yr_87:hover {\n        background-color: var(--success-background-hover);\n        border-color: var(--success-background-hover);\n      }\n\n  ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._warning_df3yr_92,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._warning_df3yr_92:hover,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._warning_df3yr_92,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._warning_df3yr_92:hover {\n        background-color: var(--warning-background-hover);\n        border-color: var(--warning-background-hover);\n      }\n\n  ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._info_df3yr_97,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63._info_df3yr_97:hover,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._info_df3yr_97,\n      ._chip_df3yr_1._selected_df3yr_173._filled_df3yr_63:hover._info_df3yr_97:hover {\n        background-color: var(--info-background-hover);\n        border-color: var(--info-background-hover);\n      }\n\n  ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103,\n    ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover {\n      border-color: var(--chip-background-hover);\n      color: var(--chip-color-hover);\n    }\n\n  ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._primary_df3yr_72,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._primary_df3yr_72:hover,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._primary_df3yr_72,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._primary_df3yr_72:hover {\n        border-color: var(--primary-background-hover);\n        color: var(--primary-color-hover);\n      }\n\n  ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._secondary_df3yr_77,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._secondary_df3yr_77:hover,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._secondary_df3yr_77,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._secondary_df3yr_77:hover {\n        border-color: var(--secondary-background-hover);\n        color: var(--secondary-color-hover);\n      }\n\n  ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._error_df3yr_82,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._error_df3yr_82:hover,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._error_df3yr_82,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._error_df3yr_82:hover {\n        border-color: var(--error-background-hover);\n        color: var(--error-color-hover);\n      }\n\n  ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._success_df3yr_87,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._success_df3yr_87:hover,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._success_df3yr_87,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._success_df3yr_87:hover {\n        border-color: var(--success-background-hover);\n        color: var(--success-color-hover);\n      }\n\n  ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._warning_df3yr_92,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._warning_df3yr_92:hover,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._warning_df3yr_92,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._warning_df3yr_92:hover {\n        border-color: var(--warning-background-hover);\n        color: var(--warning-color-hover);\n      }\n\n  ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._info_df3yr_97,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103._info_df3yr_97:hover,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._info_df3yr_97,\n      ._chip_df3yr_1._selected_df3yr_173._outline_df3yr_103:hover._info_df3yr_97:hover {\n        border-color: var(--info-background-hover);\n        color: var(--info-color-hover);\n      }\n\n  ._chip_df3yr_1._disableMargins_df3yr_259 {\n    margin: 0 !important;\n  }\n\n  ._chip_df3yr_1:focus-visible {\n    outline: 1px dashed var(--button-focus);\n    outline-offset: var(--button-focus-offset);\n  }\n._btn_1sw82_1 {\n  border: var(--button-border);\n  border-radius: var(--button-border-radius);\n  display: inline-flex;\n  font-family: var(--button-font-family);\n  font-weight: var(--button-font-weight);\n  white-space: nowrap;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  align-items: center;\n  justify-content: center;\n  will-change: scale, background-color, color, border-color;\n  transition:\n    background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;\n}\n\n  ._btn_1sw82_1._small_1sw82_17 {\n    font-size: var(--font-size-sm);\n    padding: var(--button-spacing-sm);\n  }\n\n  ._btn_1sw82_1._medium_1sw82_22 {\n    font-size: var(--font-size-md);\n    padding: var(--button-spacing-md);\n  }\n\n  ._btn_1sw82_1._large_1sw82_27 {\n    padding: var(--button-spacing-lg);\n    font-size: var(--font-size-lg);\n  }\n\n  ._btn_1sw82_1._filled_1sw82_32 {\n    color: var(--button-color-on-background);\n  }\n\n  ._btn_1sw82_1._filled_1sw82_32._default_1sw82_35 {\n      background: var(--button-background);\n      border-color: var(--button-background);\n    }\n\n  ._btn_1sw82_1._filled_1sw82_32._default_1sw82_35:hover {\n        background: var(--button-background-hover);\n        border-color: var(--button-background-hover);\n      }\n\n  ._btn_1sw82_1._filled_1sw82_32._primary_1sw82_45 {\n      background: var(--primary-background);\n      border-color: var(--primary-background);\n    }\n\n  ._btn_1sw82_1._filled_1sw82_32._primary_1sw82_45:hover {\n        background: var(--primary-background-hover);\n        border-color: var(--primary-background-hover);\n      }\n\n  ._btn_1sw82_1._filled_1sw82_32._secondary_1sw82_55 {\n      background: var(--secondary-background);\n      border-color: var(--secondary-background);\n    }\n\n  ._btn_1sw82_1._filled_1sw82_32._secondary_1sw82_55:hover {\n        background: var(--secondary-background-hover);\n        border-color: var(--secondary-background-hover);\n      }\n\n  ._btn_1sw82_1._filled_1sw82_32._error_1sw82_65 {\n      background: var(--error-background);\n      border-color: var(--error-background);\n    }\n\n  ._btn_1sw82_1._filled_1sw82_32._error_1sw82_65:hover {\n        background: var(--error-background-hover);\n        border-color: var(--error-background-hover);\n      }\n\n  ._btn_1sw82_1._filled_1sw82_32._success_1sw82_75 {\n      background: var(--success-background);\n      border-color: var(--success-background);\n    }\n\n  ._btn_1sw82_1._filled_1sw82_32._success_1sw82_75:hover {\n        background: var(--success-background-hover);\n        border-color: var(--success-background-hover);\n      }\n\n  ._btn_1sw82_1._filled_1sw82_32._warning_1sw82_85 {\n      background: var(--warning-background);\n      border-color: var(--warning-background);\n    }\n\n  ._btn_1sw82_1._filled_1sw82_32._warning_1sw82_85:hover {\n        background: var(--warning-background-hover);\n        border-color: var(--warning-background-hover);\n      }\n\n  ._btn_1sw82_1._outline_1sw82_96 {\n    background: transparent;\n  }\n\n  ._btn_1sw82_1._outline_1sw82_96._default_1sw82_35 {\n      border-color: var(--button-background);\n      color: var(--button-color);\n    }\n\n  ._btn_1sw82_1._outline_1sw82_96._default_1sw82_35:hover {\n        border-color: var(--button-background-hover);\n        color: var(--button-color-hover);\n      }\n\n  ._btn_1sw82_1._outline_1sw82_96._primary_1sw82_45 {\n      border-color: var(--primary-background);\n      color: var(--primary-color);\n    }\n\n  ._btn_1sw82_1._outline_1sw82_96._primary_1sw82_45:hover {\n        border-color: var(--primary-background-hover);\n        color: var(--primary-color-hover);\n      }\n\n  ._btn_1sw82_1._outline_1sw82_96._secondary_1sw82_55 {\n      border-color: var(--secondary-background);\n      color: var(--secondary-color);\n    }\n\n  ._btn_1sw82_1._outline_1sw82_96._secondary_1sw82_55:hover {\n        border-color: var(--secondary-background-hover);\n        color: var(--secondary-color-hover);\n      }\n\n  ._btn_1sw82_1._outline_1sw82_96._error_1sw82_65 {\n      border-color: var(--error-background);\n      color: var(--error-color);\n    }\n\n  ._btn_1sw82_1._outline_1sw82_96._error_1sw82_65:hover {\n        border-color: var(--error-background-hover);\n        color: var(--error-color-hover);\n      }\n\n  ._btn_1sw82_1._outline_1sw82_96._success_1sw82_75 {\n      border-color: var(--success-background);\n      color: var(--success-color);\n    }\n\n  ._btn_1sw82_1._outline_1sw82_96._success_1sw82_75:hover {\n        border-color: var(--success-background-hover);\n        color: var(--success-color-hover);\n      }\n\n  ._btn_1sw82_1._outline_1sw82_96._warning_1sw82_85 {\n      border-color: var(--warning-background);\n      color: var(--warning-color);\n    }\n\n  ._btn_1sw82_1._outline_1sw82_96._warning_1sw82_85:hover {\n        border-color: var(--warning-background-hover);\n        color: var(--warning-color-hover);\n      }\n\n  ._btn_1sw82_1._text_1sw82_160 {\n    background: transparent;\n    border: solid 1px transparent;\n  }\n\n  ._btn_1sw82_1._text_1sw82_160._default_1sw82_35 {\n      color: var(--button-color);\n    }\n\n  ._btn_1sw82_1._text_1sw82_160._default_1sw82_35:hover {\n        color: var(--button-color-hover);\n      }\n\n  ._btn_1sw82_1._text_1sw82_160._primary_1sw82_45 {\n      color: var(--primary-color);\n    }\n\n  ._btn_1sw82_1._text_1sw82_160._primary_1sw82_45:hover {\n        color: var(--primary-color-hover);\n      }\n\n  ._btn_1sw82_1._text_1sw82_160._secondary_1sw82_55 {\n      color: var(--secondary-color);\n    }\n\n  ._btn_1sw82_1._text_1sw82_160._secondary_1sw82_55:hover {\n        color: var(--secondary-color-hover);\n      }\n\n  ._btn_1sw82_1._text_1sw82_160._error_1sw82_65 {\n      color: var(--error-color);\n    }\n\n  ._btn_1sw82_1._text_1sw82_160._error_1sw82_65:hover {\n        color: var(--error-color-hover);\n      }\n\n  ._btn_1sw82_1._text_1sw82_160._success_1sw82_75 {\n      color: var(--success-color);\n    }\n\n  ._btn_1sw82_1._text_1sw82_160._success_1sw82_75:hover {\n        color: var(--success-color-hover);\n      }\n\n  ._btn_1sw82_1._text_1sw82_160._warning_1sw82_85 {\n      color: var(--warning-color);\n    }\n\n  ._btn_1sw82_1._text_1sw82_160._warning_1sw82_85:hover {\n        color: var(--warning-color-hover);\n      }\n\n  ._btn_1sw82_1._fullWidth_1sw82_213 {\n    display: block;\n    width: 100%;\n  }\n\n  ._btn_1sw82_1._disableMargins_1sw82_218 {\n    margin: 0;\n  }\n\n  ._btn_1sw82_1._disablePadding_1sw82_222 {\n    padding: 0;\n  }\n\n  ._btn_1sw82_1:not([disabled]) {\n    cursor: pointer;\n  }\n\n  ._btn_1sw82_1[disabled] {\n    cursor: not-allowed;\n  }\n\n  ._btn_1sw82_1[disabled]._filled_1sw82_32,\n    ._btn_1sw82_1[disabled]._filled_1sw82_32:hover {\n      background-color: var(--disabled-background);\n      border-color: var(--disabled-background);\n      color: var(--button-disabled-color-on-background);\n    }\n\n  ._btn_1sw82_1[disabled]._outline_1sw82_96,\n    ._btn_1sw82_1[disabled]._outline_1sw82_96:hover {\n      border-color: var(--disabled-background);\n      color: var(--disabled-color);\n    }\n\n  ._btn_1sw82_1[disabled]._text_1sw82_160,\n    ._btn_1sw82_1[disabled]._text_1sw82_160:hover {\n      color: var(--disabled-color);\n    }\n\n  ._btn_1sw82_1:focus-visible {\n    outline: 1px dashed var(--button-focus);\n    outline-offset: var(--button-focus-offset);\n  }\n\n  ._btn_1sw82_1 ._startAdornment_1sw82_257,\n  ._btn_1sw82_1 ._endAdornment_1sw82_258 {\n    display: flex;\n  }\n\n  ._btn_1sw82_1 ._startAdornment_1sw82_257._small_1sw82_17 svg, ._btn_1sw82_1 ._endAdornment_1sw82_258._small_1sw82_17 svg {\n        width: var(--button-adornment-size-sm);\n        height: var(--button-adornment-size-sm);\n      }\n\n  ._btn_1sw82_1 ._startAdornment_1sw82_257._medium_1sw82_22 svg, ._btn_1sw82_1 ._endAdornment_1sw82_258._medium_1sw82_22 svg {\n        width: var(--button-adornment-size-md);\n        height: var(--button-adornment-size-md);\n      }\n\n  ._btn_1sw82_1 ._startAdornment_1sw82_257._large_1sw82_27 svg, ._btn_1sw82_1 ._endAdornment_1sw82_258._large_1sw82_27 svg {\n        width: var(--button-adornment-size-lg);\n        height: var(--button-adornment-size-lg);\n      }\n\n  ._btn_1sw82_1 ._startAdornment_1sw82_257 {\n    padding-right: calc(var(--list-item-spacing) / 2);\n  }\n\n  ._btn_1sw82_1 ._endAdornment_1sw82_258 {\n    padding-left: calc(var(--list-item-spacing) / 2);\n  }\n\n  ._btn_1sw82_1._group_1sw82_291:not(:first-child):not(:last-child) {\n      border-radius: 0;\n      border-right: 0;\n    }\n\n  ._btn_1sw82_1._group_1sw82_291:not(:first-child):not(:last-child)._outline_1sw82_96 {\n        border-left: var(--button-border);\n      }\n\n  ._btn_1sw82_1._group_1sw82_291:not(:first-child):not(:last-child)._text_1sw82_160 {\n        border-right: var(--button-border);\n        border-left-color: transparent;\n      }\n\n  ._btn_1sw82_1._group_1sw82_291:first-child:not(:only-child) {\n      border-radius: var(--button-border-radius) 0 0 var(--button-border-radius);\n      border-right: 0;\n    }\n\n  ._btn_1sw82_1._group_1sw82_291:first-child:not(:only-child)._text_1sw82_160 {\n        border-right: var(--button-border);\n      }\n\n  ._btn_1sw82_1._group_1sw82_291:last-child:not(:only-child) {\n      border-radius: 0 var(--button-border-radius) var(--button-border-radius) 0;\n    }\n._deleteButton_101ah_1._small_101ah_2 {\n    line-height: 10px;\n    max-height: 10px;\n  }\n  ._deleteButton_101ah_1._medium_101ah_7 {\n    line-height: 12px;\n    max-height: 12px;\n  }\n  ._deleteButton_101ah_1._large_101ah_12 {\n    line-height: 14px;\n    max-height: 14px;\n  }\n._chip_a0oed_1 {\n  white-space: nowrap;\n  border-radius: var(--border-radius-sm);\n}\n\n  ._chip_a0oed_1 kbd {\n    font-family: var(--mono-font-family);\n  }\n\n._container_a0oed_10 {\n  display: inline-flex;\n  gap: var(--spacing-sm);\n  align-items: center;\n}\n._item_1a75l_1 {\n  transition:\n    color 0.2s ease-in-out, background 0.2s ease-in-out;\n}\n  ._item_1a75l_1._clickable_1a75l_5 {\n    cursor: pointer;\n  }\n  ._item_1a75l_1._clickable_1a75l_5:hover,\n  ._item_1a75l_1._active_1a75l_10 {\n    background: var(--primary-background);\n    color: var(--primary-color-hover);\n  }\n._section_1bd8v_1._first_1bd8v_2 {\n    padding-top: var(--spacing-md);\n  }\n._container_tbkyo_1 {\n  will-change: height, opacity;\n  overflow: hidden;\n}\n._divider_6jom2_1 {\n  background: var(--divider-background);\n  border: none;\n}\n\n  ._divider_6jom2_1._horizontal_6jom2_5 {\n    height: 1px;\n    width: 100%;\n    margin: var(--divider-spacing) 0;\n  }\n\n  ._divider_6jom2_1._vertical_6jom2_11 {\n    width: 1px;\n    height: 100%;\n    margin: 0 var(--divider-spacing);\n  }\n\n  ._divider_6jom2_1._horizontal_6jom2_5._disableMargins_6jom2_19, ._divider_6jom2_1._vertical_6jom2_11._disableMargins_6jom2_19 {\n      margin: 0;\n    }\n._container_1j3il_1 {\n  margin-bottom: var(--block-spacing);\n}\n\n  ._container_1j3il_1._disableMargin_1j3il_4 {\n    margin-bottom: 0;\n  }\n\n  ._container_1j3il_1 ._label_1j3il_8 {\n    font-size: var(--block-label-size);\n    font-size: var(--block-label-weight);\n    display: block;\n  }\n\n  ._container_1j3il_1 ._content_1j3il_14 {\n    word-break: break-all;\n  }\n\n  ._container_1j3il_1._horizontal_1j3il_18 {\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n  }\n\n  ._container_1j3il_1._horizontal_1j3il_18 ._label_1j3il_8 {\n      margin-right: var(--block-label-spacing);\n      white-space: nowrap;\n    }\n\n  ._container_1j3il_1._horizontal_1j3il_18._centerAlign_1j3il_28 {\n      align-items: center;\n    }\n\n  ._container_1j3il_1._horizontal_1j3il_18._endAlign_1j3il_32 {\n      align-items: flex-end;\n    }\n\n  ._container_1j3il_1._horizontal_1j3il_18._centerAlign_1j3il_28 ._content_1j3il_14, ._container_1j3il_1._horizontal_1j3il_18._startAlign_1j3il_37 ._content_1j3il_14 {\n        flex: 1;\n        justify-content: flex-start;\n        display: flex;\n      }\n\n  ._container_1j3il_1._vertical_1j3il_46 ._label_1j3il_8 {\n      margin-bottom: var(--block-label-spacing);\n    }\n\n  ._container_1j3il_1._vertical_1j3il_46 ._label_1j3il_8._disablePadding_1j3il_50 {\n        padding: 0;\n      }\n._container_14mbr_1 {\n  display: flex;\n  align-items: center;\n  gap: var(--stack-gap);\n}\n\n  ._container_14mbr_1._inline_14mbr_6 {\n    display: inline-flex;\n  }\n\n  ._container_14mbr_1._dense_14mbr_10 {\n    gap: var(--stack-dense-gap);\n  }\n\n  ._container_14mbr_1._column_14mbr_14 {\n    flex-direction: column;\n  }\n\n  ._container_14mbr_1._row_14mbr_18 {\n    flex-direction: row;\n  }\n\n  ._container_14mbr_1._columnReverse_14mbr_22 {\n    flex-direction: column-reverse;\n  }\n\n  ._container_14mbr_1._rowReverse_14mbr_26 {\n    flex-direction: row-reverse;\n  }\n\n  ._container_14mbr_1._startAlign_14mbr_30 {\n    align-items: flex-start;\n  }\n\n  ._container_14mbr_1._endAlign_14mbr_34 {\n    align-items: flex-end;\n  }\n\n  ._container_14mbr_1._stretchAlign_14mbr_38 {\n    align-items: stretch;\n  }\n\n  ._container_14mbr_1._endJustify_14mbr_42 {\n    justify-content: flex-end;\n  }\n\n  ._container_14mbr_1._centerJustify_14mbr_46 {\n    justify-content: center;\n  }\n\n  ._container_14mbr_1._spaceBetweenJustify_14mbr_50 {\n    justify-content: space-between;\n  }\n._up_17n5q_1 {\n  transform: rotate(180deg);\n}\n\n._left_17n5q_5 {\n  transform: rotate(90deg);\n}\n\n._right_17n5q_9 {\n  transform: rotate(-90deg);\n}\n._container_1masa_1 {\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  position: relative;\n}\n\n._tree_1masa_8 {\n  border: 1px solid transparent;\n  padding: 3px 12px 4px;\n}\n\n._arrow_1masa_13 {\n  width: 12px;\n  height: 12px;\n  fill: var(--white);\n}\n._node_1solv_1 {\n  padding-top: var(--spacing-xs);\n  margin: 0;\n  list-style: none;\n}\n\n  ._node_1solv_1 ._collapsed_1solv_6 {\n    transform: rotate(-90deg);\n  }\n\n  ._node_1solv_1._leaf_1solv_10 ._label_1solv_11 {\n      padding-left: 17px;\n    }\n\n  ._node_1solv_1._disabled_1solv_16 > ._label_1solv_11,\n    ._node_1solv_1._disabled_1solv_16 > ._button_1solv_18 {\n      opacity: 0.6;\n    }\n\n  ._node_1solv_1 ._button_1solv_18 {\n    padding: 0;\n    margin: 0 3px 0 0;\n    min-width: auto;\n    min-height: auto;\n    width: auto;\n    height: auto;\n    transition: transform 100ms ease-in-out;\n  }\n\n  ._node_1solv_1 ._button_1solv_18 ._icon_1solv_32 {\n      vertical-align: middle;\n      display: block;\n      height: 8px;\n      width: 8px;\n      margin: var(--spacing-xs);\n      fill: #fff;\n    }\n\n._subtree_1solv_43 {\n  list-style: none;\n  position: relative;\n  padding: 0;\n  margin: 5px 0 0 20px;\n}\n\n._subtree_1solv_43 ._node_1solv_1:first-child {\n      padding-top: 0;\n    }\n\n._subtree_1solv_43 ._node_1solv_1:last-child {\n      padding-bottom: 0;\n    }\n\n._nodeBlock_1solv_60 {\n  display: flex;\n  align-items: center;\n}\n._xs_1vu5j_1 {\n  height: var(--spacing-xs);\n}\n\n._sm_1vu5j_5 {\n  height: var(--spacing-sm);\n}\n\n._md_1vu5j_9 {\n  height: var(--spacing-md);\n}\n\n._lg_1vu5j_13 {\n  height: var(--spacing-lg);\n}\n\n._xl_1vu5j_17 {\n  height: var(--spacing-xl);\n}\n\n._xxl_1vu5j_21 {\n  height: var(--spacing-xxl);\n}\n._pager_bw1ct_1 {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n  ._pager_bw1ct_1 svg {\n    height: 20px;\n    width: 20px;\n  }\n\n  ._pager_bw1ct_1 ._page_bw1ct_1 {\n    padding: 0 var(--spacing-sm);\n  }\n\n  ._pager_bw1ct_1 ._page_bw1ct_1._active_bw1ct_14 {\n      color: var(--input-color);\n    }\n\n._pagesContainer_bw1ct_20 {\n  display: flex;\n  align-items: center;\n}\n\n._pagerDisplayItems_bw1ct_25 {\n  color: var(--gray-100);\n  margin-right: var(--spacing-sm);\n}\n._week_1owo4_1 {\n  --button-border-radius: var(--calendar-day-radius);\n  --button-color: var(--calendar-day-color);\n\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-gap: var(--calendar-gap);\n  gap: var(--calendar-gap);\n  margin-bottom: var(--calendar-gap);\n}\n\n  ._week_1owo4_1 ._day_1owo4_10 {\n    flex: 1;\n    transition: border 100ms ease-in-out;\n    padding: var(--calendar-spacing);\n    text-align: center;\n  }\n\n  ._week_1owo4_1 ._day_1owo4_10:hover:not(:disabled) {\n      border-color: var(--calendar-day-border-hover);\n    }\n\n  ._week_1owo4_1 ._day_1owo4_10:not(._range_1owo4_20)._outside_1owo4_20 {\n      color: color-mix(in srgb, var(--button-color) 60%, transparent);\n    }\n\n  ._week_1owo4_1 ._day_1owo4_10._selectedDay_1owo4_24 {\n      background: var(--calendar-day-background-selected) !important;\n      border-color: var(--calendar-day-border-selected) !important;\n    }\n\n  ._week_1owo4_1 ._day_1owo4_10._selectedDay_1owo4_24 {\n      /* !important to override default button styling */\n    }\n\n  ._week_1owo4_1 ._day_1owo4_10._selectedDay_1owo4_24:hover {\n        border-color: var(--calendar-day-border-hover) !important;\n      }\n\n  ._week_1owo4_1 ._day_1owo4_10._range_1owo4_20 {\n      background: var(--calendar-day-background-selected) !important;\n      border-color: var(--calendar-day-border-selected) !important;\n    }\n\n  ._week_1owo4_1 ._day_1owo4_10._range_1owo4_20 {\n      border-radius: 0;\n      /* !important to override default button styling */\n    }\n\n  ._week_1owo4_1 ._day_1owo4_10._range_1owo4_20:hover {\n        border-color: var(--calendar-day-border-hover) !important;\n      }\n\n  ._week_1owo4_1 ._day_1owo4_10._startRangeDate_1owo4_45 {\n      border-top-left-radius: var(--calendar-day-radius);\n    }\n\n  ._week_1owo4_1 ._day_1owo4_10._roundStartDateBottom_1owo4_49 {\n      border-bottom-left-radius: var(--calendar-day-radius);\n    }\n\n  ._week_1owo4_1 ._day_1owo4_10._endRangeDate_1owo4_53 {\n      border-bottom-right-radius: var(--calendar-day-radius);\n    }\n\n  ._week_1owo4_1 ._day_1owo4_10._roundEndDateTop_1owo4_57 {\n      border-top-right-radius: var(--calendar-day-radius);\n    }\n\n._weekLabels_1owo4_63 {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-gap: var(--spacing-sm);\n  gap: var(--spacing-sm);\n  width: 100%;\n  padding: var(--spacing-md) 0;\n  border-top: 1px solid var(--calendar-divider);\n}\n\n._weekLabels_1owo4_63 ._dayOfWeek_1owo4_71 {\n    text-align: center;\n    font-weight: var(--font-weight-bold);\n  }\n._months_quk7b_1 {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-column-gap: var(--spacing-md);\n  -moz-column-gap: var(--spacing-md);\n       column-gap: var(--spacing-md);\n}\n\n  ._months_quk7b_1 ._month_quk7b_1 {\n    padding: 6px;\n  }\n._years_188b7_1 {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-column-gap: var(--spacing-md);\n  -moz-column-gap: var(--spacing-md);\n       column-gap: var(--spacing-md);\n}\n\n  ._years_188b7_1 ._year_188b7_1 {\n    padding: 6px;\n  }\n._container_1bnlb_1 {\n  overflow: hidden;\n}\n\n  ._container_1bnlb_1 ._header_1bnlb_4 {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: var(--spacing-sm);\n  }\n._container_3rvg5_1 {\n  overflow: hidden;\n}\n\n  ._container_3rvg5_1 ._header_3rvg5_4 {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: var(--spacing-sm);\n  }\n\n  ._container_3rvg5_1 ._monthLabel_3rvg5_11 {\n    display: flex;\n    flex-grow: 1;\n    justify-content: space-around;\n    gap: var(--spacing-lg);\n  }\n\n  ._container_3rvg5_1 ._calendars_3rvg5_18 {\n    display: flex;\n    gap: var(--spacing-lg);\n  }\n._container_1m42y_1 {\n  display: inline-flex;\n  align-items: center;\n  width: 100%;\n}\n\n  ._container_1m42y_1 ._label_1m42y_6 {\n    color: var(--checkbox-label-color);\n    margin-left: var(--spacing-md);\n    width: 100%;\n  }\n\n  ._container_1m42y_1 ._label_1m42y_6._clickable_1m42y_11 {\n      cursor: pointer;\n    }\n\n._check_1m42y_17 {\n  stroke: var(--checkbox-check-stroke);\n}\n\n._checkbox_1m42y_21 {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n._checkbox_1m42y_21._small_1m42y_27 {\n    min-width: 14px;\n    min-height: 14px;\n  }\n\n._checkbox_1m42y_21._medium_1m42y_32 {\n    min-width: 16px;\n    min-height: 16px;\n  }\n\n._checkbox_1m42y_21._large_1m42y_37 {\n    min-width: 20px;\n    min-height: 20px;\n  }\n\n._checkbox_1m42y_21:focus-visible {\n    outline: none;\n  }\n\n._checkbox_1m42y_21._disabled_1m42y_46 {\n    cursor: not-allowed;\n    opacity: 0.75;\n  }\n._container_1o1oi_1 {\n  background: var(--input-background);\n  border-radius: var(--input-border-radius);\n  border: var(--input-border);\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: nowrap;\n  transition:\n    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  box-sizing: border-box;\n}\n\n  ._container_1o1oi_1._small_1o1oi_14 {\n    padding: var(--input-spacing-sm);\n  }\n\n  ._container_1o1oi_1._medium_1o1oi_18 {\n    padding: var(--input-spacing-md);\n  }\n\n  ._container_1o1oi_1._large_1o1oi_22 {\n    padding: var(--input-spacing-lg);\n  }\n\n  ._container_1o1oi_1:focus-within,\n  ._container_1o1oi_1:focus-visible {\n    border-color: var(--input-border-focus);\n    outline: none;\n  }\n\n  ._container_1o1oi_1._error_1o1oi_32 {\n    border-color: var(--error-background);\n  }\n\n  ._container_1o1oi_1._fullWidth_1o1oi_36 {\n    width: 100%;\n  }\n\n  ._container_1o1oi_1._fullWidth_1o1oi_36 ._input_1o1oi_39 {\n      width: 100%;\n    }\n\n  ._container_1o1oi_1 ._startAdornment_1o1oi_44,\n  ._container_1o1oi_1 ._endAdornment_1o1oi_45 {\n    display: flex;\n  }\n\n  ._container_1o1oi_1 ._startAdornment_1o1oi_44 svg, ._container_1o1oi_1 ._endAdornment_1o1oi_45 svg {\n      width: var(--input-adornment-size);\n      height: var(--input-adornment-size);\n      fill: var(--input-adornment-fill);\n    }\n\n  ._container_1o1oi_1 ._startAdornment_1o1oi_44 {\n    padding-right: calc(var(--list-item-spacing) / 2);\n  }\n\n  ._container_1o1oi_1 ._endAdornment_1o1oi_45 {\n    padding-left: calc(var(--list-item-spacing) / 2);\n  }\n\n  ._container_1o1oi_1 ._input_1o1oi_39 {\n    flex: 1;\n    font-weight: normal;\n    background: none;\n    font-family: var(--font-family);\n    border: none;\n    color: var(--input-color);\n    padding: 0;\n    margin: 0;\n  }\n\n  ._container_1o1oi_1 ._input_1o1oi_39::-moz-placeholder {\n      color: var(--input-color-placeholder);\n      font-style: var(--input-placeholder-style);\n    }\n\n  ._container_1o1oi_1 ._input_1o1oi_39::placeholder {\n      color: var(--input-color-placeholder);\n      font-style: var(--input-placeholder-style);\n    }\n\n  ._container_1o1oi_1 ._input_1o1oi_39:focus {\n      outline: none;\n    }\n\n  ._container_1o1oi_1 ._input_1o1oi_39:-moz-read-only {\n      cursor: not-allowed;\n      color: var(--disabled-color);\n    }\n\n  ._container_1o1oi_1 ._input_1o1oi_39[disabled],\n    ._container_1o1oi_1 ._input_1o1oi_39:read-only {\n      cursor: not-allowed;\n      color: var(--disabled-color);\n    }\n._input_el63h_1 {\n  background: none;\n  border: 0;\n  outline: none;\n  color: var(--input-color);\n}\n._container_1v4a3_1 {\n  width: 100%;\n  box-sizing: border-box;\n  line-height: 1;\n}\n\n  ._container_1v4a3_1 ._label_1v4a3_6 {\n    color: var(--radio-label-color);\n    margin-left: var(--spacing-md);\n    width: 100%;\n    vertical-align: middle;\n  }\n\n  ._container_1v4a3_1 ._label_1v4a3_6._clickable_1v4a3_12 {\n      cursor: pointer;\n    }\n\n._radio_1v4a3_18 {\n  border: var(--radio-stroke-size) solid var(--radio-stroke);\n  background-color: var(--radio-background);\n  border-radius: 100%;\n  will-change: border-color;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  box-sizing: border-box;\n  vertical-align: middle;\n}\n\n._radio_1v4a3_18:hover {\n    cursor: pointer;\n  }\n\n._radio_1v4a3_18 ._indicator_1v4a3_33 {\n    border-radius: 100%;\n    background-color: var(--radio-indicator-active);\n  }\n\n._radio_1v4a3_18._checked_1v4a3_38 {\n    border-color: var(--radio-stroke-active);\n  }\n\n._radio_1v4a3_18._small_1v4a3_42 {\n    width: 14px;\n    height: 14px;\n  }\n\n._radio_1v4a3_18._small_1v4a3_42 ._indicator_1v4a3_33 {\n      width: 6px;\n      width: var(--radio-indicator-size, 6px);\n      height: 6px;\n      height: var(--radio-indicator-size, 6px);\n    }\n\n._radio_1v4a3_18._medium_1v4a3_52 {\n    width: 16px;\n    height: 16px;\n  }\n\n._radio_1v4a3_18._medium_1v4a3_52 ._indicator_1v4a3_33 {\n      width: 8px;\n      width: var(--radio-indicator-size, 8px);\n      height: 8px;\n      height: var(--radio-indicator-size, 8px);\n    }\n\n._radio_1v4a3_18._large_1v4a3_62 {\n    width: 20px;\n    height: 20px;\n  }\n\n._radio_1v4a3_18._large_1v4a3_62 ._indicator_1v4a3_33 {\n      width: 10px;\n      width: var(--radio-indicator-size, 10px);\n      height: 10px;\n      height: var(--radio-indicator-size, 10px);\n    }\n\n._radio_1v4a3_18._disabled_1v4a3_72 {\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n._range_16tdb_1 {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  height: var(--range-track-size);\n  background: var(--range-track-background);\n  border-radius: var(--range-track-border-radius);\n}\n\n._handleDrag_16tdb_10 {\n  position: absolute;\n  top: calc(-1 * (var(--range-handle-size) - var(--range-track-size)) / 2);\n  left: calc(-1 * var(--range-handle-size) / 2);\n  width: var(--range-handle-size);\n  height: var(--range-handle-size);\n  background: var(--range-handle-background);\n  border-radius: var(--range-handle-border-radius);\n}\n\n/* The hidden input used for keyboard controls */\n\n._handleDrag_16tdb_10 input {\n    position: absolute;\n    left: -9999px;\n  }\n\n._handle_16tdb_10 {\n  cursor: pointer;\n  display: inline-block;\n  position: relative;\n  height: 100%;\n  width: 100%;\n}\n\n._tooltip_16tdb_34 {\n  position: absolute;\n  top: -45px;\n  left: 50%;\n  transform: translateX(-50%);\n  border-radius: var(--border-radius-md);\n  padding: var(--spacing-md);\n  white-space: nowrap;\n  text-align: center;\n  background: var(--tooltip-background);\n  color: var(--tooltip-color);\n}\n\n._rangeHighlight_16tdb_47 {\n  pointer-events: none;\n  height: var(--range-track-size);\n  background: var(--range-track-active-background);\n}\n\n._rangeDisabled_16tdb_53 {\n  opacity: 0.7;\n}\n\n._rangeDisabled_16tdb_53 ._handle_16tdb_10 {\n    cursor: not-allowed;\n  }\n._container_1o7j1_1 {\n  display: flex;\n}\n\n  ._container_1o7j1_1 div {\n    border-radius: 50%;\n    background: var(--loader-background);\n  }\n\n  ._container_1o7j1_1._small_1o7j1_9 div {\n    margin-left: var(--spacing-sm);\n    height: 3px;\n    width: 3px;\n  }\n\n  ._container_1o7j1_1._medium_1o7j1_15 div {\n    margin-left: var(--spacing-md);\n    height: 5px;\n    width: 5px;\n  }\n\n  ._container_1o7j1_1._large_1o7j1_21 div {\n    margin-left: var(--spacing-lg);\n    height: 7px;\n    width: 7px;\n  }\n._tag_sipe1_1 {\n  margin-top: 1px;\n  margin-bottom: 1px;\n  border: solid 1px transparent;\n  cursor: pointer;\n  background: var(--select-chip-background);\n  border: var(--select-chip-border);\n  color: var(--select-chip-color);\n  display: flex;\n  padding: 3px 4px;\n  margin-right: 4px;\n  font-size: 12px;\n  border-radius: var(--select-chip-border-radius);\n  line-height: 1;\n  box-sizing: border-box;\n}\n\n  ._tag_sipe1_1._disabled_sipe1_17 {\n    cursor: not-allowed;\n  }\n\n  ._tag_sipe1_1:focus {\n    border: solid 1px transparent;\n  }\n\n  ._tag_sipe1_1 button {\n    cursor: pointer;\n    background: none;\n    border: none;\n    line-height: 0;\n    padding: 0;\n    margin-left: 4px;\n  }\n\n  ._tag_sipe1_1:focus {\n    outline: none;\n  }\n\n  ._tag_sipe1_1 svg {\n    height: 12px;\n    width: 12px;\n    vertical-align: baseline;\n    pointer-events: none;\n    fill: var(--select-chip-icon-color);\n  }\n._container_umshi_1 {\n  display: flex;\n  flex-wrap: nowrap;\n  background: var(--select-input-background);\n  border-radius: var(--select-input-border-radius);\n  border: var(--select-input-border);\n  align-items: center;\n  padding: var(--select-input-spacing);\n  min-height: 34px;\n  box-sizing: border-box;\n}\n\n  ._container_umshi_1._open_umshi_12 {\n    border-radius: var(--select-input-border-radius)\n      var(--select-input-border-radius) 0 0;\n  }\n\n  ._container_umshi_1:not(._disabled_umshi_17) {\n    cursor: text;\n  }\n\n  ._container_umshi_1._disabled_umshi_17 ._expand_umshi_22,\n    ._container_umshi_1._disabled_umshi_17 ._input_umshi_23 {\n      cursor: not-allowed;\n    }\n\n  ._container_umshi_1._unfilterable_umshi_28 ._input_umshi_23 {\n      caret-color: transparent;\n    }\n\n  ._container_umshi_1._error_umshi_34 {\n    border: 1px solid var(--select-input-error);\n  }\n\n  ._container_umshi_1 ._inputContainer_umshi_38 {\n    display: flex;\n    flex: 1;\n    align-items: center;\n    overflow: hidden;\n  }\n\n  ._container_umshi_1 ._input_umshi_23 {\n    padding: 0;\n    background: transparent;\n    border: none;\n    font-size: 13px;\n    color: var(--select-input-color);\n    font-family: inherit;\n    vertical-align: middle;\n  }\n\n  ._container_umshi_1 ._input_umshi_23[disabled] {\n      color: var(--select-input-disabled-color);\n    }\n\n  ._container_umshi_1 ._input_umshi_23::-moz-placeholder {\n      color: var(--select-input-placeholder-color);\n    }\n\n  ._container_umshi_1 ._input_umshi_23::placeholder {\n      color: var(--select-input-placeholder-color);\n    }\n\n  ._container_umshi_1 ._input_umshi_23:focus {\n      outline: none;\n    }\n\n  ._container_umshi_1 ._input_umshi_23:-moz-read-only {\n      cursor: not-allowed;\n    }\n\n  ._container_umshi_1 ._input_umshi_23:read-only {\n      cursor: not-allowed;\n    }\n\n  ._container_umshi_1._single_umshi_71 ._prefix_umshi_72 {\n      padding: 5px 0;\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      max-width: 100%;\n    }\n\n  ._container_umshi_1._single_umshi_71 ._inputContainer_umshi_38 {\n      flex-wrap: nowrap;\n    }\n\n  ._container_umshi_1._single_umshi_71 ._inputContainer_umshi_38 > div,\n      ._container_umshi_1._single_umshi_71 ._inputContainer_umshi_38 ._input_umshi_23 {\n        max-width: 100%;\n      }\n\n  ._container_umshi_1._single_umshi_71 ._input_umshi_23 {\n      width: 100%;\n      text-overflow: ellipsis;\n    }\n\n  ._container_umshi_1._multiple_umshi_95 ._prefix_umshi_72 {\n      display: contents;\n    }\n\n  ._container_umshi_1._multiple_umshi_95 ._inputContainer_umshi_38 {\n      flex-wrap: wrap;\n    }\n\n  ._container_umshi_1 ._prefix_umshi_72 {\n    align-items: center;\n  }\n\n  ._container_umshi_1 ._suffix_umshi_109 {\n    display: flex;\n    margin-left: auto;\n  }\n\n  ._container_umshi_1 ._suffix_umshi_109 svg {\n      height: 20px;\n      width: 20px;\n      vertical-align: middle;\n    }\n\n  ._container_umshi_1 ._suffix_umshi_109 ._loader_umshi_119 {\n      margin-right: 10px;\n      display: flex;\n      align-items: center;\n    }\n\n  ._container_umshi_1 ._suffix_umshi_109 ._btn_umshi_125 {\n      padding: 0;\n      border: none;\n      background: none;\n    }\n\n  ._container_umshi_1 ._suffix_umshi_109 ._btn_umshi_125:focus-visible {\n        outline: 1px dashed var(--button-focus);\n        outline-offset: var(--button-focus-offset);\n      }\n\n  ._container_umshi_1 ._suffix_umshi_109 ._btn_umshi_125:not([disabled]) {\n        cursor: pointer;\n      }\n\n  ._container_umshi_1 ._suffix_umshi_109 ._btn_umshi_125 svg {\n        vertical-align: middle;\n        fill: var(--select-input-icon-color);\n      }\n\n  ._container_umshi_1 ._suffix_umshi_109 ._btn_umshi_125._expand_umshi_22 svg {\n          height: 18px;\n          width: 18px;\n        }\n\n  ._container_umshi_1 ._suffix_umshi_109 ._btn_umshi_125._refresh_umshi_151,\n      ._container_umshi_1 ._suffix_umshi_109 ._btn_umshi_125._close_umshi_152 {\n        margin-right: 5px;\n      }\n\n  ._container_umshi_1 ._suffix_umshi_109 ._btn_umshi_125._refresh_umshi_151 svg, ._container_umshi_1 ._suffix_umshi_109 ._btn_umshi_125._close_umshi_152 svg {\n          height: 16px;\n          width: 16px;\n        }\n._menu_2ruru_1 {\n  background: var(--select-menu-background);\n  text-align: center;\n  will-change: transform, opacity;\n  border-radius: var(--select-menu-border-radius);\n  min-width: 112px;\n  max-height: 300px;\n  overflow-y: auto;\n  text-align: left;\n  border: var(--select-menu-border);\n  box-sizing: border-box;\n}\n\n  ._menu_2ruru_1 ._groupItem_2ruru_13 {\n    border: none;\n    padding: 0;\n  }\n\n  ._menu_2ruru_1 ._groupItem_2ruru_13 h3 {\n      font-size: 12px;\n      margin: 0;\n      font-weight: bold;\n      text-transform: uppercase;\n      padding: var(--spacing-md) 0 var(--spacing-xs) var(--spacing-sm);\n      color: var(--select-menu-group-color);\n    }\n\n  ._menu_2ruru_1 ._option_2ruru_27 {\n    color: var(--select-menu-item-color);\n    padding: var(--select-menu-item-spacing);\n  }\n\n  ._menu_2ruru_1 ._option_2ruru_27:hover,\n    ._menu_2ruru_1 ._option_2ruru_27._active_2ruru_32 {\n      color: var(--select-menu-item-active-color);\n      background: var(--select-menu-item-active-background);\n    }\n\n  ._menu_2ruru_1 ._option_2ruru_27._selected_2ruru_37 {\n      color: var(--select-menu-item-selected-color);\n      background: var(--select-menu-item-selected-background);\n    }\n._root_1nf4s_1 {\n  background: var(--textarea-background);\n  border-radius: var(--textarea-border-radius);\n  border: var(--textarea-border);\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: nowrap;\n  transition:\n    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  box-sizing: border-box;\n}\n\n  ._root_1nf4s_1:focus,\n  ._root_1nf4s_1:focus-within,\n  ._root_1nf4s_1:focus-visible {\n    border-color: var(--textarea-border-focus);\n    outline: none;\n  }\n\n._input_1nf4s_22 {\n  height: 100%;\n  resize: none;\n  font-weight: normal;\n  background: none;\n  font-family: var(--font-family);\n  border: none;\n  color: var(--textarea-color);\n  padding: 0;\n  margin: 0;\n}\n\n._input_1nf4s_22:focus {\n    outline: none;\n  }\n\n._input_1nf4s_22::-moz-placeholder {\n    color: var(--textarea-color-placeholder);\n    font-style: var(--textarea-placeholder-style);\n  }\n\n._input_1nf4s_22::placeholder {\n    color: var(--textarea-color-placeholder);\n    font-style: var(--textarea-placeholder-style);\n  }\n\n._input_1nf4s_22:-moz-read-only {\n    cursor: not-allowed;\n    color: var(--disabled-color);\n  }\n\n._input_1nf4s_22[disabled],\n  ._input_1nf4s_22:read-only {\n    cursor: not-allowed;\n    color: var(--disabled-color);\n  }\n\n._error_1nf4s_49 {\n  border-color: var(--error-background);\n}\n\n._fullWidth_1nf4s_53 {\n  width: 100%;\n}\n\n._fullWidth_1nf4s_53 ._input_1nf4s_22 {\n    width: 100%;\n  }\n\n._small_1nf4s_61 {\n  padding: var(--textarea-spacing-sm);\n}\n\n._medium_1nf4s_65 {\n  padding: var(--textarea-spacing-md);\n}\n\n._large_1nf4s_69 {\n  padding: var(--textarea-spacing-lg);\n}\n._switch_1jog0_1 {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  border: var(--toggle-border);\n  border-radius: var(--toggle-border-radius);\n  cursor: pointer;\n  background-color: var(--toggle-background);\n  box-sizing: border-box;\n}\n\n  ._switch_1jog0_1._disabled_1jog0_11 {\n    cursor: not-allowed;\n    opacity: 0.8;\n    opacity: var(--toggle-disabled-opacity, 0.8);\n    background-color: var(--toggle-disabled-background);\n  }\n\n  ._switch_1jog0_1._disabled_1jog0_11 ._handle_1jog0_16 {\n      background-color: var(--toggle-handle-disabled-background);\n    }\n\n  ._switch_1jog0_1._disabled_1jog0_11._checked_1jog0_20 {\n      background-color: var(--toggle-checked-disabled-background);\n    }\n\n  ._switch_1jog0_1._disabled_1jog0_11._checked_1jog0_20 ._handle_1jog0_16 {\n        background-color: var(--toggle-handle-checked-disabled-background);\n      }\n\n  ._switch_1jog0_1._small_1jog0_29 {\n    height: calc(35px / 2);\n    height: calc(var(--toggle-height, 35px) / 2);\n    width: calc(55px / 2);\n    width: calc(var(--toggle-width, 55px) / 2);\n    padding: calc(var(--toggle-spacing) / 2);\n  }\n\n  ._switch_1jog0_1._small_1jog0_29 ._handle_1jog0_16 {\n      height: calc(25px / 2);\n      height: calc(var(--toggle-handle-size, 25px) / 2);\n      width: calc(25px / 2);\n      width: calc(var(--toggle-handle-size, 25px) / 2);\n    }\n\n  ._switch_1jog0_1._medium_1jog0_40 {\n    height: calc(35px / 1.5);\n    height: calc(var(--toggle-height, 35px) / 1.5);\n    width: calc(55px / 1.5);\n    width: calc(var(--toggle-width, 55px) / 1.5);\n    padding: calc(var(--toggle-spacing) / 1.5);\n  }\n\n  ._switch_1jog0_1._medium_1jog0_40 ._handle_1jog0_16 {\n      height: calc(25px / 1.5);\n      height: calc(var(--toggle-handle-size, 25px) / 1.5);\n      width: calc(25px / 1.5);\n      width: calc(var(--toggle-handle-size, 25px) / 1.5);\n    }\n\n  ._switch_1jog0_1._large_1jog0_51 {\n    height: 35px;\n    height: var(--toggle-height, 35px);\n    width: 55px;\n    width: var(--toggle-width, 55px);\n    padding: var(--toggle-spacing);\n  }\n\n  ._switch_1jog0_1._large_1jog0_51 ._handle_1jog0_16 {\n      height: 25px;\n      height: var(--toggle-handle-size, 25px);\n      width: 25px;\n      width: var(--toggle-handle-size, 25px);\n    }\n\n  ._switch_1jog0_1 ._handle_1jog0_16 {\n    background-color: var(--toggle-handle-background);\n    border-radius: var(--toggle-handle-border-radius);\n  }\n\n  ._switch_1jog0_1._checked_1jog0_20 {\n    justify-content: flex-end;\n    border: var(--toggle-border-checked);\n    background-color: var(--toggle-background-checked);\n  }\n\n  ._switch_1jog0_1._checked_1jog0_20 ._handle_1jog0_16 {\n      background-color: var(--toggle-handle-checked-background);\n    }\n._avatar_v8yfz_1 {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-size: cover;\n  background-position: center;\n  color: var(--avatar-initials-color);\n  border: var(--avatar-border);\n  font-weight: bold;\n}\n\n._rounded_v8yfz_12 {\n  border-radius: 50%;\n}\n._group_1sbi4_1 {\n  display: flex;\n  align-items: center;\n}\n\n  ._group_1sbi4_1 ._avatar_1sbi4_5 {\n    margin-left: var(--avatar-group-spacing);\n  }\n\n  ._group_1sbi4_1 ._overflow_1sbi4_9 {\n    margin-left: var(--spacing-sm);\n  }\n._container_d6on2_1 {\n  position: relative;\n  display: inline-flex;\n  vertical-align: middle;\n  flex-shrink: 0;\n  margin: 0 8px;\n}\n\n  ._container_d6on2_1._disableMargins_d6on2_8 {\n    margin: 0 !important;\n  }\n\n._badge_d6on2_13 {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n  position: absolute;\n  box-sizing: border-box;\n  line-height: 1;\n  padding: var(--spacing-xs);\n  border-radius: var(--badge-border-radius);\n  min-width: 18px;\n  height: 18px;\n  z-index: 1;\n  font-size: var(--font-size-sm);\n  pointer-events: none;\n\n  /* Positions */\n  top: 0;\n  right: 0;\n  transform: translate(50%, -50%);\n  transform-origin: 100% 0%;\n}\n\n._badge_d6on2_13._top_d6on2_37._left_d6on2_38 {\n      top: 0;\n      transform: translate(-50%, -50%);\n      transform-origin: 0% 0%;\n    }\n\n._badge_d6on2_13._bottom_d6on2_45._left_d6on2_38 {\n      bottom: 0;\n      transform: translate(-50%, 50%);\n      transform-origin: 0% 100%;\n    }\n\n._badge_d6on2_13._bottom_d6on2_45._right_d6on2_52 {\n      bottom: 0;\n      transform: translate(50%, 50%);\n      transform-origin: 100% 100%;\n    }\n\n/* Colors */\n\n._badge_d6on2_13._default_d6on2_60 {\n    background: var(--badge-color-background-default);\n    color: var(--badge-color-default);\n  }\n\n._badge_d6on2_13._primary_d6on2_65 {\n    background: var(--badge-color-background-primary);\n    color: var(--badge-color-primary);\n  }\n\n._badge_d6on2_13._secondary_d6on2_70 {\n    background: var(--badge-color-background-secondary);\n    color: var(--badge-color-secondary);\n  }\n\n._badge_d6on2_13._error_d6on2_75 {\n    background: var(--badge-color-background-error);\n    color: var(--badge-color-error);\n  }\n._tooltip_2b0bf_1 {\n  background: var(--tooltip-background);\n  color: var(--tooltip-color);\n  border-radius: var(--tooltip-border-radius);\n  border: var(--tooltip-border);\n  padding: var(--tooltip-spacing);\n  white-space: nowrap;\n  text-align: center;\n  will-change: transform, opacity;\n}\n\n._disablePointer_2b0bf_12 {\n  pointer-events: none;\n}\n._popover_17s8e_1 {\n  background: var(--popover-background);\n  color: var(--popover-color);\n  border-radius: var(--popover-border-radius);\n  padding: var(--popover-spacing);\n  will-change: transform, opacity;\n}\n\n  ._popover_17s8e_1._disablePadding_17s8e_8 {\n    padding: 0;\n  }\n._dialog_1iyoz_1 {\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  pointer-events: none;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  position: fixed;\n  will-change: transform, opacity;\n}\n\n  ._dialog_1iyoz_1._disableHeader_1iyoz_13 ._content_1iyoz_14 {\n      padding: 20px;\n    }\n\n  ._dialog_1iyoz_1._disablePadding_1iyoz_19 ._content_1iyoz_14,\n    ._dialog_1iyoz_1._disablePadding_1iyoz_19 ._header_1iyoz_21 {\n      padding: 0;\n    }\n\n  ._dialog_1iyoz_1 ._inner_1iyoz_26 {\n    background: var(--dialog-background);\n    color: var(--dialog-color);\n    display: flex;\n    flex-direction: column;\n    box-sizing: border-box;\n    outline: 0;\n    pointer-events: auto;\n    max-width: 80vw;\n    max-height: 80vh;\n    overflow: auto;\n  }\n\n  ._dialog_1iyoz_1 ._header_1iyoz_21 {\n    display: flex;\n    justify-content: space-between;\n    padding: 20px 20px 10px 20px;\n  }\n\n  ._dialog_1iyoz_1 ._header_1iyoz_21 ._headerText_1iyoz_44 {\n      margin: 0;\n      padding: 0;\n      flex: 1;\n      display: inline-flex;\n    }\n\n  ._dialog_1iyoz_1 ._header_1iyoz_21 ._closeButton_1iyoz_51 {\n      margin: 0 0 0 15px;\n      opacity: 0.8;\n      height: auto;\n      width: auto;\n      min-width: auto;\n      min-height: auto;\n      display: inline-flex;\n      padding: 0;\n      background: none;\n      border: none;\n      cursor: pointer;\n      align-items: center;\n      color: var(--dialog-color);\n      font-size: 16px;\n    }\n\n  ._dialog_1iyoz_1 ._header_1iyoz_21 ._closeButton_1iyoz_51:focus {\n        outline: none;\n      }\n\n  ._dialog_1iyoz_1 ._content_1iyoz_14 {\n    padding: 10px 20px 20px 20px;\n    flex: auto;\n    overflow: auto;\n  }\n\n  ._dialog_1iyoz_1 ._footer_1iyoz_79 {\n    display: flex;\n    padding: 20px 20px 10px 20px;\n  }\n._drawer_1f5a0_1 {\n  position: fixed;\n  overflow-y: auto;\n  overflow-x: hidden;\n  background: var(--drawer-background);\n  color: var(--drawer-color);\n}\n\n  ._drawer_1f5a0_1:not(._disablePadding_1f5a0_8) ._content_1f5a0_9 {\n      padding: 20px 30px;\n    }\n\n  ._drawer_1f5a0_1 ._header_1f5a0_14 {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 20px 30px;\n  }\n\n  ._drawer_1f5a0_1 ._header_1f5a0_14 ._headerText_1f5a0_20 {\n      margin: 0;\n      flex: 1;\n    }\n\n  ._drawer_1f5a0_1 ._closeButton_1f5a0_26 {\n    opacity: 0.8;\n    height: auto;\n    width: auto;\n    min-width: auto;\n    min-height: auto;\n    padding: 0;\n    background: none;\n    border: none;\n    cursor: pointer;\n    color: var(--drawer-color);\n    font-size: 16px;\n  }\n\n  ._drawer_1f5a0_1 ._closeButton_1f5a0_26:focus {\n      outline: none;\n    }\n\n  ._drawer_1f5a0_1 ._closeButton_1f5a0_26._headerlessCloseButton_1f5a0_43 {\n      position: absolute;\n      top: 20px;\n      right: 20px;\n    }\n\n  ._drawer_1f5a0_1._left_1f5a0_50,\n  ._drawer_1f5a0_1._right_1f5a0_51 {\n    top: 0;\n    bottom: 0;\n    height: 100%;\n  }\n\n  ._drawer_1f5a0_1._left_1f5a0_50 {\n    left: 0;\n  }\n\n  ._drawer_1f5a0_1._right_1f5a0_51 {\n    right: 0;\n  }\n\n  ._drawer_1f5a0_1._top_1f5a0_65,\n  ._drawer_1f5a0_1._bottom_1f5a0_66 {\n    width: 100%;\n    left: 0;\n    right: 0;\n  }\n\n  ._drawer_1f5a0_1._top_1f5a0_65 {\n    top: 0;\n  }\n\n  ._drawer_1f5a0_1._bottom_1f5a0_66 {\n    bottom: 0;\n  }\n._container_gicoy_1 {\n  position: relative;\n  padding: 1px;\n  min-width: 112px;\n  max-width: 500px;\n}\n\n  ._container_gicoy_1 ._inner_gicoy_7:focus {\n      outline: none;\n    }\n._enabled_ftw1e_1 {\n  cursor: context-menu;\n}\n._notification_1ggeh_1 {\n  display: flex;\n  position: relative;\n  font-size: 16px;\n  min-width: 400px;\n  padding: 10px;\n  min-height: 45px;\n  margin-bottom: 10px;\n  border-radius: 4px;\n  background: var(--notification-background);\n  color: var(--notification-color);\n  border: 1px solid var(--notification-border);\n}\n\n  ._notification_1ggeh_1 ._contentContainer_1ggeh_14 {\n    display: flex;\n    width: 100%;\n    padding: 0 15px;\n  }\n\n  ._notification_1ggeh_1._error_1ggeh_20 ._header_1ggeh_21 {\n      color: var(--notification-color-error);\n    }\n\n  ._notification_1ggeh_1._warning_1ggeh_26 ._header_1ggeh_21 {\n      color: var(--notification-color-warning);\n    }\n\n  ._notification_1ggeh_1._success_1ggeh_32 ._header_1ggeh_21 {\n      color: var(--notification-color-success);\n    }\n\n  ._notification_1ggeh_1 ._close_1ggeh_38,\n  ._notification_1ggeh_1 ._content_1ggeh_14 {\n    display: inline-flex;\n    align-items: center;\n  }\n\n  ._notification_1ggeh_1 ._content_1ggeh_14 {\n    flex: 1;\n    padding: 3px 10px;\n    flex-direction: column;\n    text-align: center;\n    justify-content: center;\n  }\n\n  ._notification_1ggeh_1 ._content_1ggeh_14 ._header_1ggeh_21 {\n      font-size: 18px;\n    }\n\n  ._notification_1ggeh_1 ._content_1ggeh_14 ._body_1ggeh_55 {\n      color: var(--color-on-notification);\n      opacity: 0.7;\n      font-size: 14px;\n      margin-top: 5px;\n    }\n\n  ._notification_1ggeh_1 ._close_1ggeh_38 ._closeButton_1ggeh_64 {\n      cursor: pointer;\n      background: none;\n      border: none;\n      padding: 5px 10px;\n      font-size: 13px;\n      font-weight: 600;\n      opacity: 0.7;\n      margin: 0;\n      color: var(--color-on-notification);\n    }\n._container_16mce_1 ._positions_16mce_2 {\n    position: fixed;\n    z-index: 9998;\n    height: auto;\n    left: 50%;\n    transform: translateX(-50%);\n    bottom: 0;\n    padding: 0 95px;\n    margin-bottom: 5px;\n  }\n\n    ._container_16mce_1 ._positions_16mce_2 > div {\n      margin: 10px 0 15px 0;\n    }"));
      document.head.appendChild(elementStyle);
    }
  } catch (e) {
    console.error("vite-plugin-css-injected-by-js", e);
  }
})();
(function(global2, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("react"), require("react/jsx-runtime"), require("chroma-js"), require("ellipsize"), require("pluralize"), require("human-format"), require("classnames"), require("coverup"), require("date-fns"), require("framer-motion"), require("mousetrap"), require("react-18-input-autosize"), require("rdk"), require("react-highlight-words"), require("@reaviz/react-use-fuzzy"), require("react-fast-compare"), require("react-textarea-autosize"), require("name-initials"), require("@marko19907/string-to-color"), require("focus-trap-react"), require("create-global-state-hook")) : typeof define === "function" && define.amd ? define(["exports", "react", "react/jsx-runtime", "chroma-js", "ellipsize", "pluralize", "human-format", "classnames", "coverup", "date-fns", "framer-motion", "mousetrap", "react-18-input-autosize", "rdk", "react-highlight-words", "@reaviz/react-use-fuzzy", "react-fast-compare", "react-textarea-autosize", "name-initials", "@marko19907/string-to-color", "focus-trap-react", "create-global-state-hook"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.reablocks = {}, global2.React, global2.jsxRuntime, global2.chroma, global2.ellipsize, global2.pluralizeLib, global2.humanFormat, global2.classNames, global2.coverup, global2.dateFns, global2.framerMotion, global2.Mousetrap, global2.AutosizeInput, global2.rdk, global2.Highlighter, global2.reactUseFuzzy, global2.isEqual, global2.TextareaAutosize, global2.getInitials, global2.stringToColor, global2.FocusTrap, global2.creteGlobalStateHook));
})(this, function(exports2, React, jsxRuntime, chroma, ellipsize, pluralizeLib, humanFormat, classNames, coverup, dateFns, framerMotion, Mousetrap, AutosizeInput, rdk, Highlighter, reactUseFuzzy, isEqual, TextareaAutosize, getInitials, stringToColor, FocusTrap, creteGlobalStateHook) {
  "use strict";
  function _interopNamespaceDefault(e) {
    const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
    if (e) {
      for (const k in e) {
        if (k !== "default") {
          const d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: () => e[k]
          });
        }
      }
    }
    n.default = e;
    return Object.freeze(n);
  }
  const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
  const ThemeContext = React.createContext({});
  const useTheme = () => {
    const context = React.useContext(ThemeContext);
    if (context === void 0) {
      throw new Error(
        "`useTheme` hook must be used within a `ThemeContext` component"
      );
    }
    return context;
  };
  const camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  const applyColors = (theme) => {
    const colors = [];
    if (theme == null ? void 0 : theme.colors) {
      for (const key of Object.keys(theme.colors)) {
        if (key !== "black" && key !== "white") {
          for (const shade of Object.keys(theme.colors[key])) {
            colors.push(`--${key}-${shade}: ${theme.colors[key][shade]};`);
          }
        } else {
          colors.push(`--${key}: ${theme.colors[key]};`);
        }
      }
    }
    return colors;
  };
  const applyGradients = (theme) => {
    const gradients = [];
    if (theme == null ? void 0 : theme.gradients) {
      for (const key of Object.keys(theme.gradients)) {
        for (const shade of Object.keys(theme.gradients[key])) {
          gradients.push(
            `--gradient-${key}-${shade}: ${theme.gradients[key][shade]};`
          );
        }
      }
    }
    return gradients;
  };
  const applyBorders = (theme) => {
    var _a, _b, _c;
    const borders2 = [];
    if ((_a = theme == null ? void 0 : theme.borders) == null ? void 0 : _a.radius) {
      for (const key of Object.keys((_b = theme == null ? void 0 : theme.borders) == null ? void 0 : _b.radius)) {
        borders2.push(`--border-radius-${key}: ${(_c = theme == null ? void 0 : theme.borders) == null ? void 0 : _c.radius[key]};`);
      }
    }
    return borders2;
  };
  const applyShadows = (theme) => {
    var _a;
    const shadows = [];
    if (theme == null ? void 0 : theme.shadows) {
      for (const key of Object.keys(theme == null ? void 0 : theme.shadows)) {
        shadows.push(`--shadow-${key}: ${(_a = theme == null ? void 0 : theme.shadows) == null ? void 0 : _a[key]};`);
      }
    }
    return shadows;
  };
  const applySpacings = (theme) => {
    var _a;
    const spacings2 = [];
    if (theme == null ? void 0 : theme.spacings) {
      for (const key of Object.keys(theme == null ? void 0 : theme.spacings)) {
        spacings2.push(`--spacing-${key}: ${(_a = theme == null ? void 0 : theme.spacings) == null ? void 0 : _a[key]};`);
      }
    }
    return spacings2;
  };
  const applyPalettes = (theme) => {
    const palettes = [];
    if (theme == null ? void 0 : theme.palettes) {
      for (const key of Object.keys(theme.palettes)) {
        for (const subkey of Object.keys(theme.palettes[key])) {
          palettes.push(`--${key}-${subkey}: ${theme.palettes[key][subkey]};`);
        }
      }
    }
    return palettes;
  };
  const applyTypography = (theme) => {
    const typographies = [];
    if (theme == null ? void 0 : theme.typography) {
      if (theme.typography.families) {
        for (const key of Object.keys(theme.typography.families)) {
          typographies.push(
            `--${camelToDash(key)}: ${theme.typography.families[key]};`
          );
        }
      }
      if (theme.typography.sizes) {
        for (const key of Object.keys(theme.typography.sizes)) {
          typographies.push(
            `--font-size-${key}: ${theme.typography.sizes[key]};`
          );
        }
      }
      if (theme.typography.weights) {
        for (const key of Object.keys(theme.typography.weights)) {
          typographies.push(
            `--font-weight-${key}: ${theme.typography.weights[key]};`
          );
        }
      }
    }
    return typographies;
  };
  const applyComponents = (theme) => {
    const components = [];
    if (theme == null ? void 0 : theme.components) {
      for (const key of Object.keys(theme.components)) {
        for (const subkey of Object.keys(theme.components[key])) {
          components.push(`--${subkey}: ${theme.components[key][subkey]};`);
        }
      }
    }
    return components;
  };
  const buildSheetRules = (theme) => {
    const template = [];
    if (theme) {
      template.push(...applyColors(theme));
      template.push(...applyPalettes(theme));
      template.push(...applyGradients(theme));
      template.push(...applyBorders(theme));
      template.push(...applyShadows(theme));
      template.push(...applySpacings(theme));
      template.push(...applyTypography(theme));
      template.push(...applyComponents(theme));
    }
    return template;
  };
  const createSheet = (theme) => {
    const cssVariables = buildSheetRules(theme);
    const sheet = new CSSStyleSheet();
    sheet.replaceSync(`
    :root {
      ${cssVariables.map((variable) => `${variable}`).join("\n")}
    }
  `);
    document.adoptedStyleSheets = [...document.adoptedStyleSheets, sheet];
    return sheet;
  };
  const ThemeProvider = ({ children, theme }) => {
    const sheetRef = React.useRef(null);
    React.useLayoutEffect(() => {
      if (!sheetRef.current) {
        sheetRef.current = createSheet(theme);
      } else {
        const cssVariables = buildSheetRules(theme);
        sheetRef.current.replaceSync(`
        :root {
          ${cssVariables.map((variable) => `${variable}`).join("\n")}
        }
      `);
      }
    }, [theme]);
    React.useLayoutEffect(() => {
      return () => {
        if (sheetRef.current) {
          document.adoptedStyleSheets = document.adoptedStyleSheets.filter(
            (s) => s !== sheetRef.current
          );
          sheetRef.current = null;
        }
      };
    }, []);
    return /* @__PURE__ */ jsxRuntime.jsx(ThemeContext.Provider, { value: theme, children });
  };
  const spacings = {
    xs: "2px",
    sm: "5px",
    md: "10px",
    lg: "20px",
    xl: "24px",
    xxl: "30px"
  };
  const borders = {
    radius: {
      sm: "2px",
      md: "5px",
      lg: "10px"
    }
  };
  const fontSizes = {
    xs: "8px",
    sm: "11px",
    md: "16px",
    lg: "20px",
    xl: "28px",
    xxl: "32px"
  };
  const fontWeights = {
    thin: "200",
    normal: "400",
    bold: "600",
    extraBold: "800"
  };
  const darkColors = {
    black: "#000000",
    white: "#ffffff",
    red: {
      900: "#1f1315",
      800: "#291415",
      700: "#3c181a",
      600: "#481a1d",
      500: "#541b1f",
      400: "#671e22",
      300: "#822025",
      200: "#aa2429",
      100: "#e5484d",
      50: "#f2555a"
    },
    purple: {
      900: "#1b141d",
      800: "#221527",
      700: "#301a3a",
      600: "#3a1e48",
      500: "#432155",
      400: "#4e2667",
      300: "#5f2d84",
      200: "#7938b2",
      100: "#8e4ec6",
      50: "#9d5bd2"
    },
    blue: {
      900: "#0f1720",
      800: "#0f1b2d",
      700: "#10243e",
      600: "#102a4c",
      500: "#0f3058",
      400: "#0d3868",
      300: "#0a4481",
      200: "#0954a5",
      100: "#0091ff",
      50: "#369eff"
    },
    green: {
      900: "#0d1912",
      800: "#0f1e13",
      700: "#132819",
      600: "#16301d",
      500: "#193921",
      400: "#1d4427",
      300: "#245530",
      200: "#2f6e3b",
      100: "#46a758",
      50: "#55b467"
    },
    yellow: {
      900: "#1c1500",
      800: "#221a00",
      700: "#2c2100",
      600: "#352800",
      500: "#3e3000",
      400: "#493c00",
      300: "#594a05",
      200: "#705e00",
      100: "#f5d90a",
      50: "#ffef5c"
    },
    orange: {
      900: "#1f1206",
      800: "#2b1400",
      700: "#391a03",
      600: "#441f04",
      500: "#4f2305",
      400: "#5f2a06",
      300: "#763205",
      200: "#943e00",
      100: "#f76808",
      50: "#ff802b"
    },
    gray: {
      900: "#161616",
      800: "#1c1c1c",
      700: "#232323",
      600: "#282828",
      500: "#2e2e2e",
      400: "#343434",
      300: "#3e3e3e",
      200: "#505050",
      100: "#707070",
      50: "#7e7e7e"
    },
    slate: {
      900: "#151718",
      800: "#1a1d1e",
      700: "#202425",
      600: "#26292b",
      500: "#2b2f31",
      400: "#313538",
      300: "#3a3f42",
      200: "#4c5155",
      100: "#697177",
      50: "#787f85"
    },
    overlay: {
      100: "rgba(0, 0, 0, 0.01)",
      200: "rgba(0, 0, 0, 0.02)",
      300: "rgba(0, 0, 0, 0.03)",
      400: "rgba(0, 0, 0, 0.04)",
      500: "rgba(0, 0, 0, 0.05)",
      600: "rgba(0, 0, 0, 0.06)",
      700: "rgba(0, 0, 0, 0.07)",
      800: "rgba(0, 0, 0, 0.08)",
      900: "rgba(0, 0, 0, 0.09)"
    }
  };
  const darkTheme = {
    colors: darkColors,
    typography: {
      families: {
        fontFamily: "Inter, sans-serif",
        monoFontFamily: "Monaco, monospace"
      },
      sizes: fontSizes,
      weights: fontWeights
    },
    spacings,
    borders,
    gradients: {
      blue: {
        "100": "linear-gradient(204deg, #19D4EE 10%, #4B5CFA 100%)",
        "200": "linear-gradient(30deg, #2E27AD 0%, #679BFF 100%)"
      },
      orange: {
        "100": "linear-gradient(45deg, #C8511B 0%, #FFA800 100%)"
      },
      red: {
        "100": "linear-gradient(204deg, #FF8A8A 10%, #C14941 100%)"
      },
      green: {
        "100": "linear-gradient(45deg, #055F4E 0%, #56C0A7 100%)"
      },
      pink: {
        "100": "linear-gradient(204deg, #FC7AFF 10%, #C15179 100%)"
      }
    },
    shadows: {
      100: "0 2px 4px 0 rgba(17,22,26,0.16), 0 0 4px 0 rgba(17,22,26,0.08), 0 4px 8px 0 rgba(17,22,26,0.04)",
      200: "0 4px 8px 0 rgba(17,22,26,0.16), 0 4px 8px 0 rgba(17,22,26,0.08), 0 8px 16px 0 rgba(17,22,26,0.04)",
      300: "0 0 8px 0 rgba(17,22,26,0.06), 0 4px 16px 0 rgba(17,22,26,0.08), 0 8px 12px 0 rgba(17,22,26,0.06), 0 16px 24px 0 rgba(17,22,26,0.04)",
      400: "0 4px 12px 0 rgba(17,22,26,0.06), 0 4px 24px 8px rgba(17,22,26,0.12), 0 8px 16px 0 rgba(17,22,26,0.06), 0 32px 40px 0 rgba(17,22,26,0.02)",
      500: "0 4px 12px 0 rgba(0,0,0,0.08), 0 8px 32px 8px rgba(17,22,26,0.12), 0 16px 24px 8px rgba(17,22,26,0.06), 0 64px 48px 8px rgba(17,22,26,0.06)",
      600: "0 4px 12px 0 rgba(0,0,0,0.08), 0 8px 32px 8px rgba(17,22,26,0.12), 0 16px 24px 8px rgba(17,22,26,0.06), 0 64px 48px 8px rgba(17,22,26,0.06)",
      700: "0 4px 12px 0 rgba(0,0,0,0.08), 0 8px 32px 8px rgba(17,22,26,0.12), 0 16px 24px 8px rgba(17,22,26,0.06), 0 64px 48px 8px rgba(17,22,26,0.06)",
      800: "0 4px 12px 0 rgba(0,0,0,0.08), 0 8px 32px 8px rgba(17,22,26,0.12), 0 16px 24px 8px rgba(17,22,26,0.06), 0 64px 48px 8px rgba(17,22,26,0.06)",
      900: "0 4px 12px 0 rgba(0,0,0,0.08), 0 8px 32px 8px rgba(17,22,26,0.12), 0 16px 24px 8px rgba(17,22,26,0.06), 0 64px 48px 8px rgba(17,22,26,0.06)"
    },
    palettes: {
      body: {
        background: darkColors.gray["900"],
        color: darkColors.white
      },
      primary: {
        background: darkColors.blue["400"],
        color: darkColors.blue["300"],
        "background-hover": darkColors.blue["200"],
        "color-hover": darkColors.white
      },
      secondary: {
        background: darkColors.blue["500"],
        color: darkColors.blue["300"],
        "background-hover": darkColors.blue["400"],
        "color-hover": darkColors.blue["200"]
      },
      error: {
        background: darkColors.red["100"],
        color: darkColors.red["100"],
        "background-hover": darkColors.red["50"],
        "color-hover": darkColors.red["50"]
      },
      success: {
        background: darkColors.green["100"],
        color: darkColors.green["100"],
        "background-hover": darkColors.green["50"],
        "color-hover": darkColors.green["50"]
      },
      warning: {
        background: darkColors.orange["100"],
        color: darkColors.orange["100"],
        "background-hover": darkColors.orange["50"],
        "color-hover": darkColors.orange["50"]
      },
      info: {
        background: darkColors.blue["100"],
        color: darkColors.blue["100"],
        "background-hover": darkColors.blue["50"],
        "color-hover": darkColors.blue["50"]
      },
      disabled: {
        background: darkColors.gray["500"],
        color: darkColors.gray["200"]
      }
    },
    components: {
      block: {
        "block-spacing": spacings.md,
        "block-label-spacing": spacings.xs,
        "block-label-size": fontSizes.sm,
        "block-label-weight": fontWeights.bold
      },
      button: {
        "button-font-weight": "500",
        "button-font-family": "var(--font-family)",
        "button-background": darkColors.gray["200"],
        "button-background-hover": darkColors.gray["100"],
        "button-color": darkColors.gray["100"],
        "button-color-hover": darkColors.gray["50"],
        "button-color-on-background": darkColors.white,
        "button-disabled-color-on-background": darkColors.gray["100"],
        "button-border-radius": borders.radius.md,
        "button-border": `solid 1px ${darkColors.gray["500"]}`,
        "button-focus": darkColors.blue["100"],
        "button-focus-offset": spacings.xs,
        "button-spacing-sm": `${spacings.xs} ${spacings.sm}`,
        "button-spacing-md": `${spacings.sm} ${spacings.md}`,
        "button-spacing-lg": `${spacings.md} ${spacings.lg}`,
        "button-adornment-size-sm": fontSizes.sm,
        "button-adornment-size-md": fontSizes.md,
        "button-adornment-size-lg": fontSizes.lg
      },
      card: {
        "card-border": "0",
        "card-border-radius": borders.radius.md,
        "card-spacing": spacings.md,
        "card-background": darkColors.slate["800"],
        "card-color": darkColors.slate["50"]
      },
      checkbox: {
        "checkbox-label-color": darkColors.white,
        "checkbox-check-stroke": darkColors.blue["100"],
        "checkbox-box-checked-stroke": darkColors.slate["100"],
        "checkbox-box-unchecked-stroke": darkColors.slate["100"]
      },
      chip: {
        "chip-font-family": "var(--font-family)",
        "chip-background": darkColors.gray["200"],
        "chip-background-hover": darkColors.gray["100"],
        "chip-color": darkColors.white,
        "chip-color-hover": darkColors.gray["50"],
        "chip-border-radius": borders.radius.md
      },
      dialog: {
        "dialog-background": darkColors.slate["800"],
        "dialog-color": darkColors.white
      },
      divider: {
        "divider-spacing": spacings.md,
        "divider-background": darkColors.gray["500"]
      },
      drawer: {
        "drawer-background": darkColors.slate["800"],
        "drawer-color": darkColors.white
      },
      input: {
        "input-background": darkColors.slate["800"],
        "input-color": darkColors.white,
        "input-color-placeholder": darkColors.gray["200"],
        "input-placeholder-style": "italic",
        "input-border": `solid 1px ${darkColors.gray["200"]}`,
        "input-border-radius": borders.radius.md,
        "input-border-focus": darkColors.gray["100"],
        "input-spacing-md": `${spacings.sm} ${spacings.md}`,
        "input-spacing-sm": spacings.sm,
        "input-spacing-lg": spacings.lg,
        "input-adornment-size": fontSizes.md,
        "input-adornment-fill": "var(--input-color)"
      },
      textarea: {
        "textarea-background": darkColors.slate["800"],
        "textarea-border": `solid 1px ${darkColors.gray["200"]}`,
        "textarea-border-radius": borders.radius.md,
        "textarea-border-focus": darkColors.gray["100"],
        "textarea-color": darkColors.white,
        "textarea-color-placeholder": darkColors.gray["200"],
        "textarea-placeholder-style": "italic",
        "textarea-spacing-md": spacings.md,
        "textarea-spacing-sm": spacings.sm,
        "textarea-spacing-lg": spacings.lg
      },
      list: {
        "list-item-color": "inherit",
        "list-item-spacing": spacings.md,
        "list-item-dense-spacing": spacings.sm,
        "list-item-border-radius": "0",
        "list-item-color-active": "inherit",
        "list-item-background-active": "transparent",
        "list-item-adornment-fill": "currentColor"
      },
      popover: {
        "popover-background": darkColors.slate["500"],
        "popover-color": darkColors.white,
        "popover-border-radius": borders.radius.md,
        "popover-spacing": spacings.md
      },
      notification: {
        "notification-background": darkColors.slate["700"],
        "notification-color": darkColors.white,
        "notification-border": `solid 1px ${darkColors.gray["500"]}`,
        "notification-color-error": darkColors.red["100"],
        "notification-color-warning": darkColors.orange["100"],
        "notification-color-success": darkColors.green["100"]
      },
      loader: {
        "loader-background": darkColors.gray["100"]
      },
      radio: {
        "radio-label-color": darkColors.white,
        "radio-stroke": darkColors.slate["100"],
        "radio-stroke-active": darkColors.blue["100"],
        "radio-stroke-size": "1px",
        "radio-background": "transparent",
        "radio-indicator-active": darkColors.blue["100"]
      },
      select: {
        "select-input-border-radius": spacings.sm,
        "select-input-background": darkColors.slate["800"],
        "select-input-border": `solid 1px ${darkColors.slate["200"]}`,
        "select-input-color": darkColors.white,
        "select-input-spacing": `${spacings.sm} ${spacings.md}`,
        "select-input-error": darkColors.red["100"],
        "select-input-placeholder-color": darkColors.gray["50"],
        "select-input-disabled-color": darkColors.gray["100"],
        "select-input-icon-color": darkColors.gray["50"],
        "select-menu-background": darkColors.slate["800"],
        "select-menu-border": `solid 1px ${darkColors.slate["200"]}`,
        "select-menu-border-radius": `0 0 ${borders.radius.md} ${borders.radius.md}`,
        "select-menu-item-color": darkColors.white,
        "select-menu-group-color": darkColors.slate["50"],
        "select-menu-item-spacing": `${spacings.sm} ${spacings.md}`,
        "select-menu-item-active-background": darkColors.slate["500"],
        "select-menu-item-active-color": darkColors.white,
        "select-menu-item-selected-color": darkColors.white,
        "select-menu-item-selected-background": darkColors.blue["200"],
        "select-chip-background": darkColors.slate["300"],
        "select-chip-border": `solid 1px ${darkColors.slate["900"]}`,
        "select-chip-border-radius": "var(--chip-border-radius)",
        "select-chip-color": darkColors.white,
        "select-chip-icon-color": darkColors.slate["50"]
      },
      toggle: {
        "toggle-width": "55px",
        "toggle-height": "35px",
        "toggle-handle-size": "25px",
        "toggle-background": darkColors.gray["100"],
        "toggle-background-checked": darkColors.blue["50"],
        "toggle-border": "none",
        "toggle-border-checked": "none",
        "toggle-border-radius": borders.radius.lg,
        "toggle-spacing": spacings.sm,
        "toggle-handle-background": darkColors.gray["300"],
        "toggle-handle-checked-background": darkColors.gray["300"],
        "toggle-handle-border-radius": borders.radius.lg,
        "toggle-disabled-background": darkColors.gray["100"],
        "toggle-handle-disabled-background": darkColors.gray["300"],
        "toggle-checked-disabled-background": darkColors.blue["50"],
        "toggle-handle-checked-disabled-background": darkColors.gray["300"],
        "toggle-disabled-opacity": "0.8"
      },
      tooltip: {
        "tooltip-background": darkColors.slate["500"],
        "tooltip-color": darkColors.white,
        "tooltip-border-radius": borders.radius.md,
        "tooltip-spacing": spacings.sm,
        "tooltip-border": "none"
      },
      range: {
        "range-track-background": darkColors.slate["300"],
        "range-track-border-radius": "0",
        "range-track-size": "2px",
        "range-handle-size": "14px",
        "range-handle-border-radius": "50%",
        "range-track-active-background": "var(--primary-color)",
        "range-handle-background": "var(--primary-color)"
      },
      sort: {
        "sort-icon-color": darkColors.white,
        "sort-icon-size": "14px"
      },
      avatar: {
        "avatar-initials-color": darkColors.white,
        "avatar-border": "solid 1px var(--body-background)"
      },
      stack: {
        "stack-gap": spacings.md,
        "stack-dense-gap": spacings.sm
      },
      avatarGroup: {
        "avatar-group-spacing": `calc(${spacings.md} * -1)`
      },
      typography: {
        "page-title-font-size": "40px",
        "page-title-font-weight": "var(--font-weight-bold)",
        "page-title-color": darkColors.white,
        "page-title-margin": "0 0 var(--spacing-lg) 0",
        "primary-heading-font-size": "var(--font-size-xxl)",
        "primary-heading-font-weight": "var(--font-weight-extraBold)",
        "primary-heading-color": darkColors.white,
        "primary-heading-margin": "0 0 var(--spacing-sm) 0",
        "secondary-heading-font-size": "var(--font-size-xl)",
        "secondary-heading-font-weight": "var(--font-weight-normal)",
        "secondary-heading-color": darkColors.white,
        "secondary-heading-margin": "0 0 var(--spacing-sm) 0",
        "small-heading-font-size": "var(--font-size-md)",
        "small-heading-font-weight": "var(--font-weight-normal)",
        "small-heading-color": darkColors.white,
        "small-heading-margin": "0 0 var(--spacing-sm) 0",
        "sub-font-size": "var(--font-size-sm)",
        "sub-font-weight": "var(--font-weight-bold)",
        "sub-color": darkColors.white,
        "sub-margin": "0 0 var(--spacing-xs) 0"
      },
      calendar: {
        "calendar-spacing": "8px",
        "calendar-gap": "0px",
        "calendar-divider": darkColors.slate["500"],
        "calendar-day-radius": "var(--button-border-radius)",
        "calendar-day-color": "var(--button-color)",
        "calendar-day-background-selected": "var(--primary-background)",
        "calendar-day-border-selected": "var(--primary-background)",
        "calendar-day-background-hover": "var(--primary-background)",
        "calendar-day-border-hover": "var(--primary-background)"
      },
      badge: {
        "badge-color-background-default": darkColors.white,
        "badge-color-default": darkColors.black,
        "badge-color-background-primary": "var(--primary-background)",
        "badge-color-primary": darkColors.white,
        "badge-color-background-secondary": "var(--secondary-background)",
        "badge-color-secondary": darkColors.white,
        "badge-color-background-error": "var(--error-background)",
        "badge-color-error": darkColors.white,
        "badge-border-radius": "50%"
      }
    }
  };
  const ColorBlock = ({ name, color, className }) => /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      style: {
        border: "solid 1px var(--slate-500)",
        borderRadius: "var(--border-radius-md)",
        overflow: "hidden"
      },
      className,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(
          "div",
          {
            style: {
              padding: "var(--spacing-lg)",
              background: color,
              color: "var(--body-color)",
              borderBottom: "solid 1px var(--slate-500)"
            }
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              padding: "var(--spacing-sm) var(--spacing-md)",
              fontSize: "12px"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(
                "code",
                {
                  style: { cursor: "pointer" },
                  title: `Double click to copy ${name} to your clipboard`,
                  onDoubleClick: () => navigator.clipboard.writeText(name),
                  children: name
                }
              ) }),
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(
                "code",
                {
                  style: { cursor: "pointer" },
                  title: `Double click to copy ${color} to your clipboard`,
                  onDoubleClick: () => navigator.clipboard.writeText(color),
                  children: color
                }
              ) })
            ]
          }
        )
      ]
    },
    name
  );
  const ColorPaletteBlock = ({
    name,
    color,
    className,
    showName = true
  }) => {
    const valid = chroma.valid(color);
    const fontColor = valid && !name.includes("overlay") ? chroma(color).luminance() >= 0.3 ? chroma(color).darken(100).css() : chroma(color).brighten(100).css() : "var(--body-color)";
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        className,
        style: {
          borderRight: "solid 1px var(--slate-500)"
        },
        children: /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              padding: "var(--spacing-md)",
              background: color,
              height: "100%",
              minHeight: 50
            },
            children: [
              showName && /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(
                "code",
                {
                  style: { cursor: "pointer", color: fontColor, fontSize: "12px" },
                  title: `Double click to copy ${name} to your clipboard`,
                  onDoubleClick: () => navigator.clipboard.writeText(name),
                  children: name
                }
              ) }),
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: /* @__PURE__ */ jsxRuntime.jsx(
                "code",
                {
                  style: { cursor: "pointer", color: fontColor, fontSize: "12px" },
                  title: `Double click to copy ${color} to your clipboard`,
                  onDoubleClick: () => navigator.clipboard.writeText(color),
                  children: color
                }
              ) })
            ]
          }
        )
      },
      name
    );
  };
  const ColorPaletteBlocks = ({
    name,
    colors,
    className,
    token = null,
    showNames = true
  }) => /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      className,
      style: {
        marginBottom: "var(--spacing-xl)"
      },
      children: [
        /* @__PURE__ */ jsxRuntime.jsxs("h3", { style: { fontWeight: 500, margin: 0 }, children: [
          name,
          token && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
            /* @__PURE__ */ jsxRuntime.jsx("br", {}),
            /* @__PURE__ */ jsxRuntime.jsx("small", { children: /* @__PURE__ */ jsxRuntime.jsx("code", { children: token.toLowerCase() }) })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntime.jsx(
          "div",
          {
            style: {
              display: "grid",
              overflow: "hidden",
              borderRadius: "var(--border-radius-md)",
              border: "solid 1px var(--slate-500)",
              gridTemplateColumns: "repeat(auto-fit, minmax(100px, 1fr))"
            },
            children: typeof colors === "string" ? /* @__PURE__ */ jsxRuntime.jsx(ColorBlock, { name: `--${name}`, color: colors, showName: showNames }) : /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(colors).map((color) => /* @__PURE__ */ jsxRuntime.jsx(
              ColorPaletteBlock,
              {
                name: `--${name}-${color}`,
                color: colors[color],
                showName: showNames
              },
              `--${name}-${color}`
            )) })
          }
        )
      ]
    }
  );
  const ColorBlocks = () => {
    const { colors } = useTheme();
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "var(--spacing-sm) var(--spacing-md)",
          fontFamily: "var(--font-family)",
          color: "var(--body-color)",
          width: "100%"
        },
        children: colors ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(colors).map((key) => /* @__PURE__ */ jsxRuntime.jsx(
          ColorPaletteBlocks,
          {
            name: key,
            token: `colors.${key}`,
            colors: colors[key]
          },
          key
        )) }) : /* @__PURE__ */ jsxRuntime.jsx("p", { children: "⚠️ No colors defined" })
      }
    );
  };
  const TypographyLetterBlock = ({
    fontFamily,
    className
  }) => /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      className,
      style: {
        fontFamily,
        display: "flex",
        alignItems: "center",
        marginLeft: "var(--spacing-lg)"
      },
      children: [
        /* @__PURE__ */ jsxRuntime.jsx("div", { style: { fontSize: 128 }, children: "Aa" }),
        /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              marginLeft: "var(--spacing-lg)",
              paddingLeft: "var(--spacing-lg)",
              fontSize: 22,
              borderLeft: "solid 1px var(--slate-500)"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsx("h2", { style: { margin: 0 }, children: fontFamily }),
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }),
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: "abcdefghijklmnopqrstuvwxyz" }),
              /* @__PURE__ */ jsxRuntime.jsx("div", { children: "1234567890 /&*()?<>+-=$@%!”[]{}" })
            ]
          }
        )
      ]
    }
  );
  const TypographySizeBlock = ({
    sizes,
    className
  }) => /* @__PURE__ */ jsxRuntime.jsx("div", { className, children: Object.keys(sizes).map((size) => /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      style: {
        fontSize: sizes[size],
        display: "flex",
        alignItems: "center",
        margin: "var(--spacing-lg)"
      },
      children: [
        /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              fontSize: 12,
              width: 110,
              marginRight: "var(--spacing-md)",
              color: "var(--body-color)"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsx(
                "code",
                {
                  style: { cursor: "pointer" },
                  onDoubleClick: () => navigator.clipboard.writeText(`--font-size-${size}`),
                  children: sizes[size]
                }
              ),
              /* @__PURE__ */ jsxRuntime.jsx("br", {}),
              /* @__PURE__ */ jsxRuntime.jsx("small", { children: /* @__PURE__ */ jsxRuntime.jsxs(
                "code",
                {
                  style: { cursor: "pointer" },
                  onDoubleClick: () => navigator.clipboard.writeText(`--font-size-${size}`),
                  children: [
                    "--font-size-",
                    size
                  ]
                }
              ) })
            ]
          }
        ),
        "The quick brown fox jumps over the lazy dog."
      ]
    },
    size
  )) });
  const TypographyWeightBlock = ({
    weights,
    className
  }) => /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      className,
      style: {
        padding: "var(--spacing-md)",
        borderRadius: "var(--border-radius-md)",
        border: "solid 1px var(--slate-500)"
      },
      children: Object.keys(weights).map((weight, i) => /* @__PURE__ */ jsxRuntime.jsxs(
        "div",
        {
          style: {
            display: "flex",
            alignItems: "center",
            marginBottom: "var(--spacing-lg)"
          },
          children: [
            /* @__PURE__ */ jsxRuntime.jsxs("code", { style: { width: "25%", minWidth: 200 }, children: [
              /* @__PURE__ */ jsxRuntime.jsx("div", { style: { fontSize: "var(--font-size-md)" }, children: weights[weight] }),
              /* @__PURE__ */ jsxRuntime.jsxs(
                "span",
                {
                  style: { cursor: "pointer" },
                  onDoubleClick: () => navigator.clipboard.writeText(`--font-weight-${weight}`),
                  children: [
                    "--font-weight-",
                    weight
                  ]
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntime.jsx("div", { style: { fontWeight: weights[weight] }, children: "The quick brown fox jumps over the lazy dog." })
          ]
        },
        i
      ))
    }
  );
  const TypographyBlocks = () => {
    const {
      typography: { families, sizes, weights }
    } = useTheme();
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        style: {
          fontFamily: "var(--font-family)",
          color: "var(--body-color)",
          width: "100%"
        },
        children: [
          /* @__PURE__ */ jsxRuntime.jsx("h1", { children: "Typography" }),
          /* @__PURE__ */ jsxRuntime.jsx("h2", { children: "Font Families" }),
          Object.keys(families).map((family) => /* @__PURE__ */ jsxRuntime.jsxs(
            "div",
            {
              style: {
                marginBottom: "var(--spacing-xl)"
              },
              children: [
                /* @__PURE__ */ jsxRuntime.jsxs("h3", { style: { fontWeight: 500, fontSize: "var(--font-size-lg)" }, children: [
                  /* @__PURE__ */ jsxRuntime.jsx("small", { children: /* @__PURE__ */ jsxRuntime.jsxs("code", { children: [
                    "--",
                    camelToDash(family)
                  ] }) }),
                  /* @__PURE__ */ jsxRuntime.jsx("br", {})
                ] }),
                /* @__PURE__ */ jsxRuntime.jsxs(
                  "div",
                  {
                    style: {
                      padding: "var(--spacing-md)",
                      borderRadius: "var(--border-radius-md)",
                      border: "solid 1px var(--slate-500)"
                    },
                    children: [
                      /* @__PURE__ */ jsxRuntime.jsx(TypographyLetterBlock, { fontFamily: families[family] }),
                      /* @__PURE__ */ jsxRuntime.jsx(
                        "hr",
                        {
                          style: {
                            background: "none",
                            border: "none",
                            borderTop: "solid 1px var(--slate-500)"
                          }
                        }
                      ),
                      /* @__PURE__ */ jsxRuntime.jsx(TypographySizeBlock, { sizes })
                    ]
                  }
                )
              ]
            },
            family
          )),
          weights && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
            /* @__PURE__ */ jsxRuntime.jsx("h2", { children: "Font Weights" }),
            /* @__PURE__ */ jsxRuntime.jsx(TypographyWeightBlock, { weights })
          ] })
        ]
      }
    );
  };
  const SpacingBlocks = () => {
    const { spacings: spacings2 } = useTheme();
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "var(--spacing-sm) var(--spacing-md)",
          fontFamily: "var(--font-family)",
          color: "var(--body-color)",
          width: "100%"
        },
        children: spacings2 ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(spacings2).map((key) => /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              marginBottom: "var(--spacing-xl)",
              padding: "var(--spacing-lg)",
              display: "flex",
              alignItems: "center",
              borderRadius: "var(--border-radius-md)",
              border: "solid 1px var(--slate-500)"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsxs("h3", { style: { fontWeight: 500, marginRight: 50 }, children: [
                /* @__PURE__ */ jsxRuntime.jsxs(
                  "code",
                  {
                    style: { cursor: "pointer" },
                    title: `Double click to copy --spacing-${key} to your clipboard`,
                    onDoubleClick: () => navigator.clipboard.writeText(`--spacing-${key}`),
                    children: [
                      "--spacing-",
                      key
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntime.jsx("br", {}),
                /* @__PURE__ */ jsxRuntime.jsx(
                  "small",
                  {
                    style: { cursor: "pointer" },
                    onDoubleClick: () => navigator.clipboard.writeText(spacings2[key]),
                    children: spacings2[key]
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntime.jsx(
                "div",
                {
                  style: {
                    justifyContent: "end",
                    display: "flex",
                    flex: 1
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsx(
                    "div",
                    {
                      style: {
                        padding: spacings2[key],
                        border: "solid 1px var(--blue-100)"
                      },
                      children: "Content"
                    }
                  )
                }
              )
            ]
          },
          key
        )) }) : /* @__PURE__ */ jsxRuntime.jsx("p", { children: "⚠️ No spacings defined" })
      }
    );
  };
  const PaletteBlocks = () => {
    const theme = useTheme();
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "var(--spacing-sm) var(--spacing-md)",
          color: "var(--body-color)",
          fontFamily: "var(--font-family)",
          width: "100%"
        },
        children: Object.keys(theme.palettes).map((key) => /* @__PURE__ */ jsxRuntime.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntime.jsxs("h3", { style: { fontWeight: 500, margin: 0 }, children: [
            key,
            /* @__PURE__ */ jsxRuntime.jsx("br", {}),
            /* @__PURE__ */ jsxRuntime.jsx("small", { children: /* @__PURE__ */ jsxRuntime.jsxs("code", { children: [
              "palettes.",
              key
            ] }) })
          ] }),
          /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              style: {
                marginBottom: "var(--spacing-xl)",
                display: "grid",
                gap: 12,
                gridTemplateColumns: "repeat(auto-fit, minmax(300px, 1fr))"
              },
              children: Object.keys(theme.palettes[key]).map((item2) => /* @__PURE__ */ jsxRuntime.jsx(
                ColorBlock,
                {
                  name: `--${key}-${item2}`,
                  color: theme.palettes[key][item2]
                },
                `--${key}-${item2}`
              ))
            }
          )
        ] }, key))
      }
    );
  };
  const BorderBlocks = () => {
    const { borders: borders2 } = useTheme();
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "var(--spacing-sm) var(--spacing-md)",
          fontFamily: "var(--font-family)",
          color: "var(--body-color)",
          width: "100%"
        },
        children: borders2 ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(borders2.radius).map((key) => /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              marginBottom: "var(--spacing-xl)",
              padding: "var(--spacing-lg)",
              display: "flex",
              alignItems: "center",
              borderRadius: "var(--border-radius-md)",
              border: "solid 1px var(--slate-500)"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsxs(
                "h3",
                {
                  style: {
                    fontWeight: 500,
                    marginRight: "var(--spacing-xl)",
                    maxWidth: 300
                  },
                  children: [
                    /* @__PURE__ */ jsxRuntime.jsxs(
                      "span",
                      {
                        style: { cursor: "pointer" },
                        title: `Double click to copy --border-radius-${key} to your clipboard`,
                        onDoubleClick: () => navigator.clipboard.writeText(`--border-radius-${key}`),
                        children: [
                          "--border-radius-",
                          key
                        ]
                      }
                    ),
                    /* @__PURE__ */ jsxRuntime.jsx("br", {}),
                    /* @__PURE__ */ jsxRuntime.jsx(
                      "small",
                      {
                        style: { cursor: "pointer" },
                        onDoubleClick: () => navigator.clipboard.writeText(borders2.radius[key]),
                        children: /* @__PURE__ */ jsxRuntime.jsx("code", { children: borders2.radius[key] })
                      }
                    )
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntime.jsx(
                "div",
                {
                  style: {
                    justifyContent: "end",
                    display: "flex",
                    flex: 1
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsx(
                    "div",
                    {
                      style: {
                        padding: "var(--spacing-sm)",
                        borderRadius: borders2.radius[key],
                        border: "solid 1px var(--blue-100)"
                      },
                      children: "Content"
                    }
                  )
                }
              )
            ]
          },
          key
        )) }) : /* @__PURE__ */ jsxRuntime.jsx("p", { children: "⚠️ No borders defined" })
      }
    );
  };
  const ShadowBlocks = () => {
    const { shadows } = useTheme();
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "var(--spacing-sm) var(--spacing-md)",
          fontFamily: "var(--font-family)",
          color: "var(--body-color)",
          width: "100%"
        },
        children: shadows ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(shadows).map((key) => /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              marginBottom: "var(--spacing-xl)",
              padding: "var(--spacing-lg) var(--spacing-xl)",
              display: "flex",
              alignItems: "center",
              borderRadius: "var(--border-radius-md)",
              border: "solid 1px var(--slate-500)"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsxs("h3", { style: { fontWeight: 500, marginRight: 50, maxWidth: 300 }, children: [
                /* @__PURE__ */ jsxRuntime.jsxs(
                  "span",
                  {
                    style: { cursor: "pointer" },
                    title: `Double click to copy --shadow-${key} to your clipboard`,
                    onDoubleClick: () => navigator.clipboard.writeText(`--shadow-${key}`),
                    children: [
                      "--shadow-",
                      key
                    ]
                  }
                ),
                /* @__PURE__ */ jsxRuntime.jsx("br", {}),
                /* @__PURE__ */ jsxRuntime.jsx("small", { children: /* @__PURE__ */ jsxRuntime.jsx(
                  "code",
                  {
                    style: { cursor: "pointer" },
                    onDoubleClick: () => navigator.clipboard.writeText(shadows[key]),
                    children: shadows[key]
                  }
                ) })
              ] }),
              /* @__PURE__ */ jsxRuntime.jsx(
                "div",
                {
                  style: {
                    justifyContent: "end",
                    display: "flex",
                    flex: 1
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsx(
                    "div",
                    {
                      style: {
                        padding: "var(--spacing-md)",
                        boxShadow: shadows[key]
                      },
                      children: "Content"
                    }
                  )
                }
              )
            ]
          },
          key
        )) }) : /* @__PURE__ */ jsxRuntime.jsx("p", { children: "⚠️ No shadows defined" })
      }
    );
  };
  const ComponentBlocks = () => {
    const { components } = useTheme();
    function renderValue(value) {
      if (chroma.valid(value)) {
        return /* @__PURE__ */ jsxRuntime.jsxs("div", { style: { display: "flex", alignContent: "center" }, children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              style: {
                background: value,
                borderRadius: "var(--border-radius-sm)",
                height: 15,
                width: 15,
                marginRight: "var(--spacing-sm)",
                border: "solid 1px var(--slate-500)"
              }
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            "code",
            {
              style: { cursor: "pointer" },
              onDoubleClick: () => navigator.clipboard.writeText(value),
              children: value
            }
          )
        ] });
      } else {
        return /* @__PURE__ */ jsxRuntime.jsx(
          "code",
          {
            style: { cursor: "pointer" },
            onDoubleClick: () => navigator.clipboard.writeText(value),
            children: value
          }
        );
      }
    }
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "var(--spacing-sm) var(--spacing-md)",
          fontFamily: "var(--font-family)",
          color: "var(--body-color)",
          width: "100%"
        },
        children: components ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(components).map((key) => /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            "h3",
            {
              style: {
                fontWeight: 500,
                marginRight: 50,
                marginBottom: "var(--spacing-sm)",
                maxWidth: 300
              },
              children: key
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              style: {
                marginBottom: "var(--spacing-lg)",
                padding: "var(--spacing-lg) var(--spacing-xl)",
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, 200px)",
                borderRadius: "var(--border-radius-md)",
                border: "solid 1px var(--slate-500)"
              },
              children: Object.keys(components[key]).map((kk) => /* @__PURE__ */ jsxRuntime.jsxs("div", { style: { marginBottom: 5 }, children: [
                /* @__PURE__ */ jsxRuntime.jsxs(
                  "h5",
                  {
                    style: { margin: 0, cursor: "pointer" },
                    title: `Double click to copy --${kk} to your clipboard`,
                    onDoubleClick: () => navigator.clipboard.writeText(`--${kk}`),
                    children: [
                      "--",
                      kk
                    ]
                  }
                ),
                renderValue(components[key][kk])
              ] }, kk))
            },
            key
          )
        ] })) }) : /* @__PURE__ */ jsxRuntime.jsx("p", { children: "⚠️ No components(s) defined" })
      }
    );
  };
  const GradientBlocks = () => {
    const { gradients } = useTheme();
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        style: {
          padding: "var(--spacing-sm) var(--spacing-md)",
          fontFamily: "var(--font-family)",
          color: "var(--body-color)",
          width: "100%"
        },
        children: gradients ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(gradients).map((key) => /* @__PURE__ */ jsxRuntime.jsxs(
          "div",
          {
            style: {
              marginBottom: "var(--spacing-xl)"
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsxs("h3", { style: { fontWeight: 500, margin: 0 }, children: [
                key,
                /* @__PURE__ */ jsxRuntime.jsx("br", {}),
                /* @__PURE__ */ jsxRuntime.jsx("small", { children: /* @__PURE__ */ jsxRuntime.jsxs("code", { children: [
                  "gradients.",
                  key
                ] }) })
              ] }),
              /* @__PURE__ */ jsxRuntime.jsx(
                "div",
                {
                  style: {
                    display: "grid",
                    gap: 12,
                    gridTemplateColumns: "repeat(auto-fit, minmax(300px, 1fr))"
                  },
                  children: Object.keys(gradients[key]).map((color) => /* @__PURE__ */ jsxRuntime.jsx(
                    ColorBlock,
                    {
                      name: `--gradient-${key}-${color}`,
                      color: gradients[key][color]
                    },
                    `--${key}-${color}`
                  ))
                }
              )
            ]
          },
          key
        )) }) : /* @__PURE__ */ jsxRuntime.jsx("p", { children: "⚠️ No gradients defined" })
      }
    );
  };
  const IconBlock = ({
    name,
    src,
    className,
    component: Component
  }) => /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      className,
      style: {
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        padding: "var(--spacing-md)",
        fontFamily: "var(--font-family)",
        background: "var(--icon-block-background)",
        color: "var(--icon-block-color)",
        textAlign: "center",
        fontSize: "12px",
        borderRadius: "var(--border-radius-md)",
        height: 75
      },
      children: /* @__PURE__ */ jsxRuntime.jsxs(React.Suspense, { fallback: null, children: [
        src ? /* @__PURE__ */ jsxRuntime.jsx(
          "img",
          {
            src,
            style: { width: 25, height: 25, marginBottom: "var(--spacing-md)" }
          }
        ) : /* @__PURE__ */ jsxRuntime.jsx(
          Component,
          {
            style: { width: 25, height: 25, marginBottom: "var(--spacing-md)" }
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx("div", { children: name })
      ] })
    }
  );
  const IconBlocks = ({ icons, className }) => /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      style: {
        display: "grid",
        gridGap: "var(--spacing-lg)",
        gridTemplateColumns: "repeat(auto-fill, minmax(120px, 1fr))",
        justifyItems: "stretch"
      },
      className,
      children: icons.map((key) => /* @__PURE__ */ jsxRuntime.jsx(IconBlock, { ...key }, key.name))
    }
  );
  const dots = "_dots_10uvw_1";
  const css$V = {
    dots
  };
  const Ellipsis = ({
    value,
    className,
    title,
    removeLinebreaks,
    expandable,
    limit
  }) => {
    const [expanded, setExpanded] = React.useState(false);
    const substr = React.useMemo(() => {
      const formatted = removeLinebreaks ? value.replace(/(\r\n|\n|\r)/gm, " ") : value;
      return ellipsize(formatted, limit, { ellipse: expandable ? "" : "..." });
    }, [expandable, limit, value, removeLinebreaks]);
    return /* @__PURE__ */ jsxRuntime.jsxs("span", { className, children: [
      expanded ? value : /* @__PURE__ */ jsxRuntime.jsx("span", { title: title !== false ? title || value : void 0, children: substr }),
      expandable && !expanded && value.length > limit && /* @__PURE__ */ jsxRuntime.jsx(
        "button",
        {
          type: "button",
          title: "Click to view rest of content",
          className: css$V.dots,
          onClick: (event) => {
            event.stopPropagation();
            setExpanded(true);
          },
          children: "..."
        }
      )
    ] });
  };
  Ellipsis.defaultProps = {
    removeLinebreaks: true,
    expandable: true,
    limit: 256
  };
  const pluralize = ({
    count,
    zero,
    singular,
    plural,
    showCount
  }) => {
    if (count === 0 && zero) {
      return zero;
    }
    let returnedString = singular;
    if (count !== 1) {
      returnedString = plural || pluralizeLib(singular, count);
    }
    return showCount ? `${count.toLocaleString()} ${returnedString}` : returnedString;
  };
  const Pluralize = ({
    count = 0,
    singular,
    className,
    showCount = true,
    plural,
    zero
  }) => {
    const text2 = React.useMemo(
      () => pluralize({ count, singular, showCount, plural, zero }),
      [count, singular, showCount, plural, zero]
    );
    return /* @__PURE__ */ jsxRuntime.jsx("span", { className, children: text2 });
  };
  function formatSize(size, emptyValue = "N/A", scale = ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"], decimals = 2) {
    let newSize = size;
    var binaryScale = humanFormat.Scale.create(scale, 1024);
    if (typeof size === "string") {
      newSize = parseFloat(size);
    } else if (size === null || size === void 0) {
      return [emptyValue];
    }
    return humanFormat(newSize, {
      scale: binaryScale,
      decimals
    });
  }
  const DataSize = ({
    value,
    emptyValue,
    scale,
    decimals
  }) => /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: formatSize(value, emptyValue, scale, decimals) });
  const btn$3 = "_btn_1szmm_1";
  const css$U = {
    btn: btn$3
  };
  const Redact = ({
    allowToggle,
    compactLength,
    tooltipText,
    className,
    character,
    value
  }) => {
    const [visible, setVisible] = React.useState(false);
    const masked = React.useMemo(
      () => coverup(value, {
        keepLeft: 1,
        keepRight: 1,
        compactTo: compactLength,
        char: character
      }) || "",
      [value, character, compactLength]
    );
    return /* @__PURE__ */ jsxRuntime.jsx(
      "span",
      {
        title: allowToggle ? tooltipText : void 0,
        role: "button",
        className: classNames(className, { [css$U.btn]: allowToggle }),
        onClick: () => allowToggle && setVisible(!visible),
        children: visible ? value : masked
      }
    );
  };
  Redact.defaultProps = {
    allowToggle: true,
    character: "*",
    compactLength: 8,
    tooltipText: "Click to toggle sensitive content"
  };
  const timeScale = new humanFormat.Scale({
    ms: 1,
    s: 1 * 1e3,
    min: 60 * 1e3,
    hr: 3600 * 1e3,
    day: 86400 * 1e3,
    month: 2592e3 * 1e3
  });
  function formatDuration(time, emptyValue = "N/A") {
    let newTime = time;
    if (typeof time === "string") {
      newTime = parseFloat(time);
    } else if (time === null || time === void 0) {
      return [emptyValue];
    }
    const humanized = humanFormat(newTime, { scale: timeScale });
    const [valueStr, unitStr] = humanized.split(" ");
    const value = parseFloat(valueStr);
    if (value === 1) {
      return humanized;
    }
    if (unitStr === null || unitStr === void 0 || value === null || value === void 0) {
      return [emptyValue];
    }
    return `${value} ${pluralizeLib(unitStr, value)}`;
  }
  const Duration = ({ value, emptyValue }) => /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: formatDuration(value, emptyValue) });
  Duration.defaultProps = {
    emptyValue: "N/A"
  };
  const useInfinityList = ({
    items,
    threshold = 3,
    size = 10,
    nextSize
  }) => {
    const [index, setIndex] = React.useState(0);
    const data = React.useMemo(() => [...items].slice(0, index), [index, items]);
    const hasMore = index < items.length;
    const remaining = items.length - index;
    const showNext = React.useCallback(
      (amount) => {
        if (hasMore) {
          const nextAmount = nextSize === Infinity ? remaining : nextSize || amount || size;
          const newIndex = Math.min(items.length, index + nextAmount);
          setIndex(newIndex);
        }
      },
      [hasMore, index, size, items, remaining, nextSize]
    );
    React.useEffect(() => {
      const len = (items == null ? void 0 : items.length) || 0;
      const endIdx = len <= size + threshold ? size + threshold : Math.min(len, size);
      setIndex(endIdx);
    }, [items.length, size, threshold]);
    return {
      data,
      hasMore,
      remaining,
      showNext
    };
  };
  const InfinityList = ({
    children,
    size,
    threshold,
    nextSize,
    buttonClassName
  }) => {
    const arr = React.Children.toArray(children);
    const { data, hasMore, remaining, showNext } = useInfinityList({
      items: arr,
      size,
      threshold,
      nextSize
    });
    return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
      data.map((child, i) => /* @__PURE__ */ jsxRuntime.jsx(React.Fragment, { children: child }, i)),
      hasMore && /* @__PURE__ */ jsxRuntime.jsxs(
        "button",
        {
          className: buttonClassName,
          onClick: (event) => {
            event.stopPropagation();
            showNext();
          },
          children: [
            "Show ",
            Math.min(size, remaining),
            " more"
          ]
        }
      )
    ] });
  };
  InfinityList.defaultProps = {
    size: 10,
    threshold: 3
  };
  function getDifference(date) {
    return dateFns.differenceInSeconds(/* @__PURE__ */ new Date(), date);
  }
  function formatRelative(date, options) {
    const diff = getDifference(date);
    if (diff < 30) {
      return "now";
    } else {
      return dateFns.formatDistance(date, /* @__PURE__ */ new Date(), options);
    }
  }
  function getInterval(date) {
    const diff = getDifference(date);
    if (diff < 3600) {
      return 6e4;
    } else if (diff >= 3600 && diff <= 86400) {
      return 36e5;
    } else {
      return 0;
    }
  }
  function safeFormat(date, options) {
    let relative;
    let formatted;
    let dateObj;
    if (date) {
      dateObj = new Date(date);
      if (dateFns.isValid(dateObj)) {
        const { format, includeSeconds, addSuffix } = options;
        formatted = dateFns.format(dateObj, format);
        relative = formatRelative(dateObj, { includeSeconds, addSuffix });
      }
    }
    return {
      dateObj,
      formatted,
      relative
    };
  }
  const btn$2 = "_btn_lab0n_1";
  const css$T = {
    btn: btn$2
  };
  const DateFormat = ({
    allowToggle,
    cacheKey,
    className,
    format,
    emptyMessage,
    includeSeconds,
    addSuffix,
    fromNow,
    date
  }) => {
    const [cache, setCache] = React.useState(
      window.localStorage.getItem(`DATES_${cacheKey}`) || null
    );
    React.useEffect(() => {
      if (cacheKey) {
        window.localStorage.setItem(`DATES_${cacheKey}`, cache);
      }
    }, [cache, cacheKey]);
    let should = fromNow;
    if (cacheKey && cache) {
      should = cache === "true";
    }
    const [isRelative, setIsRelative] = React.useState(should);
    const timeout = React.useRef(null);
    const { dateObj, formatted, relative } = React.useMemo(
      () => safeFormat(date, { format, includeSeconds, addSuffix }),
      [addSuffix, date, format, includeSeconds]
    );
    const [curRelative, setCurRelative] = React.useState(relative);
    const onToggle = React.useCallback(
      (event) => {
        if (allowToggle) {
          event.preventDefault();
          event.stopPropagation();
          const next = !isRelative;
          setIsRelative(next);
          if (cacheKey) {
            setCache(`${next}`);
          }
        }
      },
      [allowToggle, cacheKey, isRelative, setCache]
    );
    const updateTime = React.useCallback(() => {
      if (isRelative) {
        clearTimeout(timeout.current);
        const interval = getInterval(dateObj);
        if (interval > 0) {
          timeout.current = setTimeout(() => {
            setCurRelative(
              formatRelative(dateObj, { includeSeconds, addSuffix })
            );
            updateTime();
          }, interval);
        }
      }
    }, [isRelative, dateObj, includeSeconds, addSuffix]);
    React.useEffect(() => {
      updateTime();
      const cur = timeout.current;
      return () => clearTimeout(cur);
    });
    if (!date) {
      return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: emptyMessage });
    }
    return /* @__PURE__ */ jsxRuntime.jsx(
      "time",
      {
        title: allowToggle ? "Toggle relative / absolute time" : void 0,
        role: "button",
        className: classNames(className, { [css$T.btn]: allowToggle }),
        onClick: onToggle,
        children: isRelative ? curRelative : formatted
      }
    );
  };
  DateFormat.defaultProps = {
    format: "MM/dd/yy hh:mm:ss a",
    includeSeconds: false,
    allowToggle: false,
    addSuffix: true,
    emptyMessage: "N/A"
  };
  const DownArrowIcon$1 = ({ className }) => /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      x: "0px",
      y: "0px",
      width: "50",
      height: "50",
      viewBox: "0 0 32 32",
      className,
      children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M 4.21875 10.78125 L 2.78125 12.21875 L 15.28125 24.71875 L 16 25.40625 L 16.71875 24.71875 L 29.21875 12.21875 L 27.78125 10.78125 L 16 22.5625 Z" })
    }
  );
  function getNextDirection(direction, defaultDirection = "asc", canBeNull = true) {
    if (!direction) {
      return defaultDirection;
    } else if (direction === "asc") {
      return "desc";
    } else if (direction === "desc") {
      return canBeNull ? null : "asc";
    }
  }
  const button$1 = "_button_fz3ld_1";
  const disabled$7 = "_disabled_fz3ld_9";
  const hasValue = "_hasValue_fz3ld_12";
  const icon$2 = "_icon_fz3ld_17";
  const ascIcon = "_ascIcon_fz3ld_24";
  const css$S = {
    button: button$1,
    disabled: disabled$7,
    hasValue,
    icon: icon$2,
    ascIcon
  };
  const Sort = ({
    className,
    disabled: disabled2,
    direction,
    iconClassName,
    icon: Icon,
    neutralIcon: NeutralIcon,
    neutralIconClassName,
    children,
    onSort
  }) => {
    const onSortClick = React.useCallback(() => {
      if (!disabled2) {
        onSort == null ? void 0 : onSort(getNextDirection(direction));
      }
    }, [disabled2, direction, onSort]);
    const onKeydown = React.useCallback(
      (event) => {
        if (!disabled2 && (event.key === "Enter" || event.key === "Space")) {
          onSort == null ? void 0 : onSort(getNextDirection(direction));
        }
      },
      [disabled2, direction, onSort]
    );
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        className: classNames(css$S.button, className, {
          [css$S.disabled]: disabled2,
          [css$S.hasValue]: direction !== void 0 && direction !== null
        }),
        role: "button",
        tabIndex: -1,
        "aria-label": "Toggle sort direction",
        onClick: onSortClick,
        onKeyDown: onKeydown,
        children: [
          children,
          /* @__PURE__ */ jsxRuntime.jsxs(framerMotion.AnimatePresence, { initial: false, mode: "wait", children: [
            direction === "asc" && /* @__PURE__ */ jsxRuntime.jsx(
              framerMotion.motion.div,
              {
                initial: { opacity: 0, y: -10 },
                animate: { opacity: 1, y: 0 },
                exit: { opacity: 0, y: 10, transition: { duration: 0.05 } },
                children: /* @__PURE__ */ jsxRuntime.jsx(
                  Icon,
                  {
                    className: classNames(css$S.icon, iconClassName, css$S.ascIcon)
                  }
                )
              },
              "asc"
            ),
            direction === "desc" && /* @__PURE__ */ jsxRuntime.jsx(
              framerMotion.motion.div,
              {
                initial: { opacity: 0, y: -10 },
                animate: { opacity: 1, y: 0 },
                exit: { opacity: 0, y: 10, transition: { duration: 0.05 } },
                children: /* @__PURE__ */ jsxRuntime.jsx(
                  Icon,
                  {
                    className: classNames(css$S.icon, iconClassName, css$S.descIcon)
                  }
                )
              },
              "desc"
            ),
            !!NeutralIcon && !direction && /* @__PURE__ */ jsxRuntime.jsx(
              framerMotion.motion.div,
              {
                initial: { opacity: 0, y: -10 },
                animate: { opacity: 1, y: 0 },
                exit: { opacity: 0, y: 10, transition: { duration: 0.05 } },
                children: /* @__PURE__ */ jsxRuntime.jsx(
                  NeutralIcon,
                  {
                    className: classNames(css$S.icon, neutralIconClassName)
                  }
                )
              },
              "neutral"
            )
          ] })
        ]
      }
    );
  };
  Sort.defaultProps = {
    icon: DownArrowIcon$1
  };
  const SearchIcon = () => /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "none",
      viewBox: "0 0 24 24",
      strokeWidth: "1.5",
      stroke: "currentColor",
      ariaHidden: "true",
      children: /* @__PURE__ */ jsxRuntime.jsx(
        "path",
        {
          strokeLinecap: "round",
          strokeLinejoin: "round",
          d: "M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
        }
      )
    }
  );
  const container$f = "_container_tjtgz_1";
  const input$4 = "_input_tjtgz_8";
  const icon$1 = "_icon_tjtgz_29";
  const css$R = {
    container: container$f,
    input: input$4,
    icon: icon$1
  };
  const CommandPaletteInput = ({
    value,
    autoFocus,
    icon: icon2,
    hotkeys,
    placeholder,
    onHotkey,
    onBlur,
    onChange,
    onKeyPress
  }) => {
    const inputRef = React.useRef(null);
    React.useLayoutEffect(() => {
      if (autoFocus) {
        requestAnimationFrame(() => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.focus();
        });
      }
    }, [autoFocus]);
    React.useEffect(() => {
      if (inputRef.current) {
        const mousetrap = new Mousetrap(inputRef.current);
        for (const hotkey of hotkeys) {
          mousetrap.bind(hotkey.hotkey, () => onHotkey(hotkey));
        }
      }
      return () => {
        hotkeys.forEach((hotkey) => Mousetrap.unbind(hotkey.hotkey));
      };
    }, [onHotkey, hotkeys]);
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: css$R.container, children: [
      icon2 && /* @__PURE__ */ jsxRuntime.jsx("span", { className: css$R.icon, children: icon2 }),
      /* @__PURE__ */ jsxRuntime.jsx(
        "input",
        {
          className: css$R.input,
          ref: inputRef,
          type: "text",
          value,
          placeholder,
          autoCorrect: "off",
          spellCheck: "false",
          autoComplete: "off",
          onChange: (e) => onChange(e.target.value),
          onKeyDown: onKeyPress,
          onBlur
        }
      )
    ] });
  };
  CommandPaletteInput.defaultProps = {
    icon: /* @__PURE__ */ jsxRuntime.jsx(SearchIcon, {})
  };
  const DATA_ATTRIBUTE_INDEX = "keyboard_index";
  const useFlattenedTree = (children, selectedIndex, onSelectedIndexChange) => {
    const itemsRef = React.useRef([]);
    const hotkeyRef = React.useRef([]);
    const [flattenedTree, setFlattenedTree] = React.useState([]);
    function flattenChildren(nodes) {
      const result = [];
      React.Children.forEach(nodes, (child, index) => {
        if (React.isValidElement(child)) {
          if (child.type.displayName === "CommandPaletteSection") {
            result.push(
              React.cloneElement(child, {
                children: flattenChildren(child.props.children),
                index
              })
            );
          } else if (child.type.displayName === "CommandPaletteItem") {
            const index2 = itemsRef.current.length;
            if (child.props.hotkey) {
              hotkeyRef.current.push({
                hotkey: child.props.hotkey,
                index: index2
              });
            }
            const clone = React.cloneElement(child, {
              // NOTE: This isn't working for some reason
              ref: (ref) => itemsRef.current[index2] = ref,
              active: index2 === selectedIndex,
              onClick: () => onSelectedIndexChange == null ? void 0 : onSelectedIndexChange(index2),
              [DATA_ATTRIBUTE_INDEX]: index2
            });
            itemsRef.current[index2] = clone;
            result.push(clone);
          } else {
            result.push(child);
          }
        }
      });
      return result;
    }
    React.useEffect(() => {
      itemsRef.current = [];
      hotkeyRef.current = [];
      setFlattenedTree(flattenChildren(children));
    }, [children, selectedIndex]);
    return {
      flattenedTree,
      hotkeys: hotkeyRef.current,
      itemsRef
    };
  };
  const list = "_list_jz30e_1";
  const css$Q = {
    list
  };
  const List = React.forwardRef(
    ({ className, children, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        ...rest,
        ref,
        role: "list",
        className: classNames(className, css$Q.list),
        children
      }
    )
  );
  const listItem = "_listItem_r6l8m_1";
  const startAdornment$3 = "_startAdornment_r6l8m_10";
  const endAdornment$3 = "_endAdornment_r6l8m_14";
  const content$6 = "_content_r6l8m_28";
  const active$3 = "_active_r6l8m_35";
  const disabled$6 = "_disabled_r6l8m_39";
  const clickable$3 = "_clickable_r6l8m_43";
  const dense$1 = "_dense_r6l8m_53";
  const disableGutters = "_disableGutters_r6l8m_69";
  const disablePadding$6 = "_disablePadding_r6l8m_74";
  const css$P = {
    listItem,
    startAdornment: startAdornment$3,
    endAdornment: endAdornment$3,
    content: content$6,
    active: active$3,
    disabled: disabled$6,
    clickable: clickable$3,
    dense: dense$1,
    disableGutters,
    disablePadding: disablePadding$6
  };
  const ListItem = React.forwardRef(
    ({
      className,
      children,
      active: active2,
      disabled: disabled2,
      disablePadding: disablePadding2,
      disableGutters: disableGutters2,
      start,
      end,
      dense: dense2,
      onClick,
      ...rest
    }, ref) => /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        ...rest,
        ref,
        role: onClick ? "button" : "listitem",
        tabIndex: onClick ? 0 : void 0,
        onClick: (e) => !disabled2 && (onClick == null ? void 0 : onClick(e)),
        className: classNames(className, css$P.listItem, {
          [css$P.disabled]: disabled2,
          [css$P.active]: active2,
          [css$P.clickable]: onClick && !disabled2,
          [css$P.disablePadding]: disablePadding2,
          [css$P.disableGutters]: disableGutters2,
          [css$P.dense]: dense2
        }),
        children: [
          start && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$P.startAdornment, children: start }),
          /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$P.content, children }),
          end && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$P.endAdornment, children: end })
        ]
      }
    )
  );
  const root$7 = "_root_1u76g_1";
  const disableMargins$8 = "_disableMargins_1u76g_8";
  const css$O = {
    root: root$7,
    disableMargins: disableMargins$8
  };
  const primary$3 = "_primary_1h9pf_1";
  const secondary$3 = "_secondary_1h9pf_5";
  const error$7 = "_error_1h9pf_9";
  const success$3 = "_success_1h9pf_13";
  const warning$3 = "_warning_1h9pf_17";
  const info$1 = "_info_1h9pf_21";
  const mono = "_mono_1h9pf_25";
  const common = {
    primary: primary$3,
    secondary: secondary$3,
    error: error$7,
    success: success$3,
    warning: warning$3,
    info: info$1,
    mono
  };
  const PageTitle = React.forwardRef(
    ({
      children,
      color,
      variant,
      disableMargins: disableMargins2,
      className,
      ...rest
    }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      "h1",
      {
        ref,
        className: classNames(
          common[color],
          common[variant],
          css$O.root,
          { [css$O.disableMargins]: disableMargins2 },
          className
        ),
        ...rest,
        children
      }
    )
  );
  PageTitle.defaultProps = {
    color: "default",
    variant: "default",
    disableMargins: false
  };
  const root$6 = "_root_9g7kd_1";
  const disableMargins$7 = "_disableMargins_9g7kd_8";
  const css$N = {
    root: root$6,
    disableMargins: disableMargins$7
  };
  const PrimaryHeading = React.forwardRef(
    ({
      children,
      color,
      variant,
      disableMargins: disableMargins2,
      className,
      ...rest
    }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      "h2",
      {
        ref,
        className: classNames(
          common[color],
          common[variant],
          css$N.root,
          { [css$N.disableMargins]: disableMargins2 },
          className
        ),
        ...rest,
        children
      }
    )
  );
  PrimaryHeading.defaultProps = {
    color: "default",
    variant: "default",
    disableMargins: false
  };
  const root$5 = "_root_1o2ul_1";
  const disableMargins$6 = "_disableMargins_1o2ul_8";
  const css$M = {
    root: root$5,
    disableMargins: disableMargins$6
  };
  const SecondaryHeading = React.forwardRef(
    ({
      children,
      color,
      variant,
      disableMargins: disableMargins2,
      className,
      ...rest
    }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      "h3",
      {
        ref,
        className: classNames(
          common[color],
          common[variant],
          css$M.root,
          { [css$M.disableMargins]: disableMargins2 },
          className
        ),
        ...rest,
        children
      }
    )
  );
  SecondaryHeading.defaultProps = {
    color: "default",
    variant: "default",
    disableMargins: false
  };
  const root$4 = "_root_1dv3y_1";
  const disableMargins$5 = "_disableMargins_1dv3y_8";
  const css$L = {
    root: root$4,
    disableMargins: disableMargins$5
  };
  const SmallHeading = React.forwardRef(
    ({
      children,
      color,
      variant,
      disableMargins: disableMargins2,
      className,
      ...rest
    }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      "h5",
      {
        ref,
        className: classNames(
          common[color],
          common[variant],
          css$L.root,
          { [css$L.disableMargins]: disableMargins2 },
          className
        ),
        ...rest,
        children
      }
    )
  );
  SmallHeading.defaultProps = {
    color: "default",
    variant: "default",
    disableMargins: false
  };
  const root$3 = "_root_1dwi9_1";
  const disableMargins$4 = "_disableMargins_1dwi9_7";
  const css$K = {
    root: root$3,
    disableMargins: disableMargins$4
  };
  const Sub = React.forwardRef(
    ({ color, variant, disableMargins: disableMargins2, children, className, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      "h6",
      {
        ref,
        className: classNames(
          common[color],
          common[variant],
          css$K.root,
          { [css$K.disableMargins]: disableMargins2 },
          className
        ),
        ...rest,
        children
      }
    )
  );
  Sub.defaultProps = {
    color: "default",
    variant: "default",
    disableMargins: false
  };
  const thin = "_thin_1ls8i_1";
  const bold = "_bold_1ls8i_5";
  const extraBold = "_extraBold_1ls8i_9";
  const italic = "_italic_1ls8i_13";
  const css$J = {
    thin,
    bold,
    extraBold,
    italic
  };
  const Text = React.forwardRef(
    ({ color, variant, fontStyle, children, className, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      "span",
      {
        ref,
        className: classNames(
          common[color],
          common[variant],
          css$J[fontStyle],
          className
        ),
        ...rest,
        children
      }
    )
  );
  Text.defaultProps = {
    color: "default",
    variant: "default",
    fontStyle: "default"
  };
  const header$6 = "_header_1ffms_1";
  const css$I = {
    header: header$6
  };
  const ListHeader = ({
    className,
    children,
    ...rest
  }) => /* @__PURE__ */ jsxRuntime.jsx(Sub, { ...rest, className: classNames(className, css$I.header), children });
  const card$1 = "_card_o9yl3_1";
  const disablePadding$5 = "_disablePadding_o9yl3_11";
  const header$5 = "_header_o9yl3_15";
  const push = "_push_o9yl3_19";
  const headerText$2 = "_headerText_o9yl3_24";
  const content$5 = "_content_o9yl3_32";
  const css$H = {
    card: card$1,
    disablePadding: disablePadding$5,
    header: header$5,
    push,
    headerText: headerText$2,
    content: content$5
  };
  const Card = React.forwardRef(
    ({
      children,
      disablePadding: disablePadding2,
      className,
      header: header2,
      headerClassName,
      contentClassName,
      ...rest
    }, ref) => /* @__PURE__ */ jsxRuntime.jsxs(
      "section",
      {
        ...rest,
        ref,
        className: classNames(className, css$H.card, {
          [css$H.disablePadding]: disablePadding2
        }),
        children: [
          header2 && /* @__PURE__ */ jsxRuntime.jsx("header", { className: classNames(css$H.header, headerClassName), children: header2 && typeof header2 === "string" ? /* @__PURE__ */ jsxRuntime.jsx("h3", { className: css$H.headerText, children: header2 }) : header2 }),
          /* @__PURE__ */ jsxRuntime.jsx("div", { className: classNames(css$H.content, contentClassName), children })
        ]
      }
    )
  );
  const groupVariants = {
    initial: {
      transition: {
        staggerChildren: 0.05,
        staggerDirection: -1
      }
    },
    animate: {
      transition: {
        staggerChildren: 0.07,
        delayChildren: 0.2
      }
    }
  };
  const MotionGroup = ({ children, ...rest }) => /* @__PURE__ */ jsxRuntime.jsx(
    framerMotion.motion.div,
    {
      variants: groupVariants,
      initial: "initial",
      animate: "animate",
      ...rest,
      children
    }
  );
  const verticalVariant = {
    initial: {
      y: -20,
      opacity: 0,
      transition: {
        when: "beforeChildren"
      }
    },
    animate: {
      y: 0,
      opacity: 1,
      transition: {
        when: "beforeChildren"
      }
    },
    exit: {
      y: -20,
      opacity: 0
    }
  };
  const horizontalVariants = {
    initial: {
      x: "-100%",
      opacity: 0,
      transition: {
        when: "beforeChildren",
        x: { stiffness: 10 }
      }
    },
    animate: {
      x: "0%",
      opacity: 1,
      transition: {
        x: { stiffness: 10, velocity: -100 },
        when: "beforeChildren",
        opacity: { duration: 1 }
      }
    },
    exit: {
      x: "-100%",
      opacity: 0,
      transition: {
        x: { stiffness: 10 }
      }
    }
  };
  const MotionItem = ({
    children,
    direction = "vertical",
    ...rest
  }) => /* @__PURE__ */ jsxRuntime.jsx(
    framerMotion.motion.div,
    {
      variants: direction === "vertical" ? verticalVariant : horizontalVariants,
      ...rest,
      children
    }
  );
  const card = "_card_1e3yj_1";
  const innerCard = "_innerCard_1e3yj_5";
  const css$G = {
    card,
    innerCard
  };
  const CommandPalette = ({
    search,
    placeholder,
    children,
    inputIcon,
    autoFocus,
    emptyMessage,
    onHotkey,
    onSelectedIndexChange,
    onSearchChange
  }) => {
    const [selectedIndex, setSelectedIndex] = React.useState(-1);
    const [filterText, setFilterText] = React.useState(search);
    const { flattenedTree, itemsRef, hotkeys } = useFlattenedTree(
      children,
      selectedIndex,
      onSelectedIndexChange
    );
    const hasChildren = React.Children.count(children) > 0;
    const elementRef = React.useRef(null);
    const handleKeyDown = (event) => {
      if (event.key === "ArrowUp") {
        setSelectedIndex((prev) => Math.max(prev - 1, -1));
      } else if (event.key === "ArrowDown") {
        setSelectedIndex((prev) => Math.min(prev + 1, itemsRef.current.length - 1));
      } else if (event.key === "Enter" && itemsRef.current[selectedIndex]) {
        onSelectedIndexChange == null ? void 0 : onSelectedIndexChange(selectedIndex);
        setSelectedIndex(-1);
      }
    };
    React.useEffect(() => {
      var _a;
      if (selectedIndex > -1) {
        (_a = elementRef.current.querySelector(`[${DATA_ATTRIBUTE_INDEX}="${selectedIndex}"]`)) == null ? void 0 : _a.scrollIntoView();
      }
    }, [selectedIndex, flattenedTree]);
    return /* @__PURE__ */ jsxRuntime.jsxs(Card, { className: css$G.card, disablePadding: true, ref: elementRef, children: [
      /* @__PURE__ */ jsxRuntime.jsx(
        CommandPaletteInput,
        {
          value: filterText,
          placeholder,
          autoFocus,
          icon: inputIcon,
          hotkeys,
          onHotkey,
          onChange: (val) => {
            setFilterText(val);
            onSearchChange == null ? void 0 : onSearchChange(val);
          },
          onKeyPress: handleKeyDown,
          onBlur: () => setSelectedIndex(-1)
        }
      ),
      /* @__PURE__ */ jsxRuntime.jsxs(MotionGroup, { children: [
        hasChildren && /* @__PURE__ */ jsxRuntime.jsx(Card, { className: css$G.innerCard, disablePadding: true, children: /* @__PURE__ */ jsxRuntime.jsx(List, { children: flattenedTree }) }),
        !hasChildren && emptyMessage && /* @__PURE__ */ jsxRuntime.jsx(List, { children: /* @__PURE__ */ jsxRuntime.jsx(ListItem, { children: emptyMessage }) })
      ] })
    ] });
  };
  CommandPalette.defaultProps = {
    autoFocus: true
  };
  const chip$1 = "_chip_df3yr_1";
  const startAdornment$2 = "_startAdornment_df3yr_15";
  const content$4 = "_content_df3yr_21";
  const endAdornment$2 = "_endAdornment_df3yr_26";
  const small$8 = "_small_df3yr_33";
  const medium$8 = "_medium_df3yr_43";
  const large$8 = "_large_df3yr_53";
  const filled$1 = "_filled_df3yr_63";
  const primary$2 = "_primary_df3yr_72";
  const secondary$2 = "_secondary_df3yr_77";
  const error$6 = "_error_df3yr_82";
  const success$2 = "_success_df3yr_87";
  const warning$2 = "_warning_df3yr_92";
  const info = "_info_df3yr_97";
  const outline$1 = "_outline_df3yr_103";
  const selectable = "_selectable_df3yr_167";
  const selected$1 = "_selected_df3yr_173";
  const disableMargins$3 = "_disableMargins_df3yr_259";
  const css$F = {
    chip: chip$1,
    startAdornment: startAdornment$2,
    content: content$4,
    endAdornment: endAdornment$2,
    small: small$8,
    medium: medium$8,
    large: large$8,
    filled: filled$1,
    primary: primary$2,
    secondary: secondary$2,
    error: error$6,
    success: success$2,
    warning: warning$2,
    info,
    outline: outline$1,
    selectable,
    selected: selected$1,
    disableMargins: disableMargins$3
  };
  const Chip = React.forwardRef(
    ({
      children,
      color,
      variant,
      size,
      selected: selected2,
      disabled: disabled2,
      className,
      disableMargins: disableMargins2,
      start,
      end,
      onClick,
      ...rest
    }, ref) => /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        ...rest,
        ref,
        tabIndex: onClick ? 0 : -1,
        onClick,
        className: classNames(
          css$F.chip,
          {
            [css$F[color]]: true,
            [css$F[variant]]: true,
            [css$F[size]]: true,
            [css$F.selected]: !!selected2,
            [css$F.disabled]: disabled2,
            [css$F.selectable]: onClick && !disabled2,
            [css$F.disableMargins]: disableMargins2
          },
          className
        ),
        children: [
          start && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$F.startAdornment, children: start }),
          /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$F.content, children }),
          end && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$F.endAdornment, children: end })
        ]
      }
    )
  );
  Chip.defaultProps = {
    color: "default",
    size: "medium",
    variant: "filled"
  };
  const btn$1 = "_btn_1sw82_1";
  const small$7 = "_small_1sw82_17";
  const medium$7 = "_medium_1sw82_22";
  const large$7 = "_large_1sw82_27";
  const filled = "_filled_1sw82_32";
  const primary$1 = "_primary_1sw82_45";
  const secondary$1 = "_secondary_1sw82_55";
  const error$5 = "_error_1sw82_65";
  const success$1 = "_success_1sw82_75";
  const warning$1 = "_warning_1sw82_85";
  const outline = "_outline_1sw82_96";
  const text = "_text_1sw82_160";
  const fullWidth$2 = "_fullWidth_1sw82_213";
  const disableMargins$2 = "_disableMargins_1sw82_218";
  const disablePadding$4 = "_disablePadding_1sw82_222";
  const startAdornment$1 = "_startAdornment_1sw82_257";
  const endAdornment$1 = "_endAdornment_1sw82_258";
  const group$1 = "_group_1sw82_291";
  const css$E = {
    btn: btn$1,
    small: small$7,
    medium: medium$7,
    large: large$7,
    filled,
    "default": "_default_1sw82_35",
    primary: primary$1,
    secondary: secondary$1,
    error: error$5,
    success: success$1,
    warning: warning$1,
    outline,
    text,
    fullWidth: fullWidth$2,
    disableMargins: disableMargins$2,
    disablePadding: disablePadding$4,
    startAdornment: startAdornment$1,
    endAdornment: endAdornment$1,
    group: group$1
  };
  const ButtonGroupContext = React.createContext({
    variant: null,
    size: null
  });
  const Button = React.forwardRef(
    ({
      color,
      variant,
      children,
      fullWidth: fullWidth2,
      size,
      disableAnimation,
      className,
      disableMargins: disableMargins2,
      disablePadding: disablePadding2,
      disabled: disabled2,
      startAdornment: startAdornment2,
      endAdornment: endAdornment2,
      ...rest
    }, ref) => {
      const { variant: groupVariant, size: groupSize } = React.useContext(ButtonGroupContext);
      return /* @__PURE__ */ jsxRuntime.jsxs(
        framerMotion.motion.button,
        {
          ...rest,
          disabled: disabled2,
          ref,
          whileTap: { scale: disabled2 || disableAnimation ? 1 : 0.9 },
          className: classNames(
            css$E.btn,
            {
              [css$E.fullWidth]: fullWidth2,
              [css$E.disableMargins]: disableMargins2,
              [css$E.disablePadding]: disablePadding2,
              [css$E[color]]: true,
              [css$E[groupSize || size]]: true,
              [css$E[groupVariant || variant]]: true,
              [css$E.group]: !!groupVariant && !!groupSize
            },
            className
          ),
          children: [
            startAdornment2 && /* @__PURE__ */ jsxRuntime.jsx(
              "div",
              {
                className: classNames(css$E.startAdornment, { [css$E[size]]: true }),
                children: startAdornment2
              }
            ),
            children,
            endAdornment2 && /* @__PURE__ */ jsxRuntime.jsx("div", { className: classNames(css$E.endAdornment, { [css$E[size]]: true }), children: endAdornment2 })
          ]
        }
      );
    }
  );
  Button.defaultProps = {
    color: "default",
    variant: "filled",
    size: "medium",
    type: "button"
  };
  const ButtonGroup = ({
    children,
    className,
    variant,
    size
  }) => {
    const values = React.useMemo(
      () => ({
        variant: variant || "filled",
        size: size || "medium"
      }),
      [size, variant]
    );
    return /* @__PURE__ */ jsxRuntime.jsx(ButtonGroupContext.Provider, { value: values, children: /* @__PURE__ */ jsxRuntime.jsx("div", { className, children }) });
  };
  const DownArrowIcon = () => /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      x: "0px",
      y: "0px",
      width: "50",
      height: "50",
      viewBox: "0 0 32 32",
      children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M 4.21875 10.78125 L 2.78125 12.21875 L 15.28125 24.71875 L 16 25.40625 L 16.71875 24.71875 L 29.21875 12.21875 L 27.78125 10.78125 L 16 22.5625 Z" })
    }
  );
  const CloseIcon = () => /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      x: "0px",
      y: "0px",
      width: "32",
      height: "32",
      viewBox: "0 0 32 32",
      children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M 7.21875 5.78125 L 5.78125 7.21875 L 14.5625 16 L 5.78125 24.78125 L 7.21875 26.21875 L 16 17.4375 L 24.78125 26.21875 L 26.21875 24.78125 L 17.4375 16 L 26.21875 7.21875 L 24.78125 5.78125 L 16 14.5625 Z" })
    }
  );
  const RefreshIcon = () => /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      width: "64px",
      height: "64px",
      children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M 16 4 C 10.886719 4 6.617188 7.160156 4.875 11.625 L 6.71875 12.375 C 8.175781 8.640625 11.710938 6 16 6 C 19.242188 6 22.132813 7.589844 23.9375 10 L 20 10 L 20 12 L 27 12 L 27 5 L 25 5 L 25 8.09375 C 22.808594 5.582031 19.570313 4 16 4 Z M 25.28125 19.625 C 23.824219 23.359375 20.289063 26 16 26 C 12.722656 26 9.84375 24.386719 8.03125 22 L 12 22 L 12 20 L 5 20 L 5 27 L 7 27 L 7 23.90625 C 9.1875 26.386719 12.394531 28 16 28 C 21.113281 28 25.382813 24.839844 27.125 20.375 Z" })
    }
  );
  const deleteButton = "_deleteButton_101ah_1";
  const small$6 = "_small_101ah_2";
  const medium$6 = "_medium_101ah_7";
  const large$6 = "_large_101ah_12";
  const css$D = {
    deleteButton,
    small: small$6,
    medium: medium$6,
    large: large$6
  };
  const DeletableChip = React.forwardRef(
    ({ children, disabled: disabled2, deleteIcon, onDelete, size, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      Chip,
      {
        ref,
        size,
        disabled: disabled2,
        end: /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            tabIndex: 0,
            variant: "text",
            size,
            className: classNames(css$D.deleteButton, { [css$D[size]]: true }),
            onClick: (event) => {
              if (!disabled2) {
                event.stopPropagation();
                onDelete == null ? void 0 : onDelete();
              }
            },
            disabled: disabled2,
            disableMargins: true,
            disablePadding: true,
            children: deleteIcon
          }
        ),
        ...rest,
        children
      }
    )
  );
  DeletableChip.defaultProps = {
    color: "default",
    size: "medium",
    variant: "filled",
    deleteIcon: /* @__PURE__ */ jsxRuntime.jsx(CloseIcon, {})
  };
  let isMac = false;
  try {
    if (navigator) {
      isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
    }
  } catch (e) {
    console.warn(e);
  }
  const MODIFIER_KEY = isMac ? "⌘" : "CTRL";
  function getHotkeyText(hotkey) {
    return hotkey.replace("modifier", MODIFIER_KEY).replace("mod", MODIFIER_KEY).replace("meta", MODIFIER_KEY).replace("shift", "⌥").replace("plus", "+").replace("minus", "-");
  }
  const chip = "_chip_a0oed_1";
  const container$e = "_container_a0oed_10";
  const css$C = {
    chip,
    container: container$e
  };
  const Kbd = ({ className, keycode, ...rest }) => {
    const split = keycode.split("+").map(getHotkeyText);
    return /* @__PURE__ */ jsxRuntime.jsx("span", { className: css$C.container, children: split == null ? void 0 : split.map((key, index) => /* @__PURE__ */ jsxRuntime.jsx(Chip, { ...rest, className: classNames(css$C.chip, className), children: /* @__PURE__ */ jsxRuntime.jsx("kbd", { children: key }) }, index)) });
  };
  const item = "_item_1a75l_1";
  const clickable$2 = "_clickable_1a75l_5";
  const active$2 = "_active_1a75l_10";
  const css$B = {
    item,
    clickable: clickable$2,
    active: active$2
  };
  const CommandPaletteItem = React.forwardRef(({ children, active: active2, className, end, hotkey, onClick, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx(MotionItem, { layout: true, children: /* @__PURE__ */ jsxRuntime.jsx(
    ListItem,
    {
      ...rest,
      ref,
      className: classNames(className, css$B.item, {
        [css$B.active]: active2,
        [css$B.clickable]: onClick
      }),
      end: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
        hotkey && /* @__PURE__ */ jsxRuntime.jsx(Kbd, { keycode: hotkey, size: "small" }),
        end
      ] }),
      children
    }
  ) }));
  CommandPaletteItem.displayName = "CommandPaletteItem";
  const section = "_section_1bd8v_1";
  const first = "_first_1bd8v_2";
  const css$A = {
    section,
    first
  };
  const CommandPaletteSection = React.forwardRef(({ children, className, title, index, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx(MotionItem, { layout: true, children: /* @__PURE__ */ jsxRuntime.jsxs(
    List,
    {
      ref,
      ...rest,
      className: classNames(css$A.section, className, {
        [css$A.first]: index === 0
      }),
      children: [
        title && /* @__PURE__ */ jsxRuntime.jsx(ListHeader, { children: title }),
        /* @__PURE__ */ jsxRuntime.jsx(MotionGroup, { children })
      ]
    }
  ) }));
  CommandPaletteSection.displayName = "CommandPaletteSection";
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var _freeGlobal = freeGlobal$1;
  var freeGlobal = _freeGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root$2 = freeGlobal || freeSelf || Function("return this")();
  var _root = root$2;
  var root$1 = _root;
  var Symbol$3 = root$1.Symbol;
  var _Symbol = Symbol$3;
  var Symbol$2 = _Symbol;
  var objectProto$1 = Object.prototype;
  var hasOwnProperty = objectProto$1.hasOwnProperty;
  var nativeObjectToString$1 = objectProto$1.toString;
  var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : void 0;
  function getRawTag$1(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag$1), tag2 = value[symToStringTag$1];
    try {
      value[symToStringTag$1] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag2;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }
  var _getRawTag = getRawTag$1;
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;
  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }
  var _objectToString = objectToString$1;
  var Symbol$1 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
  var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : void 0;
  function baseGetTag$1(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  var _baseGetTag = baseGetTag$1;
  function isObject$1(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  }
  var isObject_1 = isObject$1;
  var baseGetTag = _baseGetTag, isObject = isObject_1;
  var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    var tag2 = baseGetTag(value);
    return tag2 == funcTag || tag2 == genTag || tag2 == asyncTag || tag2 == proxyTag;
  }
  var isFunction_1 = isFunction;
  const isFunction$1 = /* @__PURE__ */ getDefaultExportFromCjs(isFunction_1);
  const container$d = "_container_tbkyo_1";
  const css$z = {
    container: container$d
  };
  const VARIANTS$1 = {
    open: {
      opacity: 1,
      height: "auto"
    },
    collapsed: {
      opacity: 0,
      height: 0
    }
  };
  const TRANSITION = {
    duration: 0.5,
    ease: [0.04, 0.62, 0.23, 0.98],
    when: "beforeChildren"
  };
  const Collapse = ({
    children,
    expanded,
    className,
    ...rest
  }) => /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { initial: false, children: expanded && /* @__PURE__ */ React.createElement(
    framerMotion.motion.section,
    {
      ...rest,
      className: classNames(className, css$z.section),
      key: "content",
      initial: "collapsed",
      animate: "open",
      exit: "collapsed",
      variants: VARIANTS$1,
      transition: TRANSITION
    },
    isFunction$1(children) ? children() : children
  ) });
  const divider = "_divider_6jom2_1";
  const horizontal$1 = "_horizontal_6jom2_5";
  const vertical$1 = "_vertical_6jom2_11";
  const disableMargins$1 = "_disableMargins_6jom2_19";
  const css$y = {
    divider,
    horizontal: horizontal$1,
    vertical: vertical$1,
    disableMargins: disableMargins$1
  };
  const Divider = ({
    className,
    disableMargins: disableMargins2,
    orientation,
    ...rest
  }) => /* @__PURE__ */ jsxRuntime.jsx(
    "hr",
    {
      ...rest,
      className: classNames(css$y.divider, className, {
        [css$y.disableMargins]: disableMargins2,
        [css$y.vertical]: orientation === "vertical",
        [css$y.horizontal]: orientation === "horizontal"
      })
    }
  );
  Divider.defaultProps = {
    orientation: "horizontal",
    disableMargins: false
  };
  const container$c = "_container_1j3il_1";
  const disableMargin = "_disableMargin_1j3il_4";
  const label$3 = "_label_1j3il_8";
  const content$3 = "_content_1j3il_14";
  const horizontal = "_horizontal_1j3il_18";
  const centerAlign = "_centerAlign_1j3il_28";
  const endAlign$1 = "_endAlign_1j3il_32";
  const startAlign$1 = "_startAlign_1j3il_37";
  const vertical = "_vertical_1j3il_46";
  const disablePadding$3 = "_disablePadding_1j3il_50";
  const css$x = {
    container: container$c,
    disableMargin,
    label: label$3,
    content: content$3,
    horizontal,
    centerAlign,
    endAlign: endAlign$1,
    startAlign: startAlign$1,
    vertical,
    disablePadding: disablePadding$3
  };
  const Block = ({
    label: label2,
    children,
    disableMargin: disableMargin2,
    labelClassName,
    className,
    required,
    direction,
    alignment,
    onTitleClick,
    ...rest
  }) => /* @__PURE__ */ jsxRuntime.jsxs(
    "section",
    {
      ...rest,
      className: classNames(css$x.container, className, {
        [css$x.disableMargin]: disableMargin2,
        [css$x.horizontal]: direction === "horizontal",
        [css$x.vertical]: direction === "vertical",
        [css$x.endAlign]: alignment === "end",
        [css$x.centerAlign]: alignment === "center"
      }),
      children: [
        label2 && /* @__PURE__ */ jsxRuntime.jsxs(
          "label",
          {
            className: classNames(css$x.label, labelClassName),
            onClick: onTitleClick,
            children: [
              label2,
              `${required ? " *" : ""}`
            ]
          }
        ),
        children
      ]
    }
  );
  Block.defaultProps = {
    direction: "vertical",
    alignment: "start"
  };
  const container$b = "_container_14mbr_1";
  const inline = "_inline_14mbr_6";
  const dense = "_dense_14mbr_10";
  const column = "_column_14mbr_14";
  const row = "_row_14mbr_18";
  const columnReverse = "_columnReverse_14mbr_22";
  const rowReverse = "_rowReverse_14mbr_26";
  const startAlign = "_startAlign_14mbr_30";
  const endAlign = "_endAlign_14mbr_34";
  const stretchAlign = "_stretchAlign_14mbr_38";
  const endJustify = "_endJustify_14mbr_42";
  const centerJustify = "_centerJustify_14mbr_46";
  const spaceBetweenJustify = "_spaceBetweenJustify_14mbr_50";
  const css$w = {
    container: container$b,
    inline,
    dense,
    column,
    row,
    columnReverse,
    rowReverse,
    startAlign,
    endAlign,
    stretchAlign,
    endJustify,
    centerJustify,
    spaceBetweenJustify
  };
  const Stack = React.forwardRef(
    ({
      children,
      className,
      direction,
      dense: dense2,
      inline: inline2,
      alignItems,
      justifyContent,
      ...otherProps
    }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        className: classNames(css$w.container, className, {
          [css$w.dense]: dense2,
          [css$w.inline]: inline2,
          [css$w[direction]]: direction,
          [css$w[`${alignItems}Align`]]: alignItems,
          [css$w[`${justifyContent}Justify`]]: justifyContent
        }),
        ref,
        ...otherProps,
        children
      }
    )
  );
  Stack.defaultProps = {
    dense: false,
    inline: false,
    direction: "row",
    alignItems: "center",
    justifyContent: "start"
  };
  const up = "_up_17n5q_1";
  const left$2 = "_left_17n5q_5";
  const right$2 = "_right_17n5q_9";
  const css$v = {
    up,
    left: left$2,
    right: right$2
  };
  const Arrow = ({ direction = "down", className }) => /* @__PURE__ */ jsxRuntime.jsx(
    "svg",
    {
      className: classNames(css$v[direction], className),
      xmlns: "http://www.w3.org/2000/svg",
      x: "0px",
      y: "0px",
      width: "50",
      height: "50",
      viewBox: "0 0 32 32",
      children: /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M 4.21875 10.78125 L 2.78125 12.21875 L 15.28125 24.71875 L 16 25.40625 L 16.71875 24.71875 L 29.21875 12.21875 L 27.78125 10.78125 L 16 22.5625 Z" })
    }
  );
  const TreeContext = React.createContext({
    collapsedIcon: null,
    expandedIcon: null
  });
  const container$a = "_container_1masa_1";
  const tree = "_tree_1masa_8";
  const arrow = "_arrow_1masa_13";
  const css$u = {
    container: container$a,
    tree,
    arrow
  };
  const Tree = ({
    children,
    className,
    expandedIcon = /* @__PURE__ */ jsxRuntime.jsx(Arrow, { direction: "down", className: css$u.arrow }),
    collapsedIcon = /* @__PURE__ */ jsxRuntime.jsx(Arrow, { direction: "right", className: css$u.arrow }),
    ...rest
  }) => {
    const values = React.useMemo(
      () => ({
        expandedIcon,
        collapsedIcon
      }),
      [collapsedIcon, expandedIcon]
    );
    return /* @__PURE__ */ jsxRuntime.jsx(TreeContext.Provider, { value: values, children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: classNames(css$u.tree, className), ...rest, children: /* @__PURE__ */ jsxRuntime.jsx("ul", { className: css$u.container, children }) }) });
  };
  const node = "_node_1solv_1";
  const collapsed = "_collapsed_1solv_6";
  const leaf = "_leaf_1solv_10";
  const label$2 = "_label_1solv_11";
  const disabled$5 = "_disabled_1solv_16";
  const button = "_button_1solv_18";
  const icon = "_icon_1solv_32";
  const subtree = "_subtree_1solv_43";
  const nodeBlock = "_nodeBlock_1solv_60";
  const css$t = {
    node,
    collapsed,
    leaf,
    label: label$2,
    disabled: disabled$5,
    button,
    icon,
    subtree,
    nodeBlock
  };
  const TreeNode = ({
    children,
    className,
    label: label2,
    disabled: disabled2,
    expanded: expandedProp,
    onExpand,
    onCollapse
  }) => {
    const { expandedIcon, collapsedIcon } = React.useContext(TreeContext);
    const [expanded, setExpanded] = React.useState(expandedProp);
    const hasChildren = children && React.Children.count(children) > 0;
    React.useEffect(() => {
      setExpanded(expandedProp);
    }, [expandedProp]);
    const onButtonClick = React.useCallback(() => {
      const newState = !expanded;
      setExpanded(newState);
      if (newState) {
        onExpand == null ? void 0 : onExpand();
      } else {
        onCollapse == null ? void 0 : onCollapse();
      }
    }, [expanded, onCollapse, onExpand]);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "li",
      {
        className: classNames(className, css$t.node, {
          [css$t.leaf]: !hasChildren,
          [css$t.disabled]: disabled2
        }),
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs("div", { className: css$t.nodeBlock, children: [
            hasChildren && /* @__PURE__ */ jsxRuntime.jsx(
              Button,
              {
                size: "small",
                disabled: disabled2,
                variant: "text",
                title: expanded ? "Collapse" : "Expand",
                className: css$t.button,
                onClick: onButtonClick,
                children: expanded ? expandedIcon : collapsedIcon
              }
            ),
            /* @__PURE__ */ jsxRuntime.jsx("span", { className: css$t.label, children: label2 })
          ] }),
          hasChildren && /* @__PURE__ */ jsxRuntime.jsx(Collapse, { expanded, children: () => /* @__PURE__ */ jsxRuntime.jsx("ul", { className: css$t.subtree, children }) })
        ]
      }
    );
  };
  const xs = "_xs_1vu5j_1";
  const sm = "_sm_1vu5j_5";
  const md = "_md_1vu5j_9";
  const lg = "_lg_1vu5j_13";
  const xl = "_xl_1vu5j_17";
  const xxl = "_xxl_1vu5j_21";
  const css$s = {
    xs,
    sm,
    md,
    lg,
    xl,
    xxl
  };
  const VerticalSpacer = React.forwardRef(
    ({ space, className, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        className: classNames(className, {
          [css$s[space]]: true
        }),
        ref,
        ...rest
      }
    )
  );
  VerticalSpacer.defaultProps = {
    space: "md"
  };
  const SvgArrowEnd = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M 9.4140625 4 L 8 5.4140625 L 18.585938 16 L 8 26.585938 L 9.4140625 28 L 21 16.414062 L 21 28 L 23 28 L 23 4 L 21 4 L 21 15.585938 L 9.4140625 4 z" }));
  const SvgArrowNext = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M 12.96875 4.28125 L 11.53125 5.71875 L 21.8125 16 L 11.53125 26.28125 L 12.96875 27.71875 L 23.96875 16.71875 L 24.65625 16 L 23.96875 15.28125 Z" }));
  const SvgArrowPrevious = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M 19.03125 4.28125 L 8.03125 15.28125 L 7.34375 16 L 8.03125 16.71875 L 19.03125 27.71875 L 20.46875 26.28125 L 10.1875 16 L 20.46875 5.71875 Z" }));
  const SvgArrowStart = (props) => /* @__PURE__ */ React__namespace.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React__namespace.createElement("path", { d: "M 9 4 L 9 28 L 11 28 L 11 16.414062 L 22.585938 28 L 24 26.585938 L 13.414062 16 L 24 5.4140625 L 22.585938 4 L 11 15.585938 L 11 4 L 9 4 z" }));
  const PAGE_COUNT = 6;
  const FUZZY_RANGE = 3;
  function getPageRange(page2, totalPages) {
    let startPage = Math.max(page2 - FUZZY_RANGE, 0);
    let endPage = Math.min(page2 + FUZZY_RANGE, totalPages);
    if (startPage === 0 && endPage !== totalPages) {
      endPage = startPage + PAGE_COUNT;
    } else if (endPage === totalPages && startPage !== 0) {
      startPage = endPage - PAGE_COUNT;
    }
    return [startPage, endPage];
  }
  function getItemsRange(page2, perPage, totalItems) {
    const startItem = page2 * perPage + 1;
    const endOfPage = (page2 + 1) * perPage;
    const endItem = Math.min(endOfPage, totalItems);
    return [startItem, endItem];
  }
  const pager = "_pager_bw1ct_1";
  const page = "_page_bw1ct_1";
  const active$1 = "_active_bw1ct_14";
  const pagesContainer = "_pagesContainer_bw1ct_20";
  const pagerDisplayItems = "_pagerDisplayItems_bw1ct_25";
  const css$r = {
    pager,
    page,
    active: active$1,
    pagesContainer,
    pagerDisplayItems
  };
  const Pager = ({
    className,
    pageClassName,
    activePageClassName,
    pagesContainerClassName,
    page: page2,
    size,
    total,
    startArrow,
    endArrow,
    previousArrow,
    nextArrow,
    onPageChange,
    displayMode
  }) => {
    const pageCount = Math.ceil(total / size);
    const canPrevious = page2 !== 0;
    const canNext = page2 < pageCount - 1;
    const [startPage, endPage] = getPageRange(page2, pageCount - 1);
    const [startItem, endItem] = getItemsRange(page2, size, total);
    const previousPage = React.useCallback(() => {
      if (canPrevious) {
        onPageChange == null ? void 0 : onPageChange(page2 - 1);
      } else {
        onPageChange == null ? void 0 : onPageChange(0);
      }
    }, [canPrevious, page2, onPageChange]);
    const nextPage = React.useCallback(() => {
      if (canNext) {
        onPageChange == null ? void 0 : onPageChange(page2 + 1);
      } else {
        onPageChange == null ? void 0 : onPageChange(pageCount - 1);
      }
    }, [canNext, page2, onPageChange, pageCount]);
    if (pageCount === 1) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classNames(css$r.pager, className), children: [
      (displayMode === "items" || displayMode === "all") && /* @__PURE__ */ jsxRuntime.jsxs("div", { className: css$r.pagerDisplayItems, children: [
        pageCount === 1 && total > 0 && /* @__PURE__ */ jsxRuntime.jsxs(Text, { children: [
          "Showing ",
          total === 1 ? total : `all ${total.toLocaleString()}`,
          " ",
          /* @__PURE__ */ jsxRuntime.jsx(Pluralize, { count: total, singular: "item", showCount: false })
        ] }),
        pageCount > 1 && /* @__PURE__ */ jsxRuntime.jsx(Stack, { dense: true, children: /* @__PURE__ */ jsxRuntime.jsxs(Text, { children: [
          startItem.toLocaleString(),
          "-",
          endItem.toLocaleString(),
          " of",
          " ",
          /* @__PURE__ */ jsxRuntime.jsx(Pluralize, { count: total, singular: "item" })
        ] }) })
      ] }),
      startArrow && /* @__PURE__ */ jsxRuntime.jsx(
        Button,
        {
          variant: "text",
          size: "small",
          disablePadding: true,
          title: "First Page",
          onClick: () => onPageChange == null ? void 0 : onPageChange(0),
          disabled: !canPrevious,
          children: startArrow
        }
      ),
      /* @__PURE__ */ jsxRuntime.jsx(
        Button,
        {
          variant: "text",
          size: "small",
          disablePadding: true,
          title: "Previous page",
          onClick: previousPage,
          disabled: !canPrevious,
          children: previousArrow
        }
      ),
      (displayMode === "pages" || displayMode === "all") && /* @__PURE__ */ jsxRuntime.jsxs(
        "div",
        {
          className: classNames(css$r.pagesContainer, pagesContainerClassName),
          children: [
            startPage >= 2 && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$r.overflow, children: " ..." }),
            [...Array(pageCount)].map((_, i) => /* @__PURE__ */ jsxRuntime.jsx(React.Fragment, { children: i >= startPage && i <= endPage && /* @__PURE__ */ jsxRuntime.jsx(
              Button,
              {
                variant: "text",
                size: "small",
                disabled: page2 === i,
                title: `Page ${i + 1}`,
                className: classNames(
                  css$r.page,
                  {
                    [activePageClassName || css$r.active]: page2 === i
                  },
                  pageClassName
                ),
                onClick: () => onPageChange == null ? void 0 : onPageChange(i),
                children: (i + 1).toLocaleString()
              }
            ) }, i)),
            endPage <= pageCount - FUZZY_RANGE && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$r.overflow, children: "... " })
          ]
        }
      ),
      /* @__PURE__ */ jsxRuntime.jsx(
        Button,
        {
          variant: "text",
          title: "Next Page",
          size: "small",
          disablePadding: true,
          onClick: nextPage,
          disabled: !canNext,
          children: nextArrow
        }
      ),
      endArrow && /* @__PURE__ */ jsxRuntime.jsx(
        Button,
        {
          size: "small",
          title: "Last Page",
          disablePadding: true,
          variant: "text",
          onClick: () => onPageChange == null ? void 0 : onPageChange(pageCount - 1),
          disabled: !canNext,
          children: endArrow
        }
      )
    ] });
  };
  Pager.defaultProps = {
    previousArrow: /* @__PURE__ */ jsxRuntime.jsx(SvgArrowPrevious, {}),
    nextArrow: /* @__PURE__ */ jsxRuntime.jsx(SvgArrowNext, {}),
    startArrow: /* @__PURE__ */ jsxRuntime.jsx(SvgArrowStart, {}),
    endArrow: /* @__PURE__ */ jsxRuntime.jsx(SvgArrowEnd, {}),
    displayMode: "pages"
  };
  function getMonthNames(locale, format2 = "short") {
    const formatter = new Intl.DateTimeFormat(locale ?? navigator.language, {
      month: format2,
      timeZone: "UTC"
    });
    const months2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((month2) => {
      const mm = month2 < 10 ? `0${month2}` : month2;
      return /* @__PURE__ */ new Date(`2017-${mm}-01T00:00:00+00:00`);
    });
    return months2.map((date) => formatter.format(date));
  }
  const monthNames = getMonthNames();
  function getDayLabels(locale) {
    return Array.from(
      { length: 7 },
      (_, i) => new Intl.DateTimeFormat(locale ?? navigator.language, {
        weekday: "short"
      }).format(new Date(1970, 0, 4 + i))
      // 1970/01/04 is a Sunday
    );
  }
  const daysOfWeek = getDayLabels();
  function getWeeks(date, options = { format: "MM/dd/yyyy" }) {
    if (!date) {
      throw new Error("A date is required");
    } else if (!dateFns.isValid(date)) {
      console.warn("Invalid date - setting to today", date);
      date = /* @__PURE__ */ new Date();
    }
    const daysInMonth = dateFns.getDaysInMonth(date);
    let day2 = dateFns.startOfMonth(date);
    let offset = dateFns.getDay(day2);
    const numOfWeeks = Math.ceil((daysInMonth + offset) / 7);
    const weeks = Array.apply(null, {
      length: numOfWeeks
    }).map(() => []);
    const current = /* @__PURE__ */ new Date();
    const [firstWeek] = weeks;
    for (let i = offset; i > 0; i--) {
      const offsetDay = dateFns.subDays(day2, i);
      firstWeek.push({
        date: offsetDay,
        dayOfMonth: dateFns.getDate(offsetDay),
        isWeekendDay: dateFns.getISODay(offsetDay) > 5,
        isPreviousMonth: true,
        isNextMonth: false,
        isToday: false,
        formattedDate: dateFns.format(offsetDay, options.format)
      });
    }
    for (let i = 0, week2 = weeks[i]; i < numOfWeeks; i++, week2 = weeks[i]) {
      for (let dayOfWeek2 = offset; dayOfWeek2 < 7; dayOfWeek2++) {
        week2.push({
          date: day2,
          dayOfMonth: dateFns.getDate(day2),
          isPreviousMonth: false,
          isToday: dateFns.isSameDay(day2, current),
          isNextMonth: !dateFns.isSameMonth(day2, date),
          isWeekendDay: dateFns.getISODay(day2) > 5,
          formattedDate: dateFns.format(day2, options.format)
        });
        day2 = dateFns.addDays(day2, 1);
      }
      offset = 0;
    }
    return weeks;
  }
  function getDayAttributes(day2, current, hover, isRange) {
    let isActive = false;
    let isRangeStart = false;
    let isRangeEnd = false;
    const isInRange = (date, range2) => {
      const startDate = dateFns.min(range2);
      const endDate = dateFns.max(range2);
      return dateFns.isAfter(date, dateFns.addDays(startDate, -1)) && dateFns.isBefore(date, dateFns.addDays(endDate, 1));
    };
    const isSelectionStarted = Array.isArray(current) && dateFns.isValid(current[0]);
    const isSelectionComplete = isSelectionStarted && dateFns.isValid(current[1]);
    if (!isRange && dateFns.isValid(current)) {
      isActive = dateFns.isSameDay(day2, current);
    } else if (!isSelectionStarted) {
      isActive = dateFns.isSameDay(day2, hover);
      isRangeStart = isActive;
      isRangeEnd = isActive;
    } else if (isSelectionComplete) {
      isActive = isInRange(day2, current);
      isRangeStart = dateFns.isSameDay(day2, current[0]);
      isRangeEnd = dateFns.isSameDay(day2, current[1]);
    } else {
      const activeRange = [current[0], hover ?? current[0]];
      isActive = isInRange(day2, activeRange);
      isRangeStart = dateFns.isSameDay(day2, dateFns.min(activeRange));
      isRangeEnd = dateFns.isSameDay(day2, dateFns.max(activeRange));
    }
    return { isActive, isRangeStart, isRangeEnd };
  }
  function isNextWeekEmpty(day2, range2, hideNextMonth) {
    const nextWeek = dateFns.addDays(day2, 7);
    const nextWeekInRange = dateFns.isBefore(nextWeek, dateFns.max(range2)) || dateFns.isSameDay(nextWeek, dateFns.max(range2));
    return !(nextWeekInRange && (dateFns.isSameMonth(day2, nextWeek) || !hideNextMonth));
  }
  function isPreviousWeekEmpty(day2, range2, hidePrevMonth) {
    const prevWeek = dateFns.addDays(day2, -7);
    const prevWeekInRange = dateFns.isAfter(prevWeek, dateFns.min(range2)) || dateFns.isSameDay(prevWeek, dateFns.min(range2));
    return !(prevWeekInRange && (dateFns.isSameMonth(day2, prevWeek) || !hidePrevMonth));
  }
  const week = "_week_1owo4_1";
  const day = "_day_1owo4_10";
  const range$1 = "_range_1owo4_20";
  const outside = "_outside_1owo4_20";
  const selectedDay = "_selectedDay_1owo4_24";
  const startRangeDate = "_startRangeDate_1owo4_45";
  const roundStartDateBottom = "_roundStartDateBottom_1owo4_49";
  const endRangeDate = "_endRangeDate_1owo4_53";
  const roundEndDateTop = "_roundEndDateTop_1owo4_57";
  const weekLabels = "_weekLabels_1owo4_63";
  const dayOfWeek = "_dayOfWeek_1owo4_71";
  const css$q = {
    week,
    day,
    range: range$1,
    outside,
    selectedDay,
    startRangeDate,
    roundStartDateBottom,
    endRangeDate,
    roundEndDateTop,
    weekLabels,
    dayOfWeek
  };
  const CalendarDays = ({
    value,
    current,
    hover = null,
    isRange,
    disabled: disabled2,
    min: minLimit,
    max,
    animated,
    xAnimation = 0,
    showDayOfWeek,
    dayOfWeekLabels = daysOfWeek,
    hidePrevMonthDays,
    hideNextMonthDays,
    onChange,
    onHover
  }) => {
    const [hoveringDate, setHoveringDate] = React.useState(hover);
    const weeks = React.useMemo(() => getWeeks(value), [value]);
    const maxLimit = React.useMemo(() => max === "now" ? /* @__PURE__ */ new Date() : max, [max]);
    const renderDay = React.useCallback(
      (day2) => {
        if (day2.isPreviousMonth && hidePrevMonthDays || day2.isNextMonth && hideNextMonthDays) {
          return /* @__PURE__ */ jsxRuntime.jsx("div", {}, day2.dayOfMonth);
        }
        const handleHover = (value2) => {
          if (onHover) {
            onHover(value2);
          } else {
            setHoveringDate(value2);
          }
        };
        const isDisabled = disabled2 || minLimit && dateFns.isBefore(day2.date, minLimit) || maxLimit && dateFns.isAfter(day2.date, maxLimit);
        const currentHover = hover || hoveringDate;
        const { isActive, isRangeStart, isRangeEnd } = getDayAttributes(
          day2.date,
          current,
          currentHover,
          isRange
        );
        const hasNoRange = isRangeStart && isRangeEnd;
        const currentRange = Array.isArray(current) ? [current[0], current[1] ?? currentHover] : [current ?? hoveringDate, current ?? hoveringDate];
        const rangeConnectsBottom = isRangeStart && isNextWeekEmpty(day2.date, currentRange, hideNextMonthDays);
        const rangeConnectsTop = isRangeEnd && isPreviousWeekEmpty(day2.date, currentRange, hidePrevMonthDays);
        const colorVariant = isActive ? "primary" : "default";
        const buttonVariant = isActive ? "filled" : "text";
        return /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            className: classNames(css$q.day, {
              [css$q.outside]: day2.isNextMonth || day2.isPreviousMonth,
              [css$q.selectedDay]: !isRange && isActive,
              [css$q.range]: isRange && isActive,
              [css$q.startRangeDate]: isRange && isRangeStart,
              [css$q.roundStartDateBottom]: isRange && rangeConnectsBottom || hasNoRange,
              [css$q.endRangeDate]: isRange && isRangeEnd,
              [css$q.roundEndDateTop]: isRange && rangeConnectsTop || hasNoRange
            }),
            onMouseEnter: () => handleHover(day2.date),
            onMouseLeave: () => handleHover(null),
            variant: buttonVariant,
            color: colorVariant,
            disableMargins: true,
            disabled: isDisabled,
            title: day2.formattedDate,
            onClick: () => onChange(day2.date),
            children: day2.dayOfMonth
          },
          day2.formattedDate
        );
      },
      [
        disabled2,
        minLimit,
        maxLimit,
        current,
        hover,
        isRange,
        onChange,
        onHover,
        hoveringDate
      ]
    );
    return /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { mode: "popLayout", children: /* @__PURE__ */ jsxRuntime.jsxs(
      framerMotion.motion.div,
      {
        initial: { opacity: 0, x: xAnimation },
        animate: { opacity: 1, x: 0 },
        transition: {
          x: { type: animated ? "keyframes" : false },
          opacity: { duration: 0.2, type: animated ? "tween" : false }
        },
        children: [
          showDayOfWeek && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$q.weekLabels, children: dayOfWeekLabels.map((day2) => /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$q.dayOfWeek, children: day2.substring(0, 2) }, `day-${day2}`)) }),
          weeks.map((week2, i) => /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$q.week, children: week2.map(renderDay) }, `week-${i}`))
        ]
      },
      value.toString()
    ) });
  };
  const months = "_months_quk7b_1";
  const month = "_month_quk7b_1";
  const css$p = {
    months,
    month
  };
  const CalendarMonths = ({
    value,
    onChange
  }) => /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$p.months, children: monthNames.map((month2, i) => /* @__PURE__ */ jsxRuntime.jsx(
    Button,
    {
      className: css$p.month,
      variant: value === i ? "filled" : "text",
      disableMargins: true,
      title: month2,
      onClick: () => onChange(i),
      children: month2
    },
    month2
  )) });
  const years = "_years_188b7_1";
  const year = "_year_188b7_1";
  const css$o = {
    years,
    year
  };
  const CalendarYears = ({
    decadeStart,
    decadeEnd,
    value,
    animated,
    xAnimation = 0,
    onChange
  }) => {
    const years2 = React.useMemo(() => {
      const arr = [];
      const start = decadeStart.getFullYear();
      const end = decadeEnd.getFullYear();
      for (let i = start - 1; i < end + 2; i++) {
        arr.push(i);
      }
      return arr;
    }, [decadeEnd, decadeStart]);
    return /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { mode: "popLayout", children: /* @__PURE__ */ jsxRuntime.jsx(
      framerMotion.motion.div,
      {
        className: css$o.years,
        initial: { opacity: 0, x: xAnimation },
        animate: { opacity: 1, x: 0 },
        transition: {
          x: { type: animated ? "keyframes" : false },
          opacity: { duration: 0.2, type: animated ? "tween" : false }
        },
        children: years2.map((year2) => /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            className: css$o.year,
            variant: value === year2 ? "filled" : "text",
            disableMargins: true,
            title: year2,
            onClick: () => onChange(year2),
            children: year2
          },
          year2
        ))
      },
      `${decadeStart.toString()}-${decadeEnd.toString()}`
    ) });
  };
  const container$9 = "_container_1bnlb_1";
  const header$4 = "_header_1bnlb_4";
  const css$n = {
    container: container$9,
    header: header$4
  };
  const Calendar = ({
    min,
    max,
    value,
    disabled: disabled2,
    isRange,
    previousArrow,
    nextArrow,
    dateFormat,
    showDayOfWeek,
    animated,
    onChange,
    onViewChange
  }) => {
    const date = React.useMemo(
      () => Array.isArray(value) ? value[0] : value ?? /* @__PURE__ */ new Date(),
      [value]
    );
    const rangeStart = React.useMemo(
      () => isRange && Array.isArray(value) ? value == null ? void 0 : value[0] : void 0,
      [value]
    );
    const rangeEnd = React.useMemo(
      () => isRange && Array.isArray(value) ? value == null ? void 0 : value[1] : void 0,
      [value]
    );
    const [viewValue, setViewValue] = React.useState(date);
    const [monthValue, setMonthValue] = React.useState(dateFns.getMonth(date));
    const [yearValue, setYearValue] = React.useState(dateFns.getYear(date));
    const [decadeStart, setDecadeStart] = React.useState(dateFns.startOfDecade(date));
    const [decadeEnd, setDecadeEnd] = React.useState(dateFns.endOfDecade(date));
    const [view, setView] = React.useState("days");
    const [scrollDirection, setScrollDirection] = React.useState(null);
    const previousClickHandler = React.useCallback(() => {
      setScrollDirection("back");
      if (view === "days") {
        setViewValue(dateFns.sub(viewValue, { months: 1 }));
      } else if (view === "months") {
        setYearValue(yearValue - 1);
      } else {
        setDecadeStart(dateFns.subYears(decadeStart, 10));
        setDecadeEnd(dateFns.subYears(decadeEnd, 10));
      }
    }, [decadeEnd, decadeStart, view, viewValue, yearValue]);
    const nextClickHandler = React.useCallback(() => {
      setScrollDirection("forward");
      if (view === "days") {
        setViewValue(dateFns.add(viewValue, { months: 1 }));
      } else if (view === "months") {
        setYearValue(yearValue + 1);
      } else {
        setDecadeStart(dateFns.addYears(decadeStart, 10));
        setDecadeEnd(dateFns.addYears(decadeEnd, 10));
      }
    }, [decadeEnd, decadeStart, view, viewValue, yearValue]);
    const headerClickHandler = React.useCallback(() => {
      const newView = view === "days" ? "months" : "years";
      setScrollDirection(null);
      setView(newView);
      onViewChange == null ? void 0 : onViewChange(newView);
    }, [onViewChange, view]);
    const dateChangeHandler = React.useCallback(
      (date2) => {
        if (!isRange) {
          onChange == null ? void 0 : onChange(date2);
          setMonthValue(dateFns.getMonth(date2));
          setYearValue(dateFns.getYear(date2));
        } else if (!rangeStart) {
          onChange == null ? void 0 : onChange([date2, void 0]);
        } else if (!rangeEnd) {
          const range2 = [rangeStart, date2];
          onChange == null ? void 0 : onChange([dateFns.min(range2), dateFns.max(range2)]);
        } else {
          onChange == null ? void 0 : onChange([date2, void 0]);
        }
      },
      [isRange, onChange, rangeEnd, rangeStart]
    );
    const monthsChangeHandler = React.useCallback(
      (month2) => {
        setViewValue(dateFns.setMonth(dateFns.setYear(min || /* @__PURE__ */ new Date(), yearValue), month2));
        setMonthValue(month2);
        setView("days");
        onViewChange == null ? void 0 : onViewChange("days");
      },
      [min, yearValue, onViewChange]
    );
    const yearChangeHandler = React.useCallback(
      (year2) => {
        setViewValue(dateFns.setYear(min || /* @__PURE__ */ new Date(), year2));
        setYearValue(year2);
        setView("months");
        onViewChange == null ? void 0 : onViewChange("months");
      },
      [min, onViewChange]
    );
    const xAnimation = React.useMemo(() => {
      switch (scrollDirection) {
        case "forward":
          return "100%";
        case "back":
          return "-100%";
        default:
          return 0;
      }
    }, [scrollDirection]);
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: css$n.container, children: [
      /* @__PURE__ */ jsxRuntime.jsxs("header", { className: css$n.header, children: [
        /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            variant: "text",
            disabled: disabled2,
            onClick: previousClickHandler,
            disablePadding: true,
            children: previousArrow
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            disabled: disabled2,
            variant: "text",
            onClick: headerClickHandler,
            disablePadding: true,
            fullWidth: true,
            children: /* @__PURE__ */ jsxRuntime.jsxs(SmallHeading, { disableMargins: true, children: [
              view === "days" && new Intl.DateTimeFormat(navigator.language, {
                month: "long"
              }).format(viewValue),
              view === "months" && /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: yearValue }),
              view === "years" && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
                decadeStart.getFullYear(),
                "-",
                decadeEnd.getFullYear()
              ] })
            ] })
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx(
          Button,
          {
            variant: "text",
            disabled: disabled2,
            onClick: nextClickHandler,
            disablePadding: true,
            children: nextArrow
          }
        )
      ] }),
      /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { initial: false, mode: "wait", children: /* @__PURE__ */ jsxRuntime.jsxs(
        framerMotion.motion.div,
        {
          initial: { scale: 0, opacity: 0 },
          animate: { scale: 1, opacity: 1 },
          exit: { scale: 0, opacity: 1 },
          transition: {
            x: { type: animated ? "keyframes" : false },
            opacity: { duration: 0.2, type: animated ? "tween" : false },
            scale: { type: animated ? "tween" : false }
          },
          children: [
            view === "days" && /* @__PURE__ */ jsxRuntime.jsx(
              CalendarDays,
              {
                value: viewValue,
                min,
                max,
                disabled: disabled2,
                isRange,
                current: isRange ? [rangeStart, rangeEnd] : value,
                showDayOfWeek,
                xAnimation,
                animated,
                onChange: dateChangeHandler
              }
            ),
            view === "months" && /* @__PURE__ */ jsxRuntime.jsx(
              CalendarMonths,
              {
                value: monthValue,
                animated,
                onChange: monthsChangeHandler
              }
            ),
            view === "years" && /* @__PURE__ */ jsxRuntime.jsx(
              CalendarYears,
              {
                decadeStart,
                decadeEnd,
                animated,
                value: yearValue,
                xAnimation,
                onChange: yearChangeHandler
              }
            )
          ]
        },
        view
      ) })
    ] });
  };
  Calendar.defaultProps = {
    previousArrow: "←",
    nextArrow: "→",
    animated: true,
    dateFormat: "MMMM yyyy"
  };
  const container$8 = "_container_3rvg5_1";
  const header$3 = "_header_3rvg5_4";
  const monthLabel = "_monthLabel_3rvg5_11";
  const calendars = "_calendars_3rvg5_18";
  const css$m = {
    container: container$8,
    header: header$3,
    monthLabel,
    calendars
  };
  const CalendarRange = ({
    min,
    max,
    value,
    disabled: disabled2,
    previousArrow,
    previousYearArrow,
    nextArrow,
    nextYearArrow,
    dateFormat,
    showDayOfWeek,
    animated,
    onChange,
    monthsToDisplay,
    direction,
    ...rest
  }) => {
    const date = React.useMemo(
      () => Array.isArray(value) ? value[0] : /* @__PURE__ */ new Date(),
      [value]
    );
    const rangeStart = React.useMemo(() => value ? value[0] : void 0, [value]);
    const rangeEnd = React.useMemo(() => value ? value[1] : void 0, [value]);
    const [viewValue, setViewValue] = React.useState(date || /* @__PURE__ */ new Date());
    const [scrollDirection, setScrollDirection] = React.useState(null);
    const [hoveringDate, setHoveringDate] = React.useState(null);
    const displayMonths = Array.from(Array(monthsToDisplay).keys());
    const showPast = direction === "past";
    if (direction === "past") {
      displayMonths.reverse();
    }
    const dateChangeHandler = React.useCallback(
      (date2) => {
        if (!rangeStart) {
          onChange == null ? void 0 : onChange([date2, void 0]);
        } else if (!rangeEnd) {
          const range2 = [rangeStart, date2];
          onChange == null ? void 0 : onChange([dateFns.min(range2), dateFns.max(range2)]);
        } else {
          onChange == null ? void 0 : onChange([date2, void 0]);
        }
      },
      [onChange, rangeEnd, rangeStart]
    );
    const previousClickHandler = React.useCallback(() => {
      setScrollDirection("back");
      setViewValue(dateFns.sub(viewValue, { months: 1 }));
    }, [viewValue]);
    const previousYearClickHandler = React.useCallback(() => {
      setScrollDirection("back");
      setViewValue(dateFns.sub(viewValue, { years: 1 }));
    }, [viewValue]);
    const nextClickHandler = React.useCallback(() => {
      setScrollDirection("forward");
      setViewValue(dateFns.add(viewValue, { months: 1 }));
    }, [viewValue]);
    const nextYearClickHandler = React.useCallback(() => {
      setScrollDirection("forward");
      setViewValue(dateFns.add(viewValue, { years: 1 }));
    }, [viewValue]);
    const xAnimation = React.useMemo(() => {
      switch (scrollDirection) {
        case "forward":
          return "100%";
        case "back":
          return "-100%";
        default:
          return 0;
      }
    }, [scrollDirection]);
    return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: css$m.container, children: [
      /* @__PURE__ */ jsxRuntime.jsxs("header", { className: css$m.header, children: [
        /* @__PURE__ */ jsxRuntime.jsxs(Stack, { children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            Button,
            {
              variant: "text",
              disabled: disabled2,
              onClick: previousYearClickHandler,
              disablePadding: true,
              children: previousYearArrow
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            Button,
            {
              variant: "text",
              disabled: disabled2,
              onClick: previousClickHandler,
              disablePadding: true,
              children: previousArrow
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntime.jsx(SmallHeading, { className: css$m.monthLabel, disableMargins: true, children: displayMonths.map((i) => /* @__PURE__ */ jsxRuntime.jsx("span", { children: new Intl.DateTimeFormat(navigator.language, {
          month: "long"
        }).format(dateFns.addMonths(viewValue, showPast ? -i : i)) }, dateFns.addMonths(viewValue, showPast ? -i : i).toDateString())) }),
        /* @__PURE__ */ jsxRuntime.jsxs(Stack, { children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            Button,
            {
              variant: "text",
              disabled: disabled2,
              onClick: nextClickHandler,
              disablePadding: true,
              children: nextArrow
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            Button,
            {
              variant: "text",
              disabled: disabled2,
              onClick: nextYearClickHandler,
              disablePadding: true,
              children: nextYearArrow
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { initial: false, mode: "wait", children: /* @__PURE__ */ jsxRuntime.jsx(
        framerMotion.motion.div,
        {
          initial: { scale: 0, opacity: 0 },
          animate: { scale: 1, opacity: 1 },
          exit: { scale: 0, opacity: 1 },
          transition: {
            x: { type: animated ? "keyframes" : false },
            opacity: { duration: 0.2, type: animated ? "tween" : false },
            scale: { type: animated ? "tween" : false }
          },
          children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$m.calendars, children: displayMonths.map((offset, idx) => /* @__PURE__ */ jsxRuntime.jsx(React.Fragment, { children: /* @__PURE__ */ jsxRuntime.jsx(
            CalendarDays,
            {
              value: dateFns.addMonths(viewValue, showPast ? -offset : offset),
              min,
              max,
              disabled: disabled2,
              current: [rangeStart, rangeEnd],
              showDayOfWeek,
              xAnimation,
              animated,
              hover: hoveringDate,
              onHover: setHoveringDate,
              hidePrevMonthDays: idx > 0,
              hideNextMonthDays: idx < monthsToDisplay - 1,
              onChange: dateChangeHandler,
              isRange: true,
              ...rest
            }
          ) }, `calendar-${offset}`)) })
        }
      ) })
    ] });
  };
  CalendarRange.defaultProps = {
    previousArrow: "‹",
    nextArrow: "›",
    previousYearArrow: "«",
    nextYearArrow: "»",
    animated: true,
    dateFormat: "MMMM yyyy",
    range: [/* @__PURE__ */ new Date(), /* @__PURE__ */ new Date()],
    monthsToDisplay: 2,
    direction: "future"
  };
  const container$7 = "_container_1m42y_1";
  const label$1 = "_label_1m42y_6";
  const clickable$1 = "_clickable_1m42y_11";
  const check = "_check_1m42y_17";
  const checkbox = "_checkbox_1m42y_21";
  const small$5 = "_small_1m42y_27";
  const medium$5 = "_medium_1m42y_32";
  const large$5 = "_large_1m42y_37";
  const disabled$4 = "_disabled_1m42y_46";
  const css$l = {
    container: container$7,
    label: label$1,
    clickable: clickable$1,
    check,
    checkbox,
    small: small$5,
    medium: medium$5,
    large: large$5,
    disabled: disabled$4
  };
  const Checkbox = React.forwardRef(
    ({
      checked: checked2,
      intermediate,
      label: label2,
      disabled: disabled2,
      size,
      onChange,
      onBlur,
      className,
      containerClassName,
      labelClassName,
      ...rest
    }, ref) => {
      const theme = useTheme();
      const pathLength = framerMotion.useMotionValue(0);
      const opacity = framerMotion.useTransform(pathLength, [0.05, 0.15], [0, 1]);
      const checkVariants = {
        pressed: (isChecked) => ({ pathLength: isChecked ? 0.85 : 0.3 }),
        checked: { pathLength: 1 },
        unchecked: { pathLength: 0 }
      };
      const boxVariants = {
        hover: {
          strokeWidth: 1,
          stroke: theme.components.checkbox["checkbox-box-checked-stroke"]
        },
        pressed: { scale: 0.95 },
        checked: {
          stroke: theme.components.checkbox["checkbox-box-checked-stroke"]
        },
        unchecked: {
          stroke: theme.components.checkbox["checkbox-box-unchecked-stroke"]
        }
      };
      return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classNames(css$l.container, containerClassName), children: [
        /* @__PURE__ */ jsxRuntime.jsx(
          framerMotion.motion.div,
          {
            ...rest,
            ref,
            tabIndex: disabled2 ? -1 : 0,
            className: classNames(css$l.checkbox, className, {
              [css$l.disabled]: disabled2,
              [css$l.small]: size === "small",
              [css$l.medium]: size === "medium",
              [css$l.large]: size === "large"
            }),
            onClick: (e) => {
              if (!disabled2 && onChange) {
                e.stopPropagation();
                onChange(!checked2);
              }
            },
            onBlur,
            onKeyDown: (event) => {
              if (!disabled2 && onChange && event.code === "Space") {
                onChange(!checked2);
              }
            },
            children: /* @__PURE__ */ jsxRuntime.jsxs(
              framerMotion.motion.svg,
              {
                animate: checked2 ? "checked" : "unchecked",
                whileHover: !disabled2 ? "hover" : void 0,
                whileTap: !disabled2 ? "pressed" : void 0,
                viewBox: "0 0 16 16",
                children: [
                  /* @__PURE__ */ jsxRuntime.jsx(
                    framerMotion.motion.path,
                    {
                      d: "M 0 0 L 0 16 L 16 16 L 16 0 Z",
                      variants: boxVariants
                    }
                  ),
                  intermediate ? /* @__PURE__ */ jsxRuntime.jsx(
                    framerMotion.motion.path,
                    {
                      d: "M 5.36396 8.17792 L 10.6044 8.17792",
                      fill: "transparent",
                      strokeWidth: "1",
                      className: css$l.check,
                      variants: checkVariants,
                      style: { pathLength, opacity },
                      custom: checked2
                    }
                  ) : /* @__PURE__ */ jsxRuntime.jsx(
                    framerMotion.motion.path,
                    {
                      d: "M 5.36396 8.17792 L 7.34236 9.91424 L 10.6044 5.832",
                      fill: "transparent",
                      strokeWidth: "1",
                      className: css$l.check,
                      variants: checkVariants,
                      style: { pathLength, opacity },
                      custom: checked2
                    }
                  )
                ]
              }
            )
          }
        ),
        label2 && /* @__PURE__ */ jsxRuntime.jsx(
          "span",
          {
            className: classNames(css$l.label, labelClassName, {
              [css$l.clickable]: !disabled2 && onChange
            }),
            onClick: () => {
              if (!disabled2 && onChange) {
                onChange == null ? void 0 : onChange(!checked2);
              }
            },
            children: label2
          }
        )
      ] });
    }
  );
  Checkbox.defaultProps = {
    checked: false,
    intermediate: false,
    size: "medium"
  };
  const container$6 = "_container_1o1oi_1";
  const small$4 = "_small_1o1oi_14";
  const medium$4 = "_medium_1o1oi_18";
  const large$4 = "_large_1o1oi_22";
  const error$4 = "_error_1o1oi_32";
  const fullWidth$1 = "_fullWidth_1o1oi_36";
  const input$3 = "_input_1o1oi_39";
  const startAdornment = "_startAdornment_1o1oi_44";
  const endAdornment = "_endAdornment_1o1oi_45";
  const css$k = {
    container: container$6,
    small: small$4,
    medium: medium$4,
    large: large$4,
    error: error$4,
    fullWidth: fullWidth$1,
    input: input$3,
    startAdornment,
    endAdornment
  };
  const Input = React.forwardRef(
    ({
      className,
      containerClassname,
      error: error2,
      fullWidth: fullWidth2,
      selectOnFocus,
      start,
      end,
      autoFocus,
      disabled: disabled2,
      value,
      size,
      onFocus,
      onChange,
      onValueChange,
      ...rest
    }, ref) => {
      const containerRef = React.useRef(null);
      const inputRef = React.useRef(null);
      React.useImperativeHandle(ref, () => ({
        inputRef,
        containerRef,
        blur: () => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.blur();
        },
        focus: () => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.focus();
        },
        select: () => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.select();
        }
      }));
      React.useLayoutEffect(() => {
        if (autoFocus) {
          requestAnimationFrame(() => {
            var _a;
            return (_a = inputRef.current) == null ? void 0 : _a.focus();
          });
        }
      }, [autoFocus]);
      return /* @__PURE__ */ jsxRuntime.jsxs(
        "div",
        {
          className: classNames(css$k.container, containerClassname, {
            [css$k.fullWidth]: fullWidth2,
            [css$k.error]: error2,
            [css$k[size]]: size
          }),
          ref: containerRef,
          children: [
            start && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$k.startAdornment, children: start }),
            /* @__PURE__ */ jsxRuntime.jsx(
              "input",
              {
                ...rest,
                ref: inputRef,
                value,
                disabled: disabled2,
                className: classNames(className, css$k.input),
                onFocus: (event) => {
                  if (selectOnFocus) {
                    event.target.select();
                  }
                  onFocus == null ? void 0 : onFocus(event);
                },
                onChange: (event) => {
                  onValueChange == null ? void 0 : onValueChange(event.target.value);
                  onChange == null ? void 0 : onChange(event);
                }
              }
            ),
            end && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$k.endAdornment, children: end })
          ]
        }
      );
    }
  );
  Input.defaultProps = {
    size: "medium"
  };
  const input$2 = "_input_el63h_1";
  const css$j = {
    input: input$2
  };
  const InlineInput = React.forwardRef(
    ({ inputClassName, placeholderIsMinWidth = true, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      AutosizeInput,
      {
        inputRef: ref,
        inputClassName: classNames(css$j.input, inputClassName),
        placeholderIsMinWidth,
        ...rest
      }
    )
  );
  const DebouncedInput = React.forwardRef(
    ({ debounce, value, onChange, onValueChange, ...rest }, ref) => {
      const timeoutRef = React.useRef(null);
      const [internalValue, setInternalValue] = React.useState(value);
      React.useEffect(() => {
        setInternalValue(value);
      }, [value]);
      return /* @__PURE__ */ jsxRuntime.jsx(
        Input,
        {
          ...rest,
          ref,
          value: internalValue,
          onKeyDown: (event) => {
            if (event.key === "Enter") {
              onValueChange == null ? void 0 : onValueChange(event.target.value);
              onChange == null ? void 0 : onChange(event);
            }
          },
          onChange: (event) => {
            setInternalValue(event.target.value);
            if (debounce) {
              clearTimeout(timeoutRef.current);
              timeoutRef.current = setTimeout(() => {
                onValueChange == null ? void 0 : onValueChange(event.target.value);
                onChange == null ? void 0 : onChange(event);
              }, debounce);
            } else {
              onValueChange == null ? void 0 : onValueChange(event.target.value);
              onChange == null ? void 0 : onChange(event);
            }
          }
        }
      );
    }
  );
  DebouncedInput.defaultProps = {
    debounce: 100
  };
  const container$5 = "_container_1v4a3_1";
  const label = "_label_1v4a3_6";
  const clickable = "_clickable_1v4a3_12";
  const radio = "_radio_1v4a3_18";
  const indicator = "_indicator_1v4a3_33";
  const checked$1 = "_checked_1v4a3_38";
  const small$3 = "_small_1v4a3_42";
  const medium$3 = "_medium_1v4a3_52";
  const large$3 = "_large_1v4a3_62";
  const disabled$3 = "_disabled_1v4a3_72";
  const css$i = {
    container: container$5,
    label,
    clickable,
    radio,
    indicator,
    checked: checked$1,
    small: small$3,
    medium: medium$3,
    large: large$3,
    disabled: disabled$3
  };
  const RadioGroupContext = React.createContext({
    onChange: null,
    selectedValue: null
  });
  const VARIANTS = {
    check: { opacity: 1, scale: 1 },
    uncheck: { opacity: 0, scale: 0 }
  };
  const Radio = React.forwardRef(
    ({
      checked: isRadioChecked,
      label: label2,
      disabled: disabled2,
      onChange,
      onBlur,
      className,
      size,
      value,
      ...rest
    }, ref) => {
      const { onChange: onGroupValueChange, selectedValue } = React.useContext(RadioGroupContext);
      const checked2 = React.useMemo(() => {
        if (selectedValue === null) {
          return isRadioChecked;
        } else {
          return selectedValue === value;
        }
      }, [isRadioChecked, selectedValue, value]);
      const onValueChange = (checked22) => {
        onGroupValueChange == null ? void 0 : onGroupValueChange(value);
        onChange == null ? void 0 : onChange(checked22);
      };
      return /* @__PURE__ */ jsxRuntime.jsxs("div", { className: classNames(css$i.container, className), children: [
        /* @__PURE__ */ jsxRuntime.jsx(
          "div",
          {
            ...rest,
            ref,
            tabIndex: 0,
            className: classNames(css$i.radio, {
              [css$i.disabled]: disabled2,
              [css$i.checked]: checked2,
              [css$i[size]]: true
            }),
            onClick: () => {
              if (!disabled2) {
                onValueChange(!checked2);
              }
            },
            onBlur,
            onKeyDown: (event) => {
              if (!disabled2 && event.code === "Space") {
                onValueChange(!checked2);
              }
            },
            children: /* @__PURE__ */ jsxRuntime.jsx(
              framerMotion.motion.div,
              {
                className: css$i.indicator,
                initial: !disabled2 ? { opacity: 0, scale: 0.5 } : {},
                variants: VARIANTS,
                animate: checked2 ? "check" : "uncheck",
                transition: { duration: 0.15 }
              }
            )
          }
        ),
        label2 && /* @__PURE__ */ jsxRuntime.jsx(
          "span",
          {
            className: classNames(css$i.label, {
              [css$i.clickable]: !disabled2
            }),
            onClick: () => {
              if (!disabled2) {
                onValueChange(!checked2);
              }
            },
            children: label2
          }
        )
      ] });
    }
  );
  Radio.defaultProps = {
    size: "medium"
  };
  const RadioGroup = ({
    children,
    className,
    onChange,
    selectedValue: defaultValue
  }) => {
    const [selectedValue, setSelectedValue] = React.useState(defaultValue);
    const handleValueChange = React.useCallback(
      (value) => {
        setSelectedValue(value);
        onChange(value);
      },
      [onChange]
    );
    const values = React.useMemo(
      () => ({
        onChange: handleValueChange,
        selectedValue
      }),
      [handleValueChange, selectedValue]
    );
    return /* @__PURE__ */ jsxRuntime.jsx(RadioGroupContext.Provider, { value: values, children });
  };
  const range = "_range_16tdb_1";
  const handleDrag = "_handleDrag_16tdb_10";
  const handle$1 = "_handle_16tdb_10";
  const tooltip$1 = "_tooltip_16tdb_34";
  const rangeHighlight = "_rangeHighlight_16tdb_47";
  const rangeDisabled = "_rangeDisabled_16tdb_53";
  const css$h = {
    range,
    handleDrag,
    handle: handle$1,
    tooltip: tooltip$1,
    rangeHighlight,
    rangeDisabled
  };
  const RangeTooltip = ({ children, visible }) => /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { children: visible && /* @__PURE__ */ jsxRuntime.jsx(
    framerMotion.motion.div,
    {
      className: css$h.tooltip,
      initial: {
        opacity: 0,
        scale: 0.3,
        translateX: "-50%"
      },
      animate: {
        opacity: 1,
        scale: 1
      },
      exit: { opacity: 0, scale: 0.3 },
      children
    }
  ) });
  const RangeDouble = ({
    disabled: disabled2,
    style,
    className,
    handleClassName,
    min,
    max,
    value,
    onChange,
    step = 1
  }) => {
    const minValueBetween = step;
    const [minValue, maxValue] = value;
    const initialMinValue = Math.max(minValue, min);
    const initalMaxValue = Math.min(
      maxValue < initialMinValue + minValueBetween ? initialMinValue + minValueBetween : maxValue,
      max
    );
    const [currentMin, setCurrentMin] = React.useState(initialMinValue);
    const [currentMax, setCurrentMax] = React.useState(initalMaxValue);
    const range2 = React.useRef(null);
    const [rangeWidth, setRangeWidth] = React.useState(0);
    const [rangeLeft, setRangeLeft] = React.useState(0);
    const minX = framerMotion.useMotionValue(0);
    const maxX = framerMotion.useMotionValue(0);
    const fractionDigits = React.useMemo(
      () => {
        var _a, _b;
        return ((_b = (_a = step.toString()) == null ? void 0 : _a[1]) == null ? void 0 : _b.length) || 0;
      },
      [step]
    );
    const getValue = (xPosition) => {
      const draggedWidth = xPosition - rangeLeft;
      const draggedWidthPercentage = draggedWidth * 100 / rangeWidth;
      const scaledStep = step / (max - min) * 100;
      const scaledValue = Math.round(draggedWidthPercentage / scaledStep) * scaledStep;
      const scaledValueWithStep = scaledValue / 100 * (max - min) + min;
      const rawValue = Math.round(scaledValueWithStep / step) * step;
      const newValue = fractionDigits > 0 ? +rawValue.toFixed(fractionDigits) : rawValue;
      return Math.max(min, Math.min(newValue, max));
    };
    const getPosition = React.useCallback(
      (value2) => (value2 - min) / (max - min) * rangeWidth,
      [min, max, rangeWidth]
    );
    const minSpaceBetween = getPosition(min + minValueBetween);
    const updateCurrentMin = React.useCallback(
      (newMin, notifyChange = false) => {
        newMin = Math.max(newMin, min);
        if (newMin <= currentMax - minValueBetween) {
          setCurrentMin(newMin);
          minX.set(getPosition(newMin));
          notifyChange && (onChange == null ? void 0 : onChange([newMin, currentMax]));
        }
      },
      [currentMax, min, minX, getPosition, onChange, minValueBetween]
    );
    const updateCurrentMax = React.useCallback(
      (newMax, notifyChange = false) => {
        newMax = Math.min(newMax, max);
        if (newMax >= currentMin + minValueBetween) {
          setCurrentMax(newMax);
          maxX.set(getPosition(newMax));
          notifyChange && (onChange == null ? void 0 : onChange([currentMin, newMax]));
        }
      },
      [currentMin, max, maxX, getPosition, onChange, minValueBetween]
    );
    React.useEffect(() => {
      const rect = range2.current.getBoundingClientRect();
      setRangeWidth(rect.width);
      setRangeLeft(rect.left);
      minX.set(getPosition(currentMin));
      maxX.set(getPosition(currentMax));
    }, [range2, currentMin, minX, currentMax, maxX, getPosition]);
    React.useEffect(() => {
      setCurrentMin(initialMinValue);
      setCurrentMax(initalMaxValue);
    }, [initalMaxValue, initialMinValue]);
    const [draggingMin, setDraggingMin] = React.useState(false);
    const [focusedMin, setFocusedMin] = React.useState(false);
    const [hoveringMin, setHoveringMin] = React.useState(false);
    const minTooltipVisible = draggingMin || focusedMin || hoveringMin;
    const minPercentage = (currentMin - min) / (max - min) * 100;
    const [draggingMax, setDraggingMax] = React.useState(false);
    const [focusedMax, setFocusedMax] = React.useState(false);
    const [hoveringMax, setHoveringMax] = React.useState(false);
    const maxTooltipVisible = draggingMax || focusedMax || hoveringMax;
    const maxPercentage = (currentMax - min) / (max - min) * 100;
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        style,
        ref: range2,
        className: classNames([css$h.range, className], {
          [css$h.rangeDisabled]: disabled2
        }),
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs(
            framerMotion.motion.div,
            {
              className: classNames(css$h.handleDrag, handleClassName, {
                [css$h.handleDragHighlight]: minTooltipVisible
              }),
              drag: !disabled2 ? "x" : null,
              dragMomentum: false,
              style: { x: minX },
              onMouseEnter: () => setHoveringMin(true),
              onMouseLeave: () => setHoveringMin(false),
              onDragStart: () => setDraggingMin(true),
              onDrag: (e) => updateCurrentMin(getValue(e.clientX)),
              onDragEnd: (e) => {
                updateCurrentMin(getValue(e.clientX), true);
                setDraggingMin(false);
              },
              dragConstraints: {
                left: 0,
                right: maxX.get() - minSpaceBetween
              },
              dragElastic: false,
              children: [
                /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$h.handle, children: /* @__PURE__ */ jsxRuntime.jsx(
                  "input",
                  {
                    type: "range",
                    min,
                    max,
                    value: currentMin,
                    onChange: (e) => updateCurrentMin(e.target.valueAsNumber),
                    onBlur: () => setFocusedMin(false),
                    onFocus: () => setFocusedMin(true),
                    disabled: disabled2
                  }
                ) }),
                /* @__PURE__ */ jsxRuntime.jsx(RangeTooltip, { visible: minTooltipVisible, children: currentMin })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsxs(
            framerMotion.motion.div,
            {
              className: classNames(css$h.handleDrag, {
                [css$h.handleDragHighlight]: maxTooltipVisible
              }),
              drag: !disabled2 ? "x" : null,
              dragMomentum: false,
              style: { x: maxX },
              onMouseEnter: () => setHoveringMax(true),
              onMouseLeave: () => setHoveringMax(false),
              onDragStart: () => setDraggingMax(true),
              onDrag: (e) => updateCurrentMax(getValue(e.clientX)),
              onDragEnd: (e) => {
                updateCurrentMax(getValue(e.clientX), true);
                setDraggingMax(false);
              },
              dragConstraints: {
                left: minX.get() + minSpaceBetween,
                right: rangeWidth
              },
              dragElastic: false,
              children: [
                /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$h.handle, children: /* @__PURE__ */ jsxRuntime.jsx(
                  "input",
                  {
                    type: "range",
                    min,
                    max,
                    value: currentMax,
                    onChange: (e) => updateCurrentMax(e.target.valueAsNumber),
                    onBlur: () => setFocusedMax(false),
                    onFocus: () => setFocusedMax(true),
                    disabled: disabled2
                  }
                ) }),
                /* @__PURE__ */ jsxRuntime.jsx(RangeTooltip, { visible: maxTooltipVisible, children: currentMax })
              ]
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            "div",
            {
              className: css$h.rangeHighlight,
              style: {
                width: `${maxPercentage - minPercentage}%`,
                marginLeft: `${minPercentage}%`
              }
            }
          )
        ]
      }
    );
  };
  const RangeSingle = ({
    disabled: disabled2,
    style,
    handleClassName,
    onChange,
    className,
    min,
    max,
    value,
    step = 1
  }) => {
    const [currentValue, setCurrentValue] = React.useState(value);
    const range2 = React.useRef(null);
    const [rangeWidth, setRangeWidth] = React.useState(0);
    const [rangeLeft, setRangeLeft] = React.useState(0);
    const valueX = framerMotion.useMotionValue(0);
    const fractionDigits = React.useMemo(
      () => {
        var _a, _b;
        return ((_b = (_a = step.toString()) == null ? void 0 : _a[1]) == null ? void 0 : _b.length) || 0;
      },
      [step]
    );
    const getValue = (xPosition) => {
      const draggedWidth = xPosition - rangeLeft;
      const draggedWidthPercentage = draggedWidth * 100 / rangeWidth;
      const scaledStep = step / (max - min) * 100;
      const scaledValue = Math.round(draggedWidthPercentage / scaledStep) * scaledStep;
      const rawValue = min + (max - min) * scaledValue / 100;
      const newValue = fractionDigits > 0 ? +rawValue.toFixed(fractionDigits) : rawValue;
      return Math.max(min, Math.min(newValue, max));
    };
    const getPosition = React.useCallback(
      (value2) => (value2 - min) / (max - min) * rangeWidth,
      [min, max, rangeWidth]
    );
    const updateCurrentValue = React.useCallback(
      (newValue) => {
        newValue = Math.max(newValue, min);
        newValue = Math.min(newValue, max);
        setCurrentValue(newValue);
        valueX.set(getPosition(newValue));
        onChange == null ? void 0 : onChange(newValue);
      },
      [min, max, valueX, getPosition, onChange]
    );
    React.useEffect(() => {
      var _a, _b;
      setRangeWidth(range2.current.offsetWidth);
      setRangeLeft(((_b = (_a = range2.current) == null ? void 0 : _a.getBoundingClientRect()) == null ? void 0 : _b.left) || 0);
      valueX.set(getPosition(currentValue));
    }, [range2, currentValue, valueX, getPosition]);
    const [dragging, setDragging] = React.useState(false);
    const [hovering, setHovering] = React.useState(false);
    const [focused, setFocused] = React.useState(false);
    const tooltipVisible = dragging || focused || hovering;
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        ref: range2,
        style,
        className: classNames([css$h.range, className], {
          [css$h.rangeDisabled]: disabled2
        }),
        children: /* @__PURE__ */ jsxRuntime.jsxs(
          framerMotion.motion.div,
          {
            className: classNames(css$h.handleDrag, handleClassName, {
              [css$h.handleDragHighlight]: tooltipVisible
            }),
            drag: !disabled2 ? "x" : null,
            dragMomentum: false,
            style: { x: valueX },
            onMouseEnter: () => setHovering(true),
            onMouseLeave: () => setHovering(false),
            onDragStart: () => setDragging(true),
            onDrag: (e) => updateCurrentValue(getValue(e.clientX)),
            onDragEnd: (e) => {
              updateCurrentValue(getValue(e.clientX));
              setDragging(false);
            },
            dragConstraints: {
              left: 0,
              right: rangeWidth
            },
            children: [
              /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$h.handle, children: /* @__PURE__ */ jsxRuntime.jsx(
                "input",
                {
                  type: "range",
                  min,
                  max,
                  step: 0.5,
                  value: currentValue,
                  disabled: disabled2,
                  onChange: (e) => updateCurrentValue(e.target.valueAsNumber),
                  onBlur: () => setFocused(false),
                  onFocus: () => setFocused(true)
                }
              ) }),
              /* @__PURE__ */ jsxRuntime.jsx(RangeTooltip, { visible: tooltipVisible, children: currentValue })
            ]
          }
        )
      }
    );
  };
  const container$4 = "_container_1o7j1_1";
  const small$2 = "_small_1o7j1_9";
  const medium$2 = "_medium_1o7j1_15";
  const large$2 = "_large_1o7j1_21";
  const css$g = {
    container: container$4,
    small: small$2,
    medium: medium$2,
    large: large$2
  };
  const DotsLoader = ({ className, size, speed }) => /* @__PURE__ */ jsxRuntime.jsx(
    framerMotion.motion.div,
    {
      className: classNames(className, css$g.container, {
        [css$g.small]: size === "small",
        [css$g.medium]: size === "medium",
        [css$g.large]: size === "large"
      }),
      children: [...Array(3)].map((_, i) => /* @__PURE__ */ jsxRuntime.jsx(
        framerMotion.motion.div,
        {
          animate: {
            opacity: [0, 1, 0],
            scale: [1, 2, 2, 1, 1]
          },
          transition: {
            duration: speed * 4,
            ease: "easeInOut",
            times: [0, 0.2, 0.5, 0.8, 1],
            repeat: Infinity,
            repeatDelay: speed,
            delay: speed * i
          }
        },
        i
      ))
    }
  );
  DotsLoader.defaultProps = {
    speed: 0.2,
    size: "medium"
  };
  const tag = "_tag_sipe1_1";
  const disabled$2 = "_disabled_sipe1_17";
  const css$f = {
    tag,
    disabled: disabled$2
  };
  const SelectInputChip = ({
    option: option2,
    disabled: disabled2,
    clearable,
    className,
    maxLength,
    closeIcon,
    onTagKeyDown,
    onSelectedChange
  }) => {
    const origLabel = option2.inputLabel || option2.children;
    const label2 = typeof origLabel === "string" ? ellipsize(origLabel, maxLength) : origLabel;
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "span",
      {
        className: classNames(css$f.tag, className, "select-input-chip"),
        title: origLabel,
        tabIndex: -1,
        onKeyDown: (event) => onTagKeyDown(event, option2),
        children: [
          label2,
          !disabled2 && clearable && /* @__PURE__ */ jsxRuntime.jsx("button", { type: "button", onClick: () => onSelectedChange(option2), children: closeIcon })
        ]
      }
    );
  };
  SelectInputChip.defaultProps = {
    closeIcon: /* @__PURE__ */ jsxRuntime.jsx(CloseIcon, {}),
    maxLength: 20
  };
  const container$3 = "_container_umshi_1";
  const open = "_open_umshi_12";
  const disabled$1 = "_disabled_umshi_17";
  const expand = "_expand_umshi_22";
  const input$1 = "_input_umshi_23";
  const unfilterable = "_unfilterable_umshi_28";
  const error$3 = "_error_umshi_34";
  const inputContainer = "_inputContainer_umshi_38";
  const single = "_single_umshi_71";
  const prefix = "_prefix_umshi_72";
  const multiple = "_multiple_umshi_95";
  const suffix = "_suffix_umshi_109";
  const loader = "_loader_umshi_119";
  const btn = "_btn_umshi_125";
  const refresh = "_refresh_umshi_151";
  const close$1 = "_close_umshi_152";
  const css$e = {
    container: container$3,
    open,
    disabled: disabled$1,
    expand,
    input: input$1,
    unfilterable,
    error: error$3,
    inputContainer,
    single,
    prefix,
    multiple,
    suffix,
    loader,
    btn,
    refresh,
    close: close$1
  };
  const horiztonalArrowKeys = ["ArrowLeft", "ArrowRight"];
  const verticalArrowKeys = ["ArrowUp", "ArrowDown"];
  const actionKeys = [...verticalArrowKeys, "Enter", "Escape"];
  const SelectInput = ({
    reference,
    autoFocus,
    selectedOption,
    disabled: disabled2,
    placeholder,
    filterable,
    fontSize,
    id,
    name,
    className,
    activeClassName,
    inputText,
    required,
    loading,
    clearable,
    multiple: multiple2,
    refreshable,
    error: error2,
    menuDisabled,
    menuOpen,
    refreshIcon,
    closeIcon,
    expandIcon,
    loadingIcon,
    closeOnSelect,
    onSelectedChange,
    onKeyDown,
    onKeyUp,
    onExpandClick,
    onInputChange,
    onFocus,
    onBlur,
    onRefresh,
    chip: chip2
  }) => {
    const containerRef = React.useRef(null);
    const inputRef = React.useRef(null);
    const hasValue2 = multiple2 && (selectedOption == null ? void 0 : selectedOption.length) > 0 || !multiple2 && selectedOption;
    const placeholderText = hasValue2 ? "" : placeholder;
    const showClear = clearable && !disabled2 && hasValue2;
    React.useImperativeHandle(reference, () => ({
      containerRef,
      inputRef,
      focus: () => focusInput()
    }));
    const inputTextValue = React.useMemo(() => {
      if (!inputText && hasValue2) {
        if (!Array.isArray(selectedOption)) {
          const singleOption = selectedOption;
          if (!singleOption.inputLabel) {
            return singleOption.children;
          }
        }
        return "";
      }
      return inputText;
    }, [hasValue2, inputText, selectedOption]);
    const onClearValues = React.useCallback(
      (event) => {
        if (closeOnSelect) {
          event.stopPropagation();
        }
        onSelectedChange(null);
      },
      [onSelectedChange, closeOnSelect]
    );
    const focusInput = React.useCallback(() => {
      const input2 = inputRef.current;
      if (input2) {
        if (input2.value) {
          const len = input2.value.length;
          setTimeout(() => input2.setSelectionRange(len, len));
          input2.focus();
        } else {
          input2.focus();
        }
      }
    }, []);
    const onInputFocus = React.useCallback(
      (event) => {
        if (!multiple2 && filterable && selectedOption) {
          event.preventDefault();
          event.stopPropagation();
          focusInput();
        }
        onFocus == null ? void 0 : onFocus(event);
      },
      [filterable, focusInput, multiple2, onFocus, selectedOption]
    );
    const onContainerClick = React.useCallback(
      (event) => {
        if (!disabled2) {
          focusInput();
        }
      },
      [disabled2, focusInput]
    );
    const removeLastValue = React.useCallback(() => {
      if (multiple2) {
        const selectedOptions = selectedOption;
        onSelectedChange(selectedOptions[selectedOptions.length - 1]);
      } else {
        onSelectedChange(null);
      }
    }, [multiple2, onSelectedChange, selectedOption]);
    const onInputKeyDown = React.useCallback(
      (event) => {
        const key = event.key;
        const isActionKey = actionKeys.includes(key);
        if (isActionKey) {
          event.preventDefault();
          event.stopPropagation();
        }
        if (clearable && key === "Backspace" && hasValue2) {
          if (!multiple2 || multiple2 && !inputText) {
            event.preventDefault();
            event.stopPropagation();
            removeLastValue();
          }
        }
        onKeyDown == null ? void 0 : onKeyDown(event);
      },
      [clearable, hasValue2, inputText, multiple2, onKeyDown, removeLastValue]
    );
    const onInputKeyUp = React.useCallback(
      (event) => {
        const key = event.key;
        const isActionKey = actionKeys.includes(key);
        const isHorzKey = horiztonalArrowKeys.includes(key);
        if (!filterable && !isActionKey || isHorzKey) {
          event.preventDefault();
          event.stopPropagation();
        } else {
          onKeyUp == null ? void 0 : onKeyUp(event);
        }
      },
      [filterable, onKeyUp]
    );
    const onChange = React.useCallback(
      (event) => {
        if (filterable) {
          onInputChange(event);
        }
      },
      [filterable, onInputChange]
    );
    const onTagKeyDown = React.useCallback(
      (event, option2) => {
        const key = event.key;
        if (key === "Backspace" && !disabled2 && clearable) {
          onSelectedChange(option2);
        }
      },
      [clearable, disabled2, onSelectedChange]
    );
    const renderPrefix = React.useCallback(() => {
      if (multiple2) {
        const multipleOptions = selectedOption;
        if (multipleOptions == null ? void 0 : multipleOptions.length) {
          return /* @__PURE__ */ jsxRuntime.jsx("div", { className: classNames(css$e.prefix, "select-input-value"), children: multipleOptions.map((option2) => /* @__PURE__ */ jsxRuntime.jsx(
            rdk.CloneElement,
            {
              element: chip2,
              option: option2,
              clearable,
              disabled: disabled2,
              closeIcon,
              onSelectedChange,
              onTagKeyDown
            },
            option2.value
          )) });
        }
      } else {
        const singleOption = selectedOption;
        if ((singleOption == null ? void 0 : singleOption.inputLabel) && !inputText) {
          return /* @__PURE__ */ jsxRuntime.jsx("div", { className: classNames(css$e.prefix, "select-input-value"), children: singleOption == null ? void 0 : singleOption.inputLabel });
        }
      }
      return null;
    }, [
      chip2,
      clearable,
      closeIcon,
      disabled2,
      inputText,
      multiple2,
      onSelectedChange,
      onTagKeyDown,
      selectedOption
    ]);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        ref: containerRef,
        className: classNames(css$e.container, "select-input", className, {
          [css$e.disabled]: disabled2,
          [css$e.unfilterable]: !filterable,
          [css$e.error]: error2,
          [css$e.single]: !multiple2,
          [css$e.multiple]: multiple2,
          [css$e.open]: menuOpen,
          [activeClassName]: menuOpen
        }),
        onClick: onContainerClick,
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs("div", { className: css$e.inputContainer, onClick: onInputFocus, children: [
            renderPrefix(),
            /* @__PURE__ */ jsxRuntime.jsx(
              InlineInput,
              {
                inputRef: (el) => inputRef.current = el,
                id,
                style: { fontSize },
                name,
                disabled: disabled2,
                required,
                autoFocus,
                placeholder: placeholderText,
                inputClassName: classNames(css$e.input, "select-input-input"),
                value: inputTextValue,
                autoCorrect: "off",
                spellCheck: "false",
                autoComplete: "off",
                onKeyDown: onInputKeyDown,
                onKeyUp: onInputKeyUp,
                onChange,
                onFocus: onInputFocus,
                onBlur,
                placeholderIsMinWidth: false
              }
            )
          ] }),
          /* @__PURE__ */ jsxRuntime.jsxs("div", { className: css$e.suffix, children: [
            refreshable && !loading && /* @__PURE__ */ jsxRuntime.jsx(
              "button",
              {
                type: "button",
                title: "Refresh Options",
                disabled: disabled2,
                className: classNames(css$e.refresh, css$e.btn, "select-input-refresh"),
                onClick: onRefresh,
                children: refreshIcon
              }
            ),
            loading && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$e.loader, children: loadingIcon }),
            showClear && /* @__PURE__ */ jsxRuntime.jsx(
              "button",
              {
                type: "button",
                title: "Clear selection",
                disabled: disabled2,
                className: classNames(css$e.close, css$e.btn, "select-input-clear"),
                onClick: onClearValues,
                children: closeIcon
              }
            ),
            !menuDisabled && /* @__PURE__ */ jsxRuntime.jsx(
              "button",
              {
                type: "button",
                title: "Toggle options menu",
                disabled: disabled2,
                className: classNames(css$e.expand, css$e.btn, "select-input-toggle"),
                onClick: onExpandClick,
                tabIndex: -1,
                children: expandIcon
              }
            )
          ] })
        ]
      }
    );
  };
  SelectInput.defaultProps = {
    fontSize: 13,
    expandIcon: /* @__PURE__ */ jsxRuntime.jsx(DownArrowIcon, {}),
    closeIcon: /* @__PURE__ */ jsxRuntime.jsx(CloseIcon, {}),
    refreshIcon: /* @__PURE__ */ jsxRuntime.jsx(RefreshIcon, {}),
    loadingIcon: /* @__PURE__ */ jsxRuntime.jsx(DotsLoader, { size: "small" }),
    chip: /* @__PURE__ */ jsxRuntime.jsx(SelectInputChip, {})
  };
  const menu = "_menu_2ruru_1";
  const groupItem = "_groupItem_2ruru_13";
  const option = "_option_2ruru_27";
  const active = "_active_2ruru_32";
  const selected = "_selected_2ruru_37";
  const css$d = {
    menu,
    groupItem,
    option,
    active,
    selected
  };
  const SelectMenu = ({
    style,
    disabled: disabled2,
    createable,
    selectedOption,
    options,
    loading,
    className,
    index,
    filterable,
    groups,
    multiple: multiple2,
    inputSearchText,
    onSelectedChange
  }) => {
    const trimmedText = inputSearchText.trim();
    const checkOptionSelected = React.useCallback(
      (option2) => {
        if (multiple2) {
          if (Array.isArray(selectedOption)) {
            return selectedOption.find((o) => o.value === option2.value);
          }
          return false;
        }
        return (selectedOption == null ? void 0 : selectedOption.value) === option2.value;
      },
      [selectedOption, multiple2]
    );
    const renderListItems = React.useCallback(
      (items, group2) => items.map((o, i) => /* @__PURE__ */ jsxRuntime.jsx(
        ListItem,
        {
          className: classNames(css$d.option, "select-menu-item", {
            [css$d.selected]: checkOptionSelected(o),
            [css$d.active]: index === i + ((group2 == null ? void 0 : group2.offset) || 0),
            [css$d.diabled]: disabled2 || o.disabled
          }),
          onClick: (event) => {
            event.preventDefault();
            event.stopPropagation();
            onSelectedChange(o);
          },
          children: o.menuLabel ? o.menuLabel : /* @__PURE__ */ jsxRuntime.jsx(
            Highlighter,
            {
              searchWords: [inputSearchText],
              autoEscape: true,
              textToHighlight: o.children
            }
          )
        },
        `${group2 == null ? void 0 : group2.name}-${o.value}`
      )),
      [checkOptionSelected, disabled2, index, inputSearchText, onSelectedChange]
    );
    return /* @__PURE__ */ jsxRuntime.jsx(
      framerMotion.motion.div,
      {
        style,
        className: classNames(css$d.menu, className, "select-menu"),
        initial: {
          opacity: 0,
          y: -20,
          pointerEvents: "none"
        },
        animate: {
          opacity: 1,
          y: 0,
          pointerEvents: "auto",
          transition: {
            when: "beforeChildren"
          }
        },
        exit: {
          y: -14,
          opacity: 0,
          pointerEvents: "none",
          transition: { duration: 0.3, ease: "anticipate" }
        },
        children: /* @__PURE__ */ jsxRuntime.jsxs(List, { children: [
          (options == null ? void 0 : options.length) === 0 && createable && trimmedText && !loading && /* @__PURE__ */ jsxRuntime.jsxs(
            ListItem,
            {
              className: "select-menu-create-option",
              onClick: (event) => {
                event.preventDefault();
                event.stopPropagation();
                onSelectedChange({
                  value: trimmedText.toLowerCase(),
                  children: trimmedText.toLowerCase()
                });
              },
              children: [
                'Create option "',
                trimmedText.toLowerCase(),
                '"'
              ]
            }
          ),
          (options == null ? void 0 : options.length) === 0 && !createable && filterable && trimmedText && !loading && /* @__PURE__ */ jsxRuntime.jsxs(ListItem, { className: "select-menu-empty-search", children: [
            'No option(s) for "',
            trimmedText,
            '"'
          ] }),
          (options == null ? void 0 : options.length) === 0 && !createable && filterable && !trimmedText && !loading && /* @__PURE__ */ jsxRuntime.jsx(ListItem, { className: "select-menu-empty", children: "No option(s) available" }),
          groups.hasGroups ? groups.groups.map((g) => /* @__PURE__ */ jsxRuntime.jsx(React.Fragment, { children: g.name === "undefined" ? renderListItems(g.items, g) : /* @__PURE__ */ jsxRuntime.jsxs(
            ListItem,
            {
              className: classNames(css$d.groupItem, "select-menu-group"),
              children: [
                /* @__PURE__ */ jsxRuntime.jsx("h3", { className: "select-menu-group-header", children: g.name }),
                /* @__PURE__ */ jsxRuntime.jsx(List, { children: renderListItems(g.items, g) })
              ]
            }
          ) }, g.name)) : renderListItems(options)
        ] })
      }
    );
  };
  const useWidth = (ref, overlayRef) => {
    const [menuWidth, setMenuWidth] = React.useState(0);
    const updateWidthInternal = React.useCallback(() => {
      if (ref == null ? void 0 : ref.current) {
        const { width } = ref.current.getBoundingClientRect();
        if (width !== menuWidth) {
          setMenuWidth(width);
          return true;
        }
      }
    }, [ref, menuWidth]);
    React.useEffect(() => {
      updateWidthInternal();
    }, [updateWidthInternal]);
    React.useEffect(() => {
      window.addEventListener("resize", updateWidthInternal);
      return () => window.removeEventListener("resize", updateWidthInternal);
    }, [updateWidthInternal]);
    const updateWidth = React.useCallback(() => {
      var _a;
      if (updateWidthInternal()) {
        (_a = overlayRef.current) == null ? void 0 : _a.updatePosition();
      }
    }, [updateWidthInternal, overlayRef]);
    return [menuWidth, updateWidth];
  };
  function getGroups(options) {
    if (!(options == null ? void 0 : options.length)) {
      return {
        groups: [],
        itemsCount: 0,
        hasGroups: false
      };
    }
    const groupsMap = options.reduce((acc, option2) => {
      if (!acc[option2.group]) {
        acc[option2.group] = [];
      }
      acc[option2.group].push(option2);
      return acc;
    }, {});
    const groupNames = Object.keys(groupsMap);
    if (groupNames.length === 1 && groupNames[0] === "undefined") {
      return {
        groups: [],
        itemsCount: options.length,
        hasGroups: false
      };
    }
    let index = 0;
    const groups = groupNames.map((key, i) => ({
      offset: 0,
      index: i,
      items: groupsMap[key],
      name: key
    }));
    for (const group2 of groups) {
      group2.offset = index;
      for (const _item of group2.items) {
        index++;
      }
    }
    return {
      groups,
      itemsCount: (groups == null ? void 0 : groups.length) !== 0 ? groups.reduce((acc, g) => acc + g.items.length, 0) : options.length,
      hasGroups: (groups == null ? void 0 : groups.length) !== 0
    };
  }
  const SelectOption = ({ children }) => children;
  function createOptions(children) {
    const arr = React.Children.toArray(children);
    return arr.filter((child) => {
      var _a;
      return ((_a = child.type) == null ? void 0 : _a.name) === SelectOption.name;
    }).map((child) => child.props);
  }
  const Select = ({
    id,
    name,
    autoFocus,
    clearable,
    tabToSelect,
    filterable,
    menuPlacement,
    closeOnSelect,
    menuDisabled,
    refreshable,
    placeholder,
    disabled: disabled2,
    createable,
    loading,
    multiple: multiple2,
    error: error2,
    className,
    activeClassName,
    children,
    value,
    defaultFilterValue,
    required,
    input: input2,
    menu: menu2,
    onRefresh,
    onChange,
    onBlur: onInputBlur,
    onFocus: onInputFocus,
    onInputKeydown,
    onInputKeyUp,
    onOptionsChange,
    onInputChange
  }) => {
    var _a, _b;
    const overlayRef = React.useRef(null);
    const inputRef = React.useRef(null);
    const [internalValue, setInternalValue] = React.useState(
      value
    );
    const [open2, setOpen] = React.useState(false);
    const [index, setIndex] = React.useState(-1);
    const internalId = rdk.useId(id);
    const [menuWidth, updateMenuWidth] = useWidth(
      (_a = inputRef.current) == null ? void 0 : _a.containerRef,
      overlayRef
    );
    const [options, setOptions] = React.useState(
      createOptions(children)
    );
    React.useEffect(() => {
      const opts = createOptions(children);
      if (!isEqual(opts, options)) {
        setOptions(opts);
      }
    }, [children, options]);
    const { result, keyword, search, resetSearch } = reactUseFuzzy.useFuzzy(
      options,
      {
        keys: ["children", "group"]
      }
    );
    React.useEffect(() => {
      if (keyword && keyword.length > 0) {
        if (index === -1 || !result[index]) {
          setIndex(0);
        }
      }
    }, [keyword, index, setIndex, result]);
    React.useEffect(() => {
      if (!value && defaultFilterValue) {
        search(defaultFilterValue);
      }
    }, []);
    const groups = React.useMemo(() => getGroups(result), [result]);
    const selectedOption = React.useMemo(() => {
      if (multiple2) {
        if (internalValue || internalValue === "") {
          return options.filter(
            (o) => internalValue.includes(o.value)
          );
        }
        return [];
      } else if (internalValue || internalValue === "") {
        return options.find((o) => o.value === internalValue);
      }
      return null;
    }, [options, multiple2, internalValue]);
    React.useLayoutEffect(() => {
      var _a2;
      updateMenuWidth();
      (_a2 = overlayRef == null ? void 0 : overlayRef.current) == null ? void 0 : _a2.updatePosition();
    }, [internalValue, updateMenuWidth]);
    React.useEffect(() => {
      if (!isEqual(value, internalValue)) {
        setInternalValue(value);
      }
    }, [value, internalValue]);
    React.useEffect(() => {
      if (internalValue && createable) {
        if (multiple2) {
          for (const v of internalValue) {
            const newOptions = [];
            const has = options.find((o) => o.value === v);
            if (!has) {
              newOptions.push({
                children: v,
                value: v
              });
            }
            if (newOptions.length) {
              const updatedOptions = [...options, ...newOptions];
              onOptionsChange == null ? void 0 : onOptionsChange(updatedOptions);
            }
          }
        } else {
          const has = options.find((o) => o.value === internalValue);
          if (!has) {
            const updatedOptions = [
              ...options,
              {
                children: internalValue,
                value: internalValue
              }
            ];
            onOptionsChange == null ? void 0 : onOptionsChange(updatedOptions);
          }
        }
      }
    }, [createable, internalValue, multiple2, options, onOptionsChange]);
    const resetInput = React.useCallback(() => {
      setIndex(-1);
      resetSearch();
    }, [resetSearch]);
    const resetSelect = React.useCallback(() => {
      setOpen(false);
      resetInput();
    }, [resetInput]);
    const onArrowUpKeyUp = React.useCallback(
      (event) => {
        event.preventDefault();
        setIndex(Math.max(index - 1, -1));
      },
      [index]
    );
    const onArrowDownKeyUp = React.useCallback(
      (event) => {
        event.preventDefault();
        setIndex(Math.min(index + 1, groups.itemsCount - 1));
      },
      [groups.itemsCount, index]
    );
    const onInputFocused = React.useCallback(
      (event) => {
        if (!disabled2 && !menuDisabled) {
          setOpen(true);
        }
        onInputFocus == null ? void 0 : onInputFocus(event);
      },
      [disabled2, menuDisabled, onInputFocus]
    );
    const onInputExpanded = React.useCallback(
      (event) => {
        event.stopPropagation();
        if (!disabled2 && !menuDisabled) {
          setOpen(!open2);
        }
      },
      [disabled2, menuDisabled, open2]
    );
    const onInputChanged = React.useCallback(
      (event) => {
        const value2 = event.target.value;
        search(value2);
        onInputChange == null ? void 0 : onInputChange(event);
      },
      [onInputChange, search]
    );
    const toggleSelectedMultiOption = React.useCallback(
      (selections) => {
        const newOptions = [];
        let newSelectedOptions = selectedOption;
        if (!selections) {
          newSelectedOptions = [];
        } else {
          if (!Array.isArray(selections)) {
            selections = [selections];
          }
          for (const next of selections) {
            const hasOption = options.find((o) => o.value === next.value);
            const has = (internalValue || []).includes(next.value);
            if (has) {
              newSelectedOptions = newSelectedOptions.filter(
                (o) => o.value !== next.value
              );
            } else {
              newSelectedOptions = [...newSelectedOptions, next];
            }
            if (!hasOption && createable) {
              newOptions.push(next);
            }
          }
        }
        return {
          newValue: newSelectedOptions.map((o) => o.value),
          newSelectedOptions,
          newOptions
        };
      },
      [createable, internalValue, options, selectedOption]
    );
    const toggleSelectedOption = React.useCallback(
      (option2) => {
        var _a2;
        let newValue;
        if (multiple2) {
          const result2 = toggleSelectedMultiOption(option2);
          newValue = result2.newValue;
          if ((_a2 = result2.newOptions) == null ? void 0 : _a2.length) {
            onOptionsChange == null ? void 0 : onOptionsChange([...options, ...result2.newOptions]);
          }
          if (closeOnSelect) {
            setOpen(false);
          }
        } else {
          const singleOption = option2;
          const hasOption = options.find((o) => o.value === (singleOption == null ? void 0 : singleOption.value));
          newValue = singleOption == null ? void 0 : singleOption.value;
          const hasValue2 = newValue !== void 0 && newValue !== null;
          if (createable && !hasOption && hasValue2) {
            onOptionsChange == null ? void 0 : onOptionsChange([...options, singleOption]);
          }
          if (closeOnSelect && hasOption) {
            setOpen(false);
          }
        }
        setInternalValue(newValue);
        if (!multiple2 || keyword) {
          resetInput();
        }
        onChange == null ? void 0 : onChange(newValue);
      },
      [
        closeOnSelect,
        createable,
        multiple2,
        onChange,
        onOptionsChange,
        options,
        resetInput,
        toggleSelectedMultiOption
      ]
    );
    const onEnterKeyUp = React.useCallback(
      (event) => {
        const inputElement = event.target;
        const inputValue = inputElement.value.trim();
        if (index === -1 && createable && !inputValue) {
          return;
        }
        if (index > -1 || createable) {
          let newSelection;
          const hasSelection = index > -1 && result[index];
          if (createable && !hasSelection) {
            newSelection = {
              value: inputValue,
              children: inputValue
            };
          } else {
            newSelection = result[index];
          }
          if (newSelection) {
            toggleSelectedOption(newSelection);
          }
        }
      },
      [createable, index, result, toggleSelectedOption]
    );
    const onTabKeyDown = React.useCallback(
      (event) => {
        const inputElement = event.target;
        const inputValue = inputElement.value.trim();
        if (event.shiftKey) {
          setOpen(false);
          return;
        }
        if (index > -1 || createable && inputValue) {
          onEnterKeyUp(event);
        }
        if (multiple2) {
          event.preventDefault();
        } else {
          setOpen(false);
        }
      },
      [index, onEnterKeyUp, setOpen, multiple2, createable]
    );
    const onInputKeyedUp = React.useCallback(
      (event) => {
        const key = event.key;
        if (key === "ArrowUp") {
          onArrowUpKeyUp(event);
        } else if (key === "ArrowDown") {
          onArrowDownKeyUp(event);
        } else if (key === "Escape") {
          resetSelect();
        } else if (key === "Enter") {
          onEnterKeyUp(event);
        }
        onInputKeyUp == null ? void 0 : onInputKeyUp(event);
      },
      [onArrowDownKeyUp, onArrowUpKeyUp, onEnterKeyUp, onInputKeyUp, resetSelect]
    );
    const onInputKeyedDown = React.useCallback(
      (event) => {
        const key = event.key;
        if (key === "Tab") {
          if (tabToSelect) {
            onTabKeyDown(event);
          } else {
            setOpen(false);
          }
        }
        onInputKeydown == null ? void 0 : onInputKeydown(event);
      },
      [onInputKeydown, onTabKeyDown, tabToSelect]
    );
    const onInputBlured = React.useCallback(
      (event) => {
        const inputElement = event.target;
        const inputValue = inputElement.value.trim();
        if (menuDisabled && createable && inputValue) {
          const newSelection = {
            value: inputValue,
            children: inputValue
          };
          toggleSelectedOption(newSelection);
        }
        onInputBlur == null ? void 0 : onInputBlur(event);
      },
      [createable, menuDisabled, onInputBlur, toggleSelectedOption]
    );
    const onMenuSelectedChange = React.useCallback(
      (option2) => {
        var _a2;
        toggleSelectedOption(option2);
        if (closeOnSelect) {
          setOpen(false);
        } else {
          (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
        }
      },
      [closeOnSelect, toggleSelectedOption]
    );
    const onOverlayClose = React.useCallback(() => {
      const inputValue = keyword.trim();
      if (createable && inputValue) {
        const newSelection = {
          value: inputValue,
          children: inputValue
        };
        toggleSelectedOption(newSelection);
      }
      resetSelect();
    }, [createable, keyword, resetSelect, toggleSelectedOption]);
    return /* @__PURE__ */ jsxRuntime.jsx(
      rdk.ConnectedOverlay,
      {
        open: open2,
        closeOnBodyClick: true,
        closeOnEscape: true,
        appendToBody: true,
        placement: menuPlacement,
        reference: (_b = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _b.containerRef,
        ref: overlayRef,
        onClose: onOverlayClose,
        content: () => /* @__PURE__ */ jsxRuntime.jsx(
          rdk.CloneElement,
          {
            element: menu2,
            id: `${internalId}-menu`,
            style: { width: menuWidth },
            selectedOption,
            createable,
            disabled: disabled2,
            options: result,
            groups,
            index,
            multiple: multiple2,
            inputSearchText: keyword,
            loading,
            filterable,
            onSelectedChange: onMenuSelectedChange
          }
        ),
        children: /* @__PURE__ */ jsxRuntime.jsx(
          rdk.CloneElement,
          {
            element: input2,
            id: `${internalId}-input`,
            name,
            disabled: disabled2,
            reference: inputRef,
            menuOpen: open2,
            autoFocus,
            options,
            error: error2,
            closeOnSelect,
            inputText: keyword,
            multiple: multiple2,
            createable,
            filterable,
            refreshable,
            className,
            activeClassName,
            required,
            loading,
            placeholder,
            selectedOption,
            clearable,
            menuDisabled,
            onSelectedChange: toggleSelectedOption,
            onExpandClick: onInputExpanded,
            onKeyDown: onInputKeyedDown,
            onKeyUp: onInputKeyedUp,
            onInputChange: onInputChanged,
            onBlur: onInputBlured,
            onFocus: onInputFocused,
            onRefresh
          }
        )
      }
    );
  };
  Select.defaultProps = {
    clearable: true,
    filterable: true,
    menuPlacement: "bottom-start",
    closeOnSelect: true,
    menuDisabled: false,
    refreshable: false,
    input: /* @__PURE__ */ jsxRuntime.jsx(SelectInput, {}),
    menu: /* @__PURE__ */ jsxRuntime.jsx(SelectMenu, {})
  };
  const root = "_root_1nf4s_1";
  const input = "_input_1nf4s_22";
  const error$2 = "_error_1nf4s_49";
  const fullWidth = "_fullWidth_1nf4s_53";
  const small$1 = "_small_1nf4s_61";
  const medium$1 = "_medium_1nf4s_65";
  const large$1 = "_large_1nf4s_69";
  const css$c = {
    root,
    input,
    error: error$2,
    fullWidth,
    small: small$1,
    medium: medium$1,
    large: large$1
  };
  const Textarea = React.forwardRef(
    ({
      fullWidth: fullWidth2,
      size = "small",
      containerClassName,
      className,
      error: error2,
      ...rest
    }, ref) => {
      const containerRef = React.useRef(null);
      const inputRef = React.useRef(null);
      React.useImperativeHandle(ref, () => ({
        inputRef,
        containerRef,
        blur: () => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.blur();
        },
        focus: () => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.focus();
        }
      }));
      return /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          className: classNames(
            css$c.root,
            {
              [css$c.fullWidth]: fullWidth2,
              [css$c.error]: error2,
              [css$c[size]]: size
            },
            containerClassName
          ),
          ref: containerRef,
          children: /* @__PURE__ */ jsxRuntime.jsx(
            TextareaAutosize,
            {
              ref: inputRef,
              className: classNames(css$c.input, className),
              ...rest
            }
          )
        }
      );
    }
  );
  const disabled = "_disabled_1jog0_11";
  const handle = "_handle_1jog0_16";
  const checked = "_checked_1jog0_20";
  const small = "_small_1jog0_29";
  const medium = "_medium_1jog0_40";
  const large = "_large_1jog0_51";
  const css$b = {
    "switch": "_switch_1jog0_1",
    disabled,
    handle,
    checked,
    small,
    medium,
    large
  };
  const Toggle = React.forwardRef(
    ({ checked: checked2, disabled: disabled2, onChange, onBlur, className, size, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        ...rest,
        ref,
        tabIndex: 0,
        className: classNames(
          css$b.switch,
          {
            [css$b.disabled]: disabled2,
            [css$b.checked]: checked2,
            [css$b[size]]: true
          },
          className
        ),
        onClick: () => {
          if (!disabled2 && onChange) {
            onChange(!checked2);
          }
        },
        onBlur,
        onKeyDown: (event) => {
          if (!disabled2 && onChange && event.code === "Space") {
            onChange(!checked2);
          }
        },
        children: /* @__PURE__ */ jsxRuntime.jsx(
          framerMotion.motion.div,
          {
            className: css$b.handle,
            layout: true,
            transition: {
              type: "spring",
              stiffness: 700,
              damping: 30
            }
          }
        )
      }
    )
  );
  Toggle.defaultProps = {
    size: "medium"
  };
  const avatar$1 = "_avatar_v8yfz_1";
  const rounded = "_rounded_v8yfz_12";
  const css$a = {
    avatar: avatar$1,
    rounded
  };
  const Avatar = React.forwardRef(
    ({ name, src, color, size, rounded: rounded2, className, colorOptions, ...rest }, ref) => {
      const fontSize = size * 0.4;
      const initials = React.useMemo(() => getInitials(name || ""), [name]);
      const backgroundColor = React.useMemo(() => {
        if (src) {
          return "transparent";
        }
        if (color) {
          return color;
        }
        return stringToColor.generateColor(name || "", colorOptions);
      }, [color, name, src, colorOptions]);
      return /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          ...rest,
          className: classNames(css$a.avatar, className, {
            [css$a.rounded]: rounded2
          }),
          style: {
            width: `${size}px`,
            height: `${size}px`,
            fontSize: `${fontSize}px`,
            backgroundImage: src ? `url(${src})` : "none",
            backgroundColor
          },
          ref,
          children: !src && name && /* @__PURE__ */ jsxRuntime.jsx("span", { children: initials })
        }
      );
    }
  );
  Avatar.defaultProps = {
    size: 24,
    rounded: true
  };
  const group = "_group_1sbi4_1";
  const avatar = "_avatar_1sbi4_5";
  const overflow = "_overflow_1sbi4_9";
  const css$9 = {
    group,
    avatar,
    overflow
  };
  const AvatarGroup = React.forwardRef(
    ({ children, className, size, ...rest }, ref) => {
      const childrenArray = React.Children.toArray(children);
      const { data, hasMore, remaining } = useInfinityList({
        items: childrenArray,
        size
      });
      return /* @__PURE__ */ jsxRuntime.jsxs("div", { ...rest, ref, className: classNames(className, css$9.group), children: [
        data.map((child, index) => /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$9.avatar, children: child }, index)),
        hasMore && /* @__PURE__ */ jsxRuntime.jsxs("span", { className: css$9.overflow, children: [
          "+",
          remaining,
          " more"
        ] })
      ] });
    }
  );
  AvatarGroup.defaultProps = {
    size: 10
  };
  const container$2 = "_container_d6on2_1";
  const disableMargins = "_disableMargins_d6on2_8";
  const badge = "_badge_d6on2_13";
  const top$1 = "_top_d6on2_37";
  const left$1 = "_left_d6on2_38";
  const bottom$1 = "_bottom_d6on2_45";
  const right$1 = "_right_d6on2_52";
  const primary = "_primary_d6on2_65";
  const secondary = "_secondary_d6on2_70";
  const error$1 = "_error_d6on2_75";
  const css$8 = {
    container: container$2,
    disableMargins,
    badge,
    top: top$1,
    left: left$1,
    bottom: bottom$1,
    right: right$1,
    "default": "_default_d6on2_60",
    primary,
    secondary,
    error: error$1
  };
  const Badge = React.forwardRef(
    ({
      children,
      color,
      className,
      disableMargins: disableMargins2,
      content: content2,
      hidden,
      placement,
      ...rest
    }, ref) => /* @__PURE__ */ jsxRuntime.jsxs(
      "span",
      {
        className: classNames(css$8.container, {
          [css$8.disableMargins]: disableMargins2
        }),
        children: [
          children,
          !hidden && /* @__PURE__ */ jsxRuntime.jsx(
            framerMotion.motion.span,
            {
              initial: { opacity: 0, scale: 1 },
              animate: { opacity: 1, scale: 1 },
              "aria-hidden": "true",
              children: /* @__PURE__ */ jsxRuntime.jsx(
                "span",
                {
                  ...rest,
                  ref,
                  className: classNames(className, css$8.badge, css$8[color], {
                    [css$8.top]: placement === "top-start" || placement === "top-end",
                    [css$8.bottom]: placement === "bottom-start" || placement === "bottom-end",
                    [css$8.left]: placement === "top-start" || placement === "bottom-start",
                    [css$8.right]: placement === "top-end" || placement === "bottom-end"
                  }),
                  children: content2
                }
              )
            }
          )
        ]
      }
    )
  );
  Badge.defaultProps = {
    color: "default",
    placement: "top-end"
  };
  const IconButton = React.forwardRef(
    ({ children, ...rest }, ref) => /* @__PURE__ */ jsxRuntime.jsx(Button, { ...rest, ref, children })
  );
  const createStateHook = () => {
    let tooltips = [];
    function addTooltip(newTip) {
      tooltips = [...tooltips, newTip];
    }
    function deactivateTooltip(tooltip2, isPopover) {
      const idx = tooltips.indexOf(tooltip2);
      if (idx > -1) {
        const tip = tooltips[idx];
        const shouldRemove = tip(false, isPopover);
        if (shouldRemove) {
          tooltips.splice(idx, 1);
        }
      }
    }
    function deactivateAllTooltips(isPopover) {
      const newTooltips = [];
      tooltips.forEach((ref) => {
        const shouldRemvoe = ref(false, isPopover);
        if (!shouldRemvoe) {
          newTooltips.push(ref);
        }
      });
      tooltips = [...newTooltips];
    }
    return () => {
      const [state, setState] = React.useState([]);
      React.useEffect(() => {
        setState(tooltips);
      }, []);
      return {
        tooltips: state,
        deactivateAllTooltips,
        deactivateTooltip,
        addTooltip
      };
    };
  };
  const useTooltipState = createStateHook();
  const tooltip = "_tooltip_2b0bf_1";
  const disablePointer = "_disablePointer_2b0bf_12";
  const css$7 = {
    tooltip,
    disablePointer
  };
  const Tooltip = ({
    className,
    children,
    content: content2,
    triggerClassName,
    disabled: disabled2,
    enterDelay,
    leaveDelay,
    placement,
    trigger,
    visible,
    followCursor,
    closeOnClick,
    closeOnEscape,
    closeOnBodyClick,
    pointerEvents,
    isPopover,
    onOpen,
    onClose,
    ...rest
  }) => {
    const { addTooltip, deactivateTooltip, deactivateAllTooltips } = useTooltipState();
    const [internalVisible, setInternalVisible] = React.useState(visible);
    const timeout = React.useRef(null);
    const mounted = React.useRef(false);
    const ref = React.useRef(
      (vis, isPop) => {
        if (isPop === isPopover) {
          setInternalVisible(vis);
        }
        return isPop === isPopover;
      }
    );
    React.useEffect(() => {
      if (!mounted.current) {
        mounted.current = true;
      } else {
        setInternalVisible(visible);
      }
      const curRef = ref.current;
      const timer = timeout.current;
      return () => {
        clearTimeout(timer);
        deactivateTooltip(curRef, isPopover);
      };
    }, [deactivateTooltip, isPopover, visible]);
    return /* @__PURE__ */ jsxRuntime.jsx(
      rdk.ConnectedOverlay,
      {
        ...rest,
        placement,
        trigger,
        followCursor,
        triggerClassName,
        portalClassName: classNames({
          [css$7.disablePointer]: pointerEvents === "none"
        }),
        open: internalVisible,
        closeOnBodyClick,
        closeOnEscape,
        content: () => {
          const contentChildren = typeof content2 === "function" ? content2() : content2;
          if (!contentChildren) {
            return null;
          }
          return /* @__PURE__ */ jsxRuntime.jsx(
            framerMotion.motion.div,
            {
              className: classNames(css$7.tooltip, className),
              initial: {
                opacity: 0,
                scale: 0.3,
                transition: {
                  when: "beforeChildren"
                }
              },
              animate: {
                opacity: 1,
                scale: 1,
                transition: {
                  when: "beforeChildren"
                }
              },
              exit: { opacity: 0, scale: 0.3 },
              onClick: () => {
                if (closeOnClick) {
                  deactivateAllTooltips(isPopover);
                }
              },
              children: contentChildren
            }
          );
        },
        onOpen: () => {
          if (!internalVisible) {
            clearTimeout(timeout.current);
            timeout.current = setTimeout(() => {
              if (!disabled2) {
                deactivateAllTooltips(isPopover);
                setInternalVisible(true);
                addTooltip(ref.current);
                onOpen == null ? void 0 : onOpen();
              }
            }, enterDelay);
          }
        },
        onClose: (e) => {
          var _a, _b;
          if (((_a = e == null ? void 0 : e.nativeEvent) == null ? void 0 : _a.type) !== "click" || ((_b = e == null ? void 0 : e.nativeEvent) == null ? void 0 : _b.type) === "click" && closeOnClick) {
            clearTimeout(timeout.current);
            timeout.current = setTimeout(() => {
              deactivateTooltip(ref.current, isPopover);
              onClose == null ? void 0 : onClose();
            }, leaveDelay);
          }
        },
        children
      }
    );
  };
  Tooltip.defaultProps = {
    disabled: false,
    enterDelay: 0,
    leaveDelay: 200,
    placement: "top",
    trigger: "hover",
    visible: false,
    followCursor: false,
    closeOnClick: false,
    closeOnEscape: true,
    closeOnBodyClick: true,
    pointerEvents: "none"
  };
  const popover = "_popover_17s8e_1";
  const disablePadding$2 = "_disablePadding_17s8e_8";
  const css$6 = {
    popover,
    disablePadding: disablePadding$2
  };
  const Popover = ({
    closeOnEscape,
    closeOnBodyClick,
    trigger,
    leaveDelay,
    children,
    content: content2,
    className,
    disablePadding: disablePadding2,
    popoverStyle,
    popoverClassName,
    ...rest
  }) => {
    const id = rdk.useId();
    return /* @__PURE__ */ jsxRuntime.jsx(
      Tooltip,
      {
        ...rest,
        trigger,
        pointerEvents: "initial",
        leaveDelay,
        isPopover: true,
        className: classNames(css$6.popover, className, {
          [css$6.disablePadding]: disablePadding2
        }),
        content: () => {
          const isContentFunction = typeof content2 === "function";
          const children2 = isContentFunction ? content2() : content2;
          if (!children2) {
            return null;
          }
          return /* @__PURE__ */ jsxRuntime.jsx(
            FocusTrap,
            {
              focusTrapOptions: {
                escapeDeactivates: true,
                clickOutsideDeactivates: true,
                fallbackFocus: `#${id}`
              },
              children: /* @__PURE__ */ jsxRuntime.jsx(
                "div",
                {
                  id,
                  tabIndex: -1,
                  style: popoverStyle,
                  className: popoverClassName,
                  children: children2
                }
              )
            }
          );
        },
        children
      }
    );
  };
  Popover.defaultProps = {
    closeOnEscape: true,
    closeOnBodyClick: true,
    trigger: "click",
    leaveDelay: 200
  };
  const dialog = "_dialog_1iyoz_1";
  const disableHeader = "_disableHeader_1iyoz_13";
  const content$2 = "_content_1iyoz_14";
  const disablePadding$1 = "_disablePadding_1iyoz_19";
  const header$2 = "_header_1iyoz_21";
  const inner$1 = "_inner_1iyoz_26";
  const headerText$1 = "_headerText_1iyoz_44";
  const closeButton$2 = "_closeButton_1iyoz_51";
  const footer = "_footer_1iyoz_79";
  const css$5 = {
    dialog,
    disableHeader,
    content: content$2,
    disablePadding: disablePadding$1,
    header: header$2,
    inner: inner$1,
    headerText: headerText$1,
    closeButton: closeButton$2,
    footer
  };
  const DialogHeader = ({
    children,
    className,
    showCloseButton,
    onClose
  }) => /* @__PURE__ */ jsxRuntime.jsxs("header", { className: classNames(css$5.header, className), children: [
    /* @__PURE__ */ jsxRuntime.jsx("div", { children: typeof children === "string" ? /* @__PURE__ */ jsxRuntime.jsx("h1", { className: css$5.headerText, children }) : children }),
    showCloseButton && /* @__PURE__ */ jsxRuntime.jsx("button", { type: "button", className: css$5.closeButton, onClick: onClose, children: "✕" })
  ] });
  const Dialog = ({
    children,
    open: open2,
    className,
    innerClassName,
    contentClassName,
    header: header2,
    headerElement,
    footer: footer2,
    onClose,
    size,
    disablePadding: disablePadding2,
    hasBackdrop,
    showCloseButton,
    closeOnBackdropClick,
    closeOnEscape
  }) => {
    const id = rdk.useId();
    return /* @__PURE__ */ jsxRuntime.jsx(
      rdk.GlobalOverlay,
      {
        open: open2,
        hasBackdrop,
        closeOnEscape,
        closeOnBackdropClick,
        onClose,
        children: ({ overlayIndex }) => /* @__PURE__ */ jsxRuntime.jsx(
          FocusTrap,
          {
            focusTrapOptions: {
              clickOutsideDeactivates: true,
              escapeDeactivates: true,
              fallbackFocus: `#${id}-content`
            },
            children: /* @__PURE__ */ jsxRuntime.jsx("div", { id, tabIndex: -1, children: /* @__PURE__ */ jsxRuntime.jsx(
              framerMotion.motion.div,
              {
                initial: { opacity: 0, y: "-20%" },
                animate: { opacity: 1, y: 0 },
                exit: { opacity: 0, y: "20%" },
                transition: { duration: 0.5, ease: [0.04, 0.62, 0.23, 0.98] },
                style: { zIndex: overlayIndex },
                className: classNames(css$5.dialog, className, {
                  [css$5.disableHeader]: !header2,
                  [css$5.disablePadding]: disablePadding2
                }),
                children: /* @__PURE__ */ jsxRuntime.jsxs(
                  "div",
                  {
                    className: classNames(css$5.inner, innerClassName),
                    style: { width: size },
                    children: [
                      (header2 || headerElement) && /* @__PURE__ */ jsxRuntime.jsx(
                        rdk.CloneElement,
                        {
                          element: headerElement,
                          showCloseButton,
                          onClose,
                          children: header2
                        }
                      ),
                      /* @__PURE__ */ jsxRuntime.jsx(
                        "section",
                        {
                          id: `${id}-content`,
                          className: classNames(css$5.content, contentClassName),
                          children: typeof children === "function" ? children() : children
                        }
                      ),
                      footer2 && /* @__PURE__ */ jsxRuntime.jsx("footer", { className: css$5.footer, children: footer2 })
                    ]
                  }
                )
              }
            ) })
          }
        )
      }
    );
  };
  Dialog.defaultProps = {
    size: "50%",
    disablePadding: false,
    hasBackdrop: true,
    showCloseButton: true,
    closeOnBackdropClick: true,
    closeOnEscape: true,
    headerElement: /* @__PURE__ */ jsxRuntime.jsx(DialogHeader, {})
  };
  const useDialog = (prop) => {
    const { open: open2, onClose } = prop || {};
    const [internalOpen, setInternalOpen] = React.useState(open2);
    React.useEffect(() => {
      setInternalOpen(open2);
    }, [open2]);
    const onCloseInternal = React.useCallback(() => {
      setInternalOpen(false);
      onClose == null ? void 0 : onClose();
    }, [onClose]);
    const onToggleOpen = () => {
      setInternalOpen(!open2);
    };
    const Component = React.useCallback(
      (props) => /* @__PURE__ */ jsxRuntime.jsx(Dialog, { ...props, open: internalOpen, onClose: onCloseInternal }),
      [internalOpen, onCloseInternal]
    );
    return {
      isOpen: internalOpen,
      setOpen: setInternalOpen,
      toggleOpen: onToggleOpen,
      Dialog: Component
    };
  };
  const variants = {
    start: {
      initial: {
        x: "-100%"
      },
      animate: {
        x: "0%"
      }
    },
    end: {
      initial: {
        x: "100%"
      },
      animate: {
        x: "0%"
      }
    },
    top: {
      initial: {
        y: "-100%"
      },
      animate: {
        y: "0%"
      }
    },
    bottom: {
      initial: {
        y: "100%"
      },
      animate: {
        y: "0%"
      }
    }
  };
  const drawer = "_drawer_1f5a0_1";
  const disablePadding = "_disablePadding_1f5a0_8";
  const content$1 = "_content_1f5a0_9";
  const header$1 = "_header_1f5a0_14";
  const headerText = "_headerText_1f5a0_20";
  const closeButton$1 = "_closeButton_1f5a0_26";
  const headerlessCloseButton = "_headerlessCloseButton_1f5a0_43";
  const left = "_left_1f5a0_50";
  const right = "_right_1f5a0_51";
  const top = "_top_1f5a0_65";
  const bottom = "_bottom_1f5a0_66";
  const css$4 = {
    drawer,
    disablePadding,
    content: content$1,
    header: header$1,
    headerText,
    closeButton: closeButton$1,
    headerlessCloseButton,
    left,
    right,
    top,
    bottom
  };
  const DrawerHeader = ({
    children,
    className,
    showCloseButton,
    onClose
  }) => /* @__PURE__ */ jsxRuntime.jsxs("header", { className: classNames(css$4.header, className), children: [
    /* @__PURE__ */ jsxRuntime.jsx("div", { children: typeof children === "string" ? /* @__PURE__ */ jsxRuntime.jsx("h1", { className: css$4.headerText, children }) : children }),
    showCloseButton && /* @__PURE__ */ jsxRuntime.jsx("button", { type: "button", className: css$4.closeButton, onClick: onClose, children: "✕" })
  ] });
  const Drawer = ({
    className,
    contentClassName,
    headerElement,
    children,
    open: open2,
    backdropClassName,
    header: header2,
    position,
    size,
    hasBackdrop,
    closeOnEscape,
    closeOnBackdropClick,
    disablePadding: disablePadding2,
    showCloseButton,
    onClose
  }) => {
    const id = rdk.useId();
    const variant = variants[position];
    const style = {
      width: position === "start" || position === "end" ? size : "auto",
      height: position === "top" || position === "bottom" ? size : "auto"
    };
    return /* @__PURE__ */ jsxRuntime.jsx(
      rdk.GlobalOverlay,
      {
        open: open2,
        hasBackdrop,
        closeOnEscape,
        closeOnBackdropClick,
        onClose,
        backdropClassName,
        children: ({ overlayIndex }) => /* @__PURE__ */ jsxRuntime.jsx(
          FocusTrap,
          {
            focusTrapOptions: {
              clickOutsideDeactivates: true,
              escapeDeactivates: true,
              fallbackFocus: `#${id}`
            },
            children: /* @__PURE__ */ jsxRuntime.jsx("div", { id, tabIndex: -1, children: /* @__PURE__ */ jsxRuntime.jsxs(
              framerMotion.motion.div,
              {
                initial: "initial",
                animate: "animate",
                exit: "initial",
                variants: variant,
                transition: {
                  duration: 0.5,
                  ease: [0.04, 0.62, 0.23, 0.98],
                  when: "beforeChildren"
                },
                style: { ...style, zIndex: overlayIndex },
                className: classNames(css$4.drawer, className, {
                  [css$4.left]: position === "start",
                  [css$4.right]: position === "end",
                  [css$4.top]: position === "top",
                  [css$4.bottom]: position === "bottom",
                  [css$4.disablePadding]: disablePadding2
                }),
                children: [
                  (header2 || headerElement) && /* @__PURE__ */ jsxRuntime.jsx(
                    rdk.CloneElement,
                    {
                      element: headerElement,
                      showCloseButton,
                      onClose,
                      children: header2
                    }
                  ),
                  !header2 && !headerElement && showCloseButton && /* @__PURE__ */ jsxRuntime.jsx(
                    "button",
                    {
                      type: "button",
                      className: classNames(
                        css$4.closeButton,
                        css$4.headerlessCloseButton
                      ),
                      onClick: onClose,
                      children: "✕"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntime.jsx("div", { className: classNames(css$4.content, contentClassName), children: typeof children === "function" ? children() : children })
                ]
              }
            ) })
          }
        )
      }
    );
  };
  Drawer.defaultProps = {
    position: "end",
    size: "80%",
    hasBackdrop: true,
    closeOnEscape: true,
    closeOnBackdropClick: true,
    disablePadding: false,
    showCloseButton: true,
    headerElement: /* @__PURE__ */ jsxRuntime.jsx(DrawerHeader, {})
  };
  const useDrawer = (prop) => {
    const { open: open2, onClose } = prop || {};
    const [internalOpen, setInternalOpen] = React.useState(open2);
    React.useEffect(() => {
      setInternalOpen(open2);
    }, [open2]);
    const onCloseInternal = React.useCallback(() => {
      setInternalOpen(false);
      onClose == null ? void 0 : onClose();
    }, [onClose]);
    const onToggleOpen = () => {
      setInternalOpen(!internalOpen);
    };
    const Component = React.useCallback(
      (props) => /* @__PURE__ */ jsxRuntime.jsx(Drawer, { ...props, open: internalOpen, onClose: onCloseInternal }),
      [internalOpen, onCloseInternal]
    );
    return {
      isOpen: internalOpen,
      setOpen: setInternalOpen,
      toggleOpen: onToggleOpen,
      Drawer: Component
    };
  };
  const container$1 = "_container_gicoy_1";
  const inner = "_inner_gicoy_7";
  const css$3 = {
    container: container$1,
    inner
  };
  const Menu = React.forwardRef(
    ({
      reference,
      children,
      style,
      className,
      placement,
      closeOnEscape,
      open: open2,
      appendToBody,
      closeOnBodyClick,
      maxHeight,
      autofocus,
      modifiers,
      autoWidth,
      minWidth,
      maxWidth,
      onClose,
      onMouseEnter,
      onMouseLeave
    }, ref) => {
      const id = rdk.useId();
      const internalModifiers = React.useMemo(() => {
        if (autoWidth) {
          const sameWidth = {
            enabled: true,
            order: 840,
            fn: (data) => {
              var _a;
              const { width, left: left2, right: right2 } = data.offsets.reference;
              const passedOffset = (_a = modifiers == null ? void 0 : modifiers.offset) == null ? void 0 : _a.offset;
              let passedXOffset = 0;
              let menuWidth = width;
              if (maxWidth && menuWidth > maxWidth) {
                menuWidth = maxWidth;
              } else if (minWidth && menuWidth < minWidth) {
                menuWidth = minWidth;
              }
              if (passedOffset) {
                if (typeof passedOffset === "number") {
                  passedXOffset = passedOffset;
                } else {
                  const [skidding] = passedOffset.split(",");
                  passedXOffset = parseInt(skidding.trim(), 10);
                }
              }
              data.styles.width = menuWidth;
              data.offsets.popper.width = menuWidth;
              data.offsets.popper.left = left2 + passedXOffset;
              data.offsets.popper.right = right2 + passedXOffset;
              return data;
            }
          };
          return modifiers ? { ...modifiers, sameWidth } : { sameWidth };
        }
        return modifiers;
      }, [modifiers, autoWidth, minWidth, maxWidth]);
      return /* @__PURE__ */ jsxRuntime.jsx(
        rdk.ConnectedOverlay,
        {
          open: open2,
          closeOnBodyClick,
          appendToBody,
          reference,
          placement,
          modifiers: internalModifiers,
          closeOnEscape,
          content: () => /* @__PURE__ */ jsxRuntime.jsx(
            framerMotion.motion.div,
            {
              ref,
              initial: { opacity: 0, y: -10 },
              animate: { opacity: 1, y: 0 },
              exit: { opacity: 0, y: -10 },
              className: classNames(css$3.container, className),
              style,
              onMouseEnter,
              onMouseLeave,
              children: autofocus ? /* @__PURE__ */ jsxRuntime.jsx(
                FocusTrap,
                {
                  focusTrapOptions: {
                    escapeDeactivates: true,
                    clickOutsideDeactivates: true,
                    fallbackFocus: `#${id}`
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsx(
                    "div",
                    {
                      id,
                      className: css$3.inner,
                      tabIndex: -1,
                      style: { maxHeight },
                      children: typeof children === "function" ? children() : children
                    }
                  )
                }
              ) : /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$3.inner, style: { maxHeight }, children: typeof children === "function" ? children() : children })
            }
          ),
          onClose
        }
      );
    }
  );
  Menu.defaultProps = {
    placement: "bottom-start",
    closeOnEscape: true,
    open: false,
    appendToBody: true,
    closeOnBodyClick: true,
    maxHeight: "max-height: calc(100vh - 48px)",
    autofocus: true
  };
  const useMenu = (prop) => {
    const { open: open2, onClose } = prop || {};
    const [internalOpen, setInternalOpen] = React.useState(open2);
    const ref = React.useRef(null);
    React.useEffect(() => {
      setInternalOpen(open2);
    }, [open2]);
    const onCloseInternal = React.useCallback(() => {
      setInternalOpen(false);
      onClose == null ? void 0 : onClose();
    }, [onClose]);
    const onToggleOpen = React.useCallback(() => {
      setInternalOpen(!internalOpen);
    }, [internalOpen]);
    const Component = React.useCallback(
      (props) => /* @__PURE__ */ jsxRuntime.jsx(
        Menu,
        {
          ...props,
          open: internalOpen,
          reference: ref,
          onClose: onCloseInternal
        }
      ),
      [internalOpen, onCloseInternal]
    );
    return {
      isOpen: internalOpen,
      setOpen: setInternalOpen,
      toggleOpen: onToggleOpen,
      Menu: Component,
      ref
    };
  };
  const NestedMenu = ({
    label: label2,
    children,
    style,
    placement,
    menuClassName,
    menuStyle,
    enterDelay,
    autofocus,
    leaveDelay,
    className,
    maxHeight,
    activeClassName,
    closeOnBodyClick,
    closeOnEscape,
    onClose
  }) => {
    const [active2, setActive] = React.useState(false);
    const itemRef = React.useRef(null);
    const menuRef = React.useRef(null);
    const menuEntered = React.useRef(false);
    const enterTimeoutRef = React.useRef(null);
    const leaveTimeoutRef = React.useRef(null);
    const onMouseEnterItem = React.useCallback(() => {
      clearTimeout(enterTimeoutRef.current);
      clearTimeout(leaveTimeoutRef.current);
      enterTimeoutRef.current = setTimeout(() => setActive(true), enterDelay);
    }, [enterDelay]);
    const onClickItem = React.useCallback(() => {
      clearTimeout(enterTimeoutRef.current);
      clearTimeout(leaveTimeoutRef.current);
      setActive(!active2);
    }, [active2]);
    const onMouseLeaveItem = React.useCallback(() => {
      leaveTimeoutRef.current = setTimeout(() => {
        if (!menuEntered.current) {
          setActive(false);
        }
      }, leaveDelay);
    }, [leaveDelay]);
    const onMouseEnterMenu = React.useCallback((event) => {
      clearTimeout(enterTimeoutRef.current);
      clearTimeout(leaveTimeoutRef.current);
      menuEntered.current = true;
    }, []);
    const onMouseLeaveMenu = React.useCallback(
      (event) => {
        clearTimeout(enterTimeoutRef.current);
        clearTimeout(leaveTimeoutRef.current);
        menuEntered.current = false;
        leaveTimeoutRef.current = setTimeout(() => {
          var _a;
          if (!((_a = itemRef.current) == null ? void 0 : _a.contains(event.target))) {
            setActive(false);
          }
        }, leaveDelay);
      },
      [leaveDelay]
    );
    const onNestedMenuClose = React.useCallback(
      (event) => {
        setActive(false);
        onClose == null ? void 0 : onClose(event);
      },
      [onClose]
    );
    return /* @__PURE__ */ jsxRuntime.jsxs(React.Fragment, { children: [
      /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          className: classNames(className, { [activeClassName]: active2 }),
          style,
          ref: itemRef,
          onClick: onClickItem,
          onMouseEnter: onMouseEnterItem,
          onMouseLeave: onMouseLeaveItem,
          children: label2
        }
      ),
      /* @__PURE__ */ jsxRuntime.jsx(
        Menu,
        {
          className: menuClassName,
          autofocus,
          style: menuStyle,
          reference: itemRef,
          closeOnBodyClick,
          closeOnEscape,
          open: active2,
          placement,
          maxHeight,
          ref: menuRef,
          onMouseEnter: onMouseEnterMenu,
          onMouseLeave: onMouseLeaveMenu,
          onClose: onNestedMenuClose,
          children
        }
      )
    ] });
  };
  NestedMenu.defaultProps = {
    autofocus: true,
    placement: "right-start",
    closeOnEscape: true,
    closeOnBodyClick: true,
    enterDelay: 0,
    leaveDelay: 100
  };
  const enabled = "_enabled_ftw1e_1";
  const css$2 = {
    enabled
  };
  const useGlobalMenuState = creteGlobalStateHook([]);
  const ContextMenu = ({
    children,
    content: content2,
    disabled: disabled2,
    triggerClassName,
    triggerOpenClassName,
    autofocus,
    autoClose,
    ...rest
  }) => {
    const id = rdk.useId();
    const [menus, setMenus] = useGlobalMenuState();
    const [open2, setOpen] = React.useState(false);
    const onOpen = React.useCallback(() => {
      if (!disabled2) {
        menus.forEach((m) => m(false));
        setOpen(true);
        setMenus([setOpen]);
      }
    }, [disabled2, setOpen, setMenus, menus]);
    const closeAll = React.useCallback(() => {
      setOpen(false);
      setMenus([]);
    }, [setOpen, setMenus]);
    const close2 = React.useCallback(() => {
      setOpen(false);
      setMenus(menus.filter((m) => m !== setOpen));
    }, [menus, setMenus]);
    const onClose = React.useCallback(() => {
      closeAll();
    }, [closeAll]);
    React.useEffect(() => {
      if (open2) {
        closeAll();
      }
    }, [closeAll]);
    return /* @__PURE__ */ jsxRuntime.jsx(
      rdk.ConnectedOverlay,
      {
        placement: "bottom-start",
        triggerElement: "span",
        ...rest,
        triggerClassName: classNames(triggerClassName, {
          [triggerOpenClassName]: open2,
          [css$2.enabled]: !disabled2
        }),
        trigger: "contextmenu",
        open: open2,
        content: () => /* @__PURE__ */ jsxRuntime.jsx(
          framerMotion.motion.div,
          {
            initial: { opacity: 0, y: -25 },
            animate: { opacity: 1, y: 0 },
            exit: { opacity: 0, y: -25 },
            onClick: () => autoClose && (onClose == null ? void 0 : onClose()),
            children: autofocus ? /* @__PURE__ */ jsxRuntime.jsx(
              FocusTrap,
              {
                focusTrapOptions: {
                  escapeDeactivates: true,
                  clickOutsideDeactivates: true,
                  fallbackFocus: `#${id}`
                },
                children: /* @__PURE__ */ jsxRuntime.jsx("div", { id, tabIndex: -1, children: typeof content2 === "function" ? content2({ closeAll, close: close2 }) : content2 })
              }
            ) : /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: typeof content2 === "function" ? content2({ closeAll, close: close2 }) : content2 })
          }
        ),
        onOpen,
        onClose,
        children
      }
    );
  };
  ContextMenu.defaultProps = {
    autofocus: true,
    autoClose: true,
    closeOnEscape: true,
    closeOnBodyClick: true
  };
  const notification = "_notification_1ggeh_1";
  const contentContainer = "_contentContainer_1ggeh_14";
  const error = "_error_1ggeh_20";
  const header = "_header_1ggeh_21";
  const warning = "_warning_1ggeh_26";
  const success = "_success_1ggeh_32";
  const close = "_close_1ggeh_38";
  const content = "_content_1ggeh_14";
  const body = "_body_1ggeh_55";
  const closeButton = "_closeButton_1ggeh_64";
  const css$1 = {
    notification,
    contentContainer,
    error,
    header,
    warning,
    success,
    close,
    content,
    body,
    closeButton
  };
  const Notification = ({
    id,
    title,
    showClose,
    body: body2,
    timeout,
    className,
    variant,
    component,
    onClose
  }) => {
    const timeoutRef = React.useRef(null);
    const clearTimer = React.useCallback(() => clearTimeout(timeoutRef.current), []);
    const startTimer = React.useCallback(() => {
      clearTimer();
      timeoutRef.current = setTimeout(() => onClose == null ? void 0 : onClose(id), timeout);
    }, [id, timeout, onClose, clearTimer]);
    React.useEffect(() => {
      startTimer();
      return () => clearTimer();
    }, [clearTimer, startTimer]);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      framerMotion.motion.div,
      {
        layout: true,
        initial: { opacity: 0, y: 50, scale: 0.5 },
        animate: { opacity: 1, y: 0, scale: 1 },
        exit: { opacity: 0, scale: 0.5, transition: { duration: 0.2 } },
        onMouseEnter: clearTimer,
        onMouseLeave: startTimer,
        children: [
          component,
          !component && /* @__PURE__ */ jsxRuntime.jsxs(
            "div",
            {
              className: classNames(css$1.notification, className, {
                [css$1.default]: variant === "default",
                [css$1.error]: variant === "error",
                [css$1.success]: variant === "success",
                [css$1.warning]: variant === "warning"
              }),
              children: [
                /* @__PURE__ */ jsxRuntime.jsxs("div", { className: css$1.content, children: [
                  title && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$1.header, children: title }),
                  body2 && /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$1.body, children: typeof body2 === "string" ? /* @__PURE__ */ jsxRuntime.jsx("span", { dangerouslySetInnerHTML: { __html: body2 } }) : body2 })
                ] }),
                /* @__PURE__ */ jsxRuntime.jsx("div", { className: css$1.close, children: showClose && /* @__PURE__ */ jsxRuntime.jsx(
                  "button",
                  {
                    type: "button",
                    className: css$1.closeButton,
                    onClick: () => onClose == null ? void 0 : onClose(id),
                    children: "✕"
                  }
                ) })
              ]
            }
          )
        ]
      }
    );
  };
  const NotificationsContext = React.createContext({
    notify: () => void 0,
    notifyError: () => void 0,
    notifyWarning: () => void 0,
    notifySuccess: () => void 0,
    clearNotification: () => void 0,
    clearAllNotifications: () => void 0
  });
  const container = "_container_16mce_1";
  const positions = "_positions_16mce_2";
  const css = {
    container,
    positions
  };
  let nextId = 0;
  const Notifications = ({
    children,
    limit,
    timeout,
    showClose,
    className,
    preventFlooding,
    components
  }) => {
    const [notifications, setNotifications] = React.useState([]);
    const clearNotification = React.useCallback(
      (id) => setNotifications(notifications.filter((n) => n.id !== id)),
      [notifications]
    );
    const clearAllNotifications = React.useCallback(() => setNotifications([]), []);
    const notify = React.useCallback(
      (title, options = {}) => {
        setNotifications((notifications2) => {
          if (preventFlooding && notifications2.find((n) => n.title === title)) {
            return notifications2;
          }
          const id = nextId++;
          const obj = {
            title,
            id,
            variant: "default",
            timeout,
            showClose,
            ...options
          };
          const sorted = [obj, ...notifications2];
          if (sorted.length > limit) {
            sorted.pop();
          }
          return sorted;
        });
      },
      [limit, preventFlooding, showClose, timeout]
    );
    const notifyError = React.useCallback(
      (title, options = {}) => notify(title, { ...options, variant: "error" }),
      [notify]
    );
    const notifyWarning = React.useCallback(
      (title, options = {}) => notify(title, { ...options, variant: "warning" }),
      [notify]
    );
    const notifySuccess = React.useCallback(
      (title, options = {}) => notify(title, { ...options, variant: "success" }),
      [notify]
    );
    const values = React.useMemo(
      () => ({
        notify,
        notifyError,
        notifyWarning,
        notifySuccess,
        clearNotification,
        clearAllNotifications
      }),
      [
        clearNotification,
        clearAllNotifications,
        notify,
        notifyError,
        notifySuccess,
        notifyWarning
      ]
    );
    return /* @__PURE__ */ jsxRuntime.jsxs(React.Fragment, { children: [
      /* @__PURE__ */ jsxRuntime.jsx(NotificationsContext.Provider, { value: values, children }),
      /* @__PURE__ */ jsxRuntime.jsx("div", { className: css.container, children: /* @__PURE__ */ jsxRuntime.jsx("div", { className: css.positions, children: /* @__PURE__ */ jsxRuntime.jsx(framerMotion.AnimatePresence, { children: !!notifications.length && /* @__PURE__ */ jsxRuntime.jsx(
        framerMotion.motion.div,
        {
          initial: { opacity: 0 },
          animate: { opacity: 1 },
          exit: { opacity: 0 },
          children: notifications.map((n) => {
            if (components == null ? void 0 : components[n.variant]) {
              const CustomNotification = components == null ? void 0 : components[n.variant];
              return /* @__PURE__ */ React.createElement(
                Notification,
                {
                  ...n,
                  component: /* @__PURE__ */ jsxRuntime.jsx(
                    CustomNotification,
                    {
                      message: n.title,
                      variant: n.variant,
                      onClose: () => clearNotification(n.id)
                    }
                  ),
                  showClose: false,
                  key: n.id,
                  onClose: clearNotification
                }
              );
            }
            return /* @__PURE__ */ React.createElement(
              Notification,
              {
                ...n,
                key: n.id,
                className: classNames(className, n.className),
                onClose: clearNotification
              }
            );
          })
        }
      ) }) }) })
    ] });
  };
  Notifications.defaultProps = {
    limit: 10,
    timeout: 4e3,
    showClose: true,
    preventFlooding: true
  };
  const useNotification = () => {
    const context = React.useContext(NotificationsContext);
    if (context === void 0) {
      throw new Error(
        "`useNotification` hook must be used within a `NotificationsContext` component"
      );
    }
    return context;
  };
  exports2.Arrow = Arrow;
  exports2.Avatar = Avatar;
  exports2.AvatarGroup = AvatarGroup;
  exports2.Badge = Badge;
  exports2.Block = Block;
  exports2.BorderBlocks = BorderBlocks;
  exports2.Button = Button;
  exports2.ButtonGroup = ButtonGroup;
  exports2.Calendar = Calendar;
  exports2.CalendarRange = CalendarRange;
  exports2.Card = Card;
  exports2.Checkbox = Checkbox;
  exports2.Chip = Chip;
  exports2.CloseIcon = CloseIcon;
  exports2.Collapse = Collapse;
  exports2.ColorBlock = ColorBlock;
  exports2.ColorBlocks = ColorBlocks;
  exports2.ColorPaletteBlock = ColorPaletteBlock;
  exports2.ColorPaletteBlocks = ColorPaletteBlocks;
  exports2.CommandPalette = CommandPalette;
  exports2.CommandPaletteInput = CommandPaletteInput;
  exports2.CommandPaletteItem = CommandPaletteItem;
  exports2.CommandPaletteSection = CommandPaletteSection;
  exports2.ComponentBlocks = ComponentBlocks;
  exports2.ContextMenu = ContextMenu;
  exports2.DataSize = DataSize;
  exports2.DateFormat = DateFormat;
  exports2.DebouncedInput = DebouncedInput;
  exports2.DeletableChip = DeletableChip;
  exports2.Dialog = Dialog;
  exports2.DialogHeader = DialogHeader;
  exports2.Divider = Divider;
  exports2.DotsLoader = DotsLoader;
  exports2.DownArrowIcon = DownArrowIcon;
  exports2.Drawer = Drawer;
  exports2.DrawerHeader = DrawerHeader;
  exports2.Duration = Duration;
  exports2.Ellipsis = Ellipsis;
  exports2.FUZZY_RANGE = FUZZY_RANGE;
  exports2.GradientBlocks = GradientBlocks;
  exports2.IconBlock = IconBlock;
  exports2.IconBlocks = IconBlocks;
  exports2.IconButton = IconButton;
  exports2.InfinityList = InfinityList;
  exports2.InlineInput = InlineInput;
  exports2.Input = Input;
  exports2.Kbd = Kbd;
  exports2.List = List;
  exports2.ListHeader = ListHeader;
  exports2.ListItem = ListItem;
  exports2.MODIFIER_KEY = MODIFIER_KEY;
  exports2.Menu = Menu;
  exports2.MotionGroup = MotionGroup;
  exports2.MotionItem = MotionItem;
  exports2.NestedMenu = NestedMenu;
  exports2.Notification = Notification;
  exports2.Notifications = Notifications;
  exports2.NotificationsContext = NotificationsContext;
  exports2.PageTitle = PageTitle;
  exports2.Pager = Pager;
  exports2.PaletteBlocks = PaletteBlocks;
  exports2.Pluralize = Pluralize;
  exports2.Popover = Popover;
  exports2.PrimaryHeading = PrimaryHeading;
  exports2.Radio = Radio;
  exports2.RadioGroup = RadioGroup;
  exports2.RangeDouble = RangeDouble;
  exports2.RangeSingle = RangeSingle;
  exports2.Redact = Redact;
  exports2.RefreshIcon = RefreshIcon;
  exports2.SecondaryHeading = SecondaryHeading;
  exports2.Select = Select;
  exports2.SelectInput = SelectInput;
  exports2.SelectInputChip = SelectInputChip;
  exports2.SelectMenu = SelectMenu;
  exports2.SelectOption = SelectOption;
  exports2.ShadowBlocks = ShadowBlocks;
  exports2.SmallHeading = SmallHeading;
  exports2.Sort = Sort;
  exports2.SpacingBlocks = SpacingBlocks;
  exports2.Stack = Stack;
  exports2.Sub = Sub;
  exports2.Text = Text;
  exports2.Textarea = Textarea;
  exports2.ThemeContext = ThemeContext;
  exports2.ThemeProvider = ThemeProvider;
  exports2.Toggle = Toggle;
  exports2.Tooltip = Tooltip;
  exports2.Tree = Tree;
  exports2.TreeNode = TreeNode;
  exports2.TypographyBlocks = TypographyBlocks;
  exports2.TypographyLetterBlock = TypographyLetterBlock;
  exports2.TypographySizeBlock = TypographySizeBlock;
  exports2.TypographyWeightBlock = TypographyWeightBlock;
  exports2.VerticalSpacer = VerticalSpacer;
  exports2.borders = borders;
  exports2.createOptions = createOptions;
  exports2.darkColors = darkColors;
  exports2.darkTheme = darkTheme;
  exports2.fontSizes = fontSizes;
  exports2.fontWeights = fontWeights;
  exports2.formatDuration = formatDuration;
  exports2.formatRelative = formatRelative;
  exports2.formatSize = formatSize;
  exports2.getDifference = getDifference;
  exports2.getGroups = getGroups;
  exports2.getHotkeyText = getHotkeyText;
  exports2.getInterval = getInterval;
  exports2.getItemsRange = getItemsRange;
  exports2.getNextDirection = getNextDirection;
  exports2.getPageRange = getPageRange;
  exports2.groupVariants = groupVariants;
  exports2.pluralize = pluralize;
  exports2.safeFormat = safeFormat;
  exports2.spacings = spacings;
  exports2.useDialog = useDialog;
  exports2.useDrawer = useDrawer;
  exports2.useInfinityList = useInfinityList;
  exports2.useMenu = useMenu;
  exports2.useNotification = useNotification;
  exports2.useTheme = useTheme;
  exports2.useTooltipState = useTooltipState;
  exports2.useWidth = useWidth;
  exports2.verticalVariant = verticalVariant;
  Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
});
//# sourceMappingURL=index.umd.cjs.map
